/** ifdef.d

Converted from 'ifdef.h'.

Version: V7.0
Authors: Koji Kishita
*/
module c.windows.ifdef;


import c.windows.sdkddkver;
import c.windows.windef;
import c.windows.guiddef;


alias ULONG32 NET_IF_OBJECT_ID;
alias NET_IF_OBJECT_ID* PNET_IF_OBJECT_ID;

enum {
	NET_IF_ADMIN_STATUS_UP      = 1,
	NET_IF_ADMIN_STATUS_DOWN    = 2,
	NET_IF_ADMIN_STATUS_TESTING = 3
}
alias int NET_IF_ADMIN_STATUS;
alias NET_IF_ADMIN_STATUS* PNET_IF_ADMIN_STATUS;

enum {
	NET_IF_OPER_STATUS_UP               = 1,
	NET_IF_OPER_STATUS_DOWN             = 2,
	NET_IF_OPER_STATUS_TESTING          = 3,
	NET_IF_OPER_STATUS_UNKNOWN          = 4,
	NET_IF_OPER_STATUS_DORMANT          = 5,
	NET_IF_OPER_STATUS_NOT_PRESENT      = 6,
	NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = 7
}
alias int NET_IF_OPER_STATUS;
alias NET_IF_OPER_STATUS* PNET_IF_OPER_STATUS;

enum {
	NET_IF_OPER_STATUS_DOWN_NOT_AUTHENTICATED   = 0x00000001,
	NET_IF_OPER_STATUS_DOWN_NOT_MEDIA_CONNECTED = 0x00000002,
	NET_IF_OPER_STATUS_DORMANT_PAUSED           = 0x00000004,
	NET_IF_OPER_STATUS_DORMANT_LOW_POWER        = 0x00000008,
}

alias UINT32 NET_IF_COMPARTMENT_ID;
alias NET_IF_COMPARTMENT_ID* PNET_IF_COMPARTMENT_ID;

enum {
	NET_IF_COMPARTMENT_ID_UNSPECIFIED = cast(NET_IF_COMPARTMENT_ID)0,
	NET_IF_COMPARTMENT_ID_PRIMARY     = cast(NET_IF_COMPARTMENT_ID)1,
}
enum {
	NET_IF_OID_IF_ALIAS       = 0x00000001,
	NET_IF_OID_COMPARTMENT_ID = 0x00000002,
	NET_IF_OID_NETWORK_GUID   = 0x00000003,
	NET_IF_OID_IF_ENTRY       = 0x00000004,
}

alias GUID NET_IF_NETWORK_GUID;
alias NET_IF_NETWORK_GUID* PNET_IF_NETWORK_GUID;

//	NET_SET_UNSPECIFIED_NETWORK_GUID(_pNetworkGuid)
//	NET_IS_UNSPECIFIED_NETWORK_GUID(_NetworkGuidValue)
enum {
	NET_SITEID_UNSPECIFIED = 0,
	NET_SITEID_MAXUSER     = 0x07ffffff,
	NET_SITEID_MAXSYSTEM   = 0x0fffffff,
}
static assert(NET_SITEID_MAXUSER < NET_SITEID_MAXSYSTEM);

enum {
	NET_IF_RCV_ADDRESS_TYPE_OTHER        = 1,
	NET_IF_RCV_ADDRESS_TYPE_VOLATILE     = 2,
	NET_IF_RCV_ADDRESS_TYPE_NON_VOLATILE = 3
}
alias int NET_IF_RCV_ADDRESS_TYPE;
alias NET_IF_RCV_ADDRESS_TYPE* PNET_IF_RCV_ADDRESS_TYPE;

struct NET_IF_RCV_ADDRESS_LH {
	NET_IF_RCV_ADDRESS_TYPE ifRcvAddressType;
	USHORT ifRcvAddressLength;
	USHORT ifRcvAddressOffset;
}
alias NET_IF_RCV_ADDRESS_LH* PNET_IF_RCV_ADDRESS_LH;

struct NET_IF_ALIAS_LH {
	USHORT ifAliasLength;
	USHORT ifAliasOffset;
}
alias NET_IF_ALIAS_LH* PNET_IF_ALIAS_LH;


union NET_LUID_LH {
	ULONG64 Value;
	/*struct {
		ULONG64 Reserved:24;
		ULONG64 NetLuidIndex:24;
		ULONG64 IfType:16;
	}*/
	ULONG64 Info;
}
alias NET_LUID_LH* PNET_LUID_LH;


//(NTDDI_VERSION >= NTDDI_VISTA)
	alias NET_IF_RCV_ADDRESS_LH NET_IF_RCV_ADDRESS;
	alias NET_IF_RCV_ADDRESS* PNET_IF_RCV_ADDRESS;
	alias NET_IF_ALIAS_LH NET_IF_ALIAS;
	alias NET_IF_ALIAS* PNET_IF_ALIAS;

alias NET_LUID_LH NET_LUID;
alias NET_LUID* PNET_LUID;

alias NET_LUID IF_LUID;
alias IF_LUID* PIF_LUID;

alias ULONG NET_IFINDEX;
alias NET_IFINDEX* PNET_IFINDEX;
alias UINT16 NET_IFTYPE;
alias NET_IFTYPE* PNET_IFTYPE;

enum {
	NET_IFINDEX_UNSPECIFIED = cast(NET_IFINDEX)0,
	NET_IFLUID_UNSPECIFIED  = 0,
}
enum {
	NIIF_HARDWARE_INTERFACE      = 0x00000001,
	NIIF_FILTER_INTERFACE        = 0x00000002,
	NIIF_NDIS_RESERVED1          = 0x00000004,
	NIIF_NDIS_RESERVED2          = 0x00000008,
	NIIF_NDIS_RESERVED3          = 0x00000010,
	NIIF_NDIS_WDM_INTERFACE      = 0x00000020,
	NIIF_NDIS_ENDPOINT_INTERFACE = 0x00000040,
	NIIF_NDIS_ISCSI_INTERFACE    = 0x00000080,
	NIIF_WAN_TUNNEL_TYPE_UNKNOWN = cast(ULONG)-1,
}

enum {
	NET_IF_ACCESS_LOOPBACK             = 1,
	NET_IF_ACCESS_BROADCAST            = 2,
	NET_IF_ACCESS_POINT_TO_POINT       = 3,
	NET_IF_ACCESS_POINT_TO_MULTI_POINT = 4,
	NET_IF_ACCESS_MAXIMUM              = 5
}
alias int NET_IF_ACCESS_TYPE;
alias NET_IF_ACCESS_TYPE* PNET_IF_ACCESS_TYPE;

enum {
	NET_IF_DIRECTION_SENDRECEIVE,
	NET_IF_DIRECTION_SENDONLY,
	NET_IF_DIRECTION_RECEIVEONLY,
	NET_IF_DIRECTION_MAXIMUM
}
alias int NET_IF_DIRECTION_TYPE;
alias NET_IF_DIRECTION_TYPE* PNET_IF_DIRECTION_TYPE;

enum {
	NET_IF_CONNECTION_DEDICATED = 1,
	NET_IF_CONNECTION_PASSIVE   = 2,
	NET_IF_CONNECTION_DEMAND    = 3,
	NET_IF_CONNECTION_MAXIMUM   = 4
}
alias int NET_IF_CONNECTION_TYPE;
alias NET_IF_CONNECTION_TYPE* PNET_IF_CONNECTION_TYPE;

enum {
	MediaConnectStateUnknown,
	MediaConnectStateConnected,
	MediaConnectStateDisconnected
}
alias int NET_IF_MEDIA_CONNECT_STATE;
alias NET_IF_MEDIA_CONNECT_STATE* PNET_IF_MEDIA_CONNECT_STATE;

enum NET_IF_LINK_SPEED_UNKNOWN = cast(ULONG64)-1;

enum {
	MediaDuplexStateUnknown,
	MediaDuplexStateHalf,
	MediaDuplexStateFull
}
alias int NET_IF_MEDIA_DUPLEX_STATE;
alias NET_IF_MEDIA_DUPLEX_STATE* PNET_IF_MEDIA_DUPLEX_STATE;

enum {
	NIIF_BUS_NUMBER_UNKNOWN      = cast(ULONG)-1,
	NIIF_SLOT_NUMBER_UNKNOWN     = cast(ULONG)-1,
	NIIF_FUNCTION_NUMBER_UNKNOWN = cast(ULONG)-1,
}

struct NET_PHYSICAL_LOCATION_LH {
	ULONG BusNumber;
	ULONG SlotNumber;
	ULONG FunctionNumber;
}
alias NET_PHYSICAL_LOCATION_LH* PNET_PHYSICAL_LOCATION_LH;

enum IF_MAX_STRING_SIZE = 256;

struct IF_COUNTED_STRING_LH {
	USHORT Length;
	WCHAR[IF_MAX_STRING_SIZE + 1] String;
}
alias IF_COUNTED_STRING_LH* PIF_COUNTED_STRING_LH;

enum IF_MAX_PHYS_ADDRESS_LENGTH = 32;

struct IF_PHYSICAL_ADDRESS_LH {
	USHORT Length;
	UCHAR[IF_MAX_PHYS_ADDRESS_LENGTH] Address;
}
alias IF_PHYSICAL_ADDRESS_LH* PIF_PHYSICAL_ADDRESS_LH;

//(NTDDI_VERSION >= NTDDI_VISTA)
	alias NET_PHYSICAL_LOCATION_LH NET_PHYSICAL_LOCATION;
	alias NET_PHYSICAL_LOCATION* PNET_PHYSICAL_LOCATION;

	alias IF_COUNTED_STRING_LH IF_COUNTED_STRING;
	alias IF_COUNTED_STRING* PIF_COUNTED_STRING;

	alias IF_PHYSICAL_ADDRESS_LH IF_PHYSICAL_ADDRESS;
	alias IF_PHYSICAL_ADDRESS* PIF_PHYSICAL_ADDRESS;

alias NET_IFINDEX IF_INDEX;
alias IF_INDEX* PIF_INDEX;
enum IFI_UNSPECIFIED = NET_IFINDEX_UNSPECIFIED;

enum {
	TUNNEL_TYPE_NONE    = 0,
	TUNNEL_TYPE_OTHER   = 1,
	TUNNEL_TYPE_DIRECT  = 2,
	TUNNEL_TYPE_6TO4    = 11,
	TUNNEL_TYPE_ISATAP  = 13,
	TUNNEL_TYPE_TEREDO  = 14,
	TUNNEL_TYPE_IPHTTPS = 15,
}
alias int TUNNEL_TYPE;
alias TUNNEL_TYPE* PTUNNEL_TYPE;

enum {
	IF_ADMINISTRATIVE_DISABLED,
	IF_ADMINISTRATIVE_ENABLED,
	IF_ADMINISTRATIVE_DEMANDDIAL,
}
alias int IF_ADMINISTRATIVE_STATE;
alias IF_ADMINISTRATIVE_STATE* PIF_ADMINISTRATIVE_STATE;

enum {
	IfOperStatusUp = 1,
	IfOperStatusDown,
	IfOperStatusTesting,
	IfOperStatusUnknown,
	IfOperStatusDormant,
	IfOperStatusNotPresent,
	IfOperStatusLowerLayerDown
}
alias int IF_OPER_STATUS;

struct NDIS_INTERFACE_INFORMATION {
	NET_IF_OPER_STATUS ifOperStatus;
	ULONG ifOperStatusFlags;
	NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
	NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
	ULONG ifMtu;
	BOOLEAN ifPromiscuousMode;
	BOOLEAN ifDeviceWakeUpEnable;
	ULONG64 XmitLinkSpeed;
	ULONG64 RcvLinkSpeed;
	ULONG64 ifLastChange;
	ULONG64 ifCounterDiscontinuityTime;
	ULONG64 ifInUnknownProtos;
	ULONG64 ifInDiscards;
	ULONG64 ifInErrors;
	ULONG64 ifHCInOctets;
	ULONG64 ifHCInUcastPkts;
	ULONG64 ifHCInMulticastPkts;
	ULONG64 ifHCInBroadcastPkts;
	ULONG64 ifHCOutOctets;
	ULONG64 ifHCOutUcastPkts;
	ULONG64 ifHCOutMulticastPkts;
	ULONG64 ifHCOutBroadcastPkts;
	ULONG64 ifOutErrors;
	ULONG64 ifOutDiscards;
	ULONG64 ifHCInUcastOctets;
	ULONG64 ifHCInMulticastOctets;
	ULONG64 ifHCInBroadcastOctets;
	ULONG64 ifHCOutUcastOctets;
	ULONG64 ifHCOutMulticastOctets;
	ULONG64 ifHCOutBroadcastOctets;
	NET_IF_COMPARTMENT_ID CompartmentId;
	ULONG SupportedStatistics;
}
alias NDIS_INTERFACE_INFORMATION* PNDIS_INTERFACE_INFORMATION;


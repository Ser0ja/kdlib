/** winsmcrd.d

Converted from 'winsmcrd.h'.

Version: V7.1
Authors: Koji Kishita
*/
module c.windows.winsmcrd;


import c.windows.windef;
import c.windows.winioctl;


extern(C){


enum FILE_DEVICE_SMARTCARD = 0x00000031;

enum SCARD_ATR_LENGTH = 33;

enum {
	SCARD_PROTOCOL_UNDEFINED = 0x00000000,
	SCARD_PROTOCOL_T0        = 0x00000001,
	SCARD_PROTOCOL_T1        = 0x00000002,
	SCARD_PROTOCOL_RAW       = 0x00010000,
	SCARD_PROTOCOL_Tx        = SCARD_PROTOCOL_T0 | SCARD_PROTOCOL_T1,
	SCARD_PROTOCOL_DEFAULT   = 0x80000000,
	SCARD_PROTOCOL_OPTIMAL   = 0x00000000,
}

enum {
	SCARD_POWER_DOWN = 0,
	SCARD_COLD_RESET = 1,
	SCARD_WARM_RESET = 2,
}

private pure
int SCARD_CTL_CODE(int code)
{
	return CTL_CODE(FILE_DEVICE_SMARTCARD,  code,  METHOD_BUFFERED,  FILE_ANY_ACCESS);
}

enum {
	IOCTL_SMARTCARD_POWER          = SCARD_CTL_CODE( 1),
	IOCTL_SMARTCARD_GET_ATTRIBUTE  = SCARD_CTL_CODE( 2),
	IOCTL_SMARTCARD_SET_ATTRIBUTE  = SCARD_CTL_CODE( 3),
	IOCTL_SMARTCARD_CONFISCATE     = SCARD_CTL_CODE( 4),
	IOCTL_SMARTCARD_TRANSMIT       = SCARD_CTL_CODE( 5),
	IOCTL_SMARTCARD_EJECT          = SCARD_CTL_CODE( 6),
	IOCTL_SMARTCARD_SWALLOW        = SCARD_CTL_CODE( 7),
	IOCTL_SMARTCARD_IS_PRESENT     = SCARD_CTL_CODE(10),
	IOCTL_SMARTCARD_IS_ABSENT      = SCARD_CTL_CODE(11),
	IOCTL_SMARTCARD_SET_PROTOCOL   = SCARD_CTL_CODE(12),
	IOCTL_SMARTCARD_GET_STATE      = SCARD_CTL_CODE(14),
	IOCTL_SMARTCARD_GET_LAST_ERROR = SCARD_CTL_CODE(15),
	IOCTL_SMARTCARD_GET_PERF_CNTR  = SCARD_CTL_CODE(16),
}

enum {
	MAXIMUM_ATTR_STRING_LENGTH = 32,
	MAXIMUM_SMARTCARD_READERS  = 10,
}

private pure
ULONG SCARD_ATTR_VALUE(ULONG Class, ULONG Tag)
{
	return (Class << 16) | Tag;
}

enum {
	SCARD_CLASS_VENDOR_INFO    = 1,
	SCARD_CLASS_COMMUNICATIONS = 2,
	SCARD_CLASS_PROTOCOL       = 3,
	SCARD_CLASS_POWER_MGMT     = 4,
	SCARD_CLASS_SECURITY       = 5,
	SCARD_CLASS_MECHANICAL     = 6,
	SCARD_CLASS_VENDOR_DEFINED = 7,
	SCARD_CLASS_IFD_PROTOCOL   = 8,
	SCARD_CLASS_ICC_STATE      = 9,
	SCARD_CLASS_PERF           = 0x7ffe,
	SCARD_CLASS_SYSTEM         = 0x7fff,
}

enum {
	SCARD_ATTR_VENDOR_NAME              = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0x0100),
	SCARD_ATTR_VENDOR_IFD_TYPE          = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0x0101),
	SCARD_ATTR_VENDOR_IFD_VERSION       = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0x0102),
	SCARD_ATTR_VENDOR_IFD_SERIAL_NO     = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0x0103),
	SCARD_ATTR_CHANNEL_ID               = SCARD_ATTR_VALUE(SCARD_CLASS_COMMUNICATIONS, 0x0110),
	SCARD_ATTR_PROTOCOL_TYPES           = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0120),
	SCARD_ATTR_DEFAULT_CLK              = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0121),
	SCARD_ATTR_MAX_CLK                  = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0122),
	SCARD_ATTR_DEFAULT_DATA_RATE        = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0123),
	SCARD_ATTR_MAX_DATA_RATE            = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0124),
	SCARD_ATTR_MAX_IFSD                 = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0125),
	SCARD_ATTR_POWER_MGMT_SUPPORT       = SCARD_ATTR_VALUE(SCARD_CLASS_POWER_MGMT, 0x0131),
	SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE = SCARD_ATTR_VALUE(SCARD_CLASS_SECURITY, 0x0140),
	SCARD_ATTR_USER_AUTH_INPUT_DEVICE   = SCARD_ATTR_VALUE(SCARD_CLASS_SECURITY, 0x0142),
	SCARD_ATTR_CHARACTERISTICS          = SCARD_ATTR_VALUE(SCARD_CLASS_MECHANICAL, 0x0150),
	SCARD_ATTR_CURRENT_PROTOCOL_TYPE    = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0201),
	SCARD_ATTR_CURRENT_CLK              = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0202),
	SCARD_ATTR_CURRENT_F                = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0203),
	SCARD_ATTR_CURRENT_D                = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0204),
	SCARD_ATTR_CURRENT_N                = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0205),
	SCARD_ATTR_CURRENT_W                = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0206),
	SCARD_ATTR_CURRENT_IFSC             = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0207),
	SCARD_ATTR_CURRENT_IFSD             = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0208),
	SCARD_ATTR_CURRENT_BWT              = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0209),
	SCARD_ATTR_CURRENT_CWT              = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x020a),
	SCARD_ATTR_CURRENT_EBC_ENCODING     = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x020b),
	SCARD_ATTR_EXTENDED_BWT             = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x020c),
	SCARD_ATTR_ICC_PRESENCE             = SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0x0300),
	SCARD_ATTR_ICC_INTERFACE_STATUS     = SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0x0301),
	SCARD_ATTR_CURRENT_IO_STATE         = SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0x0302),
	SCARD_ATTR_ATR_STRING               = SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0x0303),
	SCARD_ATTR_ICC_TYPE_PER_ATR         = SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0x0304),
	SCARD_ATTR_ESC_RESET                = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0xA000),
	SCARD_ATTR_ESC_CANCEL               = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0xA003),
	SCARD_ATTR_ESC_AUTHREQUEST          = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0xA005),
	SCARD_ATTR_MAXINPUT                 = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0xA007),
	SCARD_ATTR_DEVICE_UNIT              = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0001),
	SCARD_ATTR_DEVICE_IN_USE            = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0002),
	SCARD_ATTR_DEVICE_FRIENDLY_NAME_A   = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0003),
	SCARD_ATTR_DEVICE_SYSTEM_NAME_A     = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0004),
	SCARD_ATTR_DEVICE_FRIENDLY_NAME_W   = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0005),
	SCARD_ATTR_DEVICE_SYSTEM_NAME_W     = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0006),
	SCARD_ATTR_SUPRESS_T1_IFS_REQUEST   = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0007),
	SCARD_PERF_NUM_TRANSMISSIONS        = SCARD_ATTR_VALUE(SCARD_CLASS_PERF, 0x0001),
	SCARD_PERF_BYTES_TRANSMITTED        = SCARD_ATTR_VALUE(SCARD_CLASS_PERF, 0x0002),
	SCARD_PERF_TRANSMISSION_TIME        = SCARD_ATTR_VALUE(SCARD_CLASS_PERF, 0x0003),
}


version(UNICODE){
	alias SCARD_ATTR_DEVICE_FRIENDLY_NAME_W SCARD_ATTR_DEVICE_FRIENDLY_NAME;
	alias SCARD_ATTR_DEVICE_SYSTEM_NAME_W SCARD_ATTR_DEVICE_SYSTEM_NAME;
}else{
	alias SCARD_ATTR_DEVICE_FRIENDLY_NAME_A SCARD_ATTR_DEVICE_FRIENDLY_NAME;
	alias SCARD_ATTR_DEVICE_SYSTEM_NAME_A SCARD_ATTR_DEVICE_SYSTEM_NAME;
}

enum {
	SCARD_T0_HEADER_LENGTH   = 7,
	SCARD_T0_CMD_LENGTH      = 5,
	SCARD_T1_PROLOGUE_LENGTH = 3,
	SCARD_T1_EPILOGUE_LENGTH = 2,
	SCARD_T1_MAX_IFS         = 254,
	SCARD_UNKNOWN            = 0,
	SCARD_ABSENT             = 1,
	SCARD_PRESENT            = 2,
	SCARD_SWALLOWED          = 3,
	SCARD_POWERED            = 4,
	SCARD_NEGOTIABLE         = 5,
	SCARD_SPECIFIC           = 6,
}

struct SCARD_IO_REQUEST {
	DWORD dwProtocol;
	DWORD cbPciLength;
}
alias SCARD_IO_REQUEST* PSCARD_IO_REQUEST;
alias SCARD_IO_REQUEST* LPSCARD_IO_REQUEST;
alias const(SCARD_IO_REQUEST)* LPCSCARD_IO_REQUEST;

struct SCARD_T0_COMMAND {
	BYTE bCla, bIns, bP1, bP2, bP3;
}
alias SCARD_T0_COMMAND* LPSCARD_T0_COMMAND;

struct SCARD_T0_REQUEST {
	SCARD_IO_REQUEST ioRequest;
	BYTE bSw1, bSw2;
	union {
		SCARD_T0_COMMAND CmdBytes;
		BYTE[5] rgbHeader;
	}
}
alias SCARD_T0_REQUEST* PSCARD_T0_REQUEST;
alias SCARD_T0_REQUEST* LPSCARD_T0_REQUEST;

struct SCARD_T1_REQUEST {
	SCARD_IO_REQUEST ioRequest;
}
alias SCARD_T1_REQUEST* PSCARD_T1_REQUEST;
alias SCARD_T1_REQUEST* LPSCARD_T1_REQUEST;

enum {
	SCARD_READER_SWALLOWS    = 0x00000001,
	SCARD_READER_EJECTS      = 0x00000002,
	SCARD_READER_CONFISCATES = 0x00000004,
}

enum {
	SCARD_READER_TYPE_SERIAL   = 0x01,
	SCARD_READER_TYPE_PARALELL = 0x02,
	SCARD_READER_TYPE_KEYBOARD = 0x04,
	SCARD_READER_TYPE_SCSI     = 0x08,
	SCARD_READER_TYPE_IDE      = 0x10,
	SCARD_READER_TYPE_USB      = 0x20,
	SCARD_READER_TYPE_PCMCIA   = 0x40,
	SCARD_READER_TYPE_VENDOR   = 0xF0,
}

}// extern(C)

/** d3d11.d

Converted from 'd3d11.h'.

Version: DirectX 11 SDK February 2010
Authors: Koji Kishita
*/
module c.windows.d3d11;


import c.windows.windef;
import c.windows.guiddef;
import c.windows.unknwn;
import c.windows.winerror;
import c.windows.d3dcommon;
import c.windows.dxgi;
import c.windows.dxgitype;
import c.windows.dxgiformat;


extern(C){

enum {
	D3D11_16BIT_INDEX_STRIP_CUT_VALUE = 0xffff,
	D3D11_32BIT_INDEX_STRIP_CUT_VALUE = 0xffffffff,
	D3D11_8BIT_INDEX_STRIP_CUT_VALUE = 0xff,
	D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9,
	D3D11_CLIP_OR_CULL_DISTANCE_COUNT = 8,
	D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2,
	D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14,
	D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4,
	D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32,
	D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15,
	D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4,
	D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15,
	D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1,
	D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1,
	D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64,
	D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4,
	D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1,
	D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1,
	D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1,
	D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32,
	D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1,
	D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128,
	D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1,
	D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1,
	D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128,
	D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1,
	D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16,
	D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1,
	D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1,
	D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = 16,
	D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32,
	D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4,
	D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = 4096,
	D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3,
	D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3,
	D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10,
	D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10,
	D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8,
	D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7,
	D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256,
	D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64,
	D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240,
	D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68,
	D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224,
	D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72,
	D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208,
	D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76,
	D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192,
	D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84,
	D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176,
	D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92,
	D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160,
	D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100,
	D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144,
	D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112,
	D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128,
	D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128,
	D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112,
	D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144,
	D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96,
	D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168,
	D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80,
	D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204,
	D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64,
	D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256,
	D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48,
	D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340,
	D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32,
	D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512,
	D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16,
	D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768,
	D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1,
	D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256,
	D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768,
	D3D11_CS_4_X_THREAD_GROUP_MAX_X = 768,
	D3D11_CS_4_X_THREAD_GROUP_MAX_Y = 768,
	D3D11_CS_4_X_UAV_REGISTER_COUNT = 1,
	D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535,
	D3D11_CS_TGSM_REGISTER_COUNT = 8192,
	D3D11_CS_TGSM_REGISTER_READS_PER_INST = 1,
	D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1,
	D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1,
	D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024,
	D3D11_CS_THREAD_GROUP_MAX_X = 1024,
	D3D11_CS_THREAD_GROUP_MAX_Y = 1024,
	D3D11_CS_THREAD_GROUP_MAX_Z = 64,
	D3D11_CS_THREAD_GROUP_MIN_X = 1,
	D3D11_CS_THREAD_GROUP_MIN_Y = 1,
	D3D11_CS_THREAD_GROUP_MIN_Z = 1,
	D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384,
	D3D11_DEFAULT_BLEND_FACTOR_ALPHA = 1.0f,
	D3D11_DEFAULT_BLEND_FACTOR_BLUE = 1.0f,
	D3D11_DEFAULT_BLEND_FACTOR_GREEN = 1.0f,
	D3D11_DEFAULT_BLEND_FACTOR_RED = 1.0f,
	D3D11_DEFAULT_BORDER_COLOR_COMPONENT = 0.0f,
	D3D11_DEFAULT_DEPTH_BIAS = 0,
	D3D11_DEFAULT_DEPTH_BIAS_CLAMP = 0.0f,
	D3D11_DEFAULT_MAX_ANISOTROPY = 16,
	D3D11_DEFAULT_MIP_LOD_BIAS = 0.0f,
	D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0,
	D3D11_DEFAULT_SAMPLE_MASK = 0xffffffff,
	D3D11_DEFAULT_SCISSOR_ENDX = 0,
	D3D11_DEFAULT_SCISSOR_ENDY = 0,
	D3D11_DEFAULT_SCISSOR_STARTX = 0,
	D3D11_DEFAULT_SCISSOR_STARTY = 0,
	D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0.0f,
	D3D11_DEFAULT_STENCIL_READ_MASK = 0xff,
	D3D11_DEFAULT_STENCIL_REFERENCE = 0,
	D3D11_DEFAULT_STENCIL_WRITE_MASK = 0xff,
	D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0,
	D3D11_DEFAULT_VIEWPORT_HEIGHT = 0,
	D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = 0.0f,
	D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = 0.0f,
	D3D11_DEFAULT_VIEWPORT_TOPLEFTX = 0,
	D3D11_DEFAULT_VIEWPORT_TOPLEFTY = 0,
	D3D11_DEFAULT_VIEWPORT_WIDTH = 0,
	D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968,
	D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4,
	D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32,
	D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2,
	D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1,
	D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3,
	D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1,
	D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2,
	D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1,
	D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4,
	D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32,
	D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2,
	D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1,
	D3D11_DS_OUTPUT_REGISTER_COMPONENTS = 4,
	D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_DS_OUTPUT_REGISTER_COUNT = 32,
	D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0.6,
	D3D11_FLOAT32_MAX = 3.402823466e+38f,
	D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6f,
	D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 2.4f,
	D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1.0f,
	D3D11_FLOAT_TO_SRGB_OFFSET = 0.055f,
	D3D11_FLOAT_TO_SRGB_SCALE_1 = 12.92f,
	D3D11_FLOAT_TO_SRGB_SCALE_2 = 1.055f,
	D3D11_FLOAT_TO_SRGB_THRESHOLD = 0.0031308f,
	D3D11_FTOI_INSTRUCTION_MAX_INPUT = 2147483647.999f,
	D3D11_FTOI_INSTRUCTION_MIN_INPUT = -2147483648.999f,
	D3D11_FTOU_INSTRUCTION_MAX_INPUT = 4294967295.999f,
	D3D11_FTOU_INSTRUCTION_MIN_INPUT = 0.0f,
	D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2,
	D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = 1,
	D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1,
	D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1,
	D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1,
	D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1,
	D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2,
	D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1,
	D3D11_GS_INPUT_REGISTER_COMPONENTS = 4,
	D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_GS_INPUT_REGISTER_COUNT = 32,
	D3D11_GS_INPUT_REGISTER_READS_PER_INST = 2,
	D3D11_GS_INPUT_REGISTER_READ_PORTS = 1,
	D3D11_GS_INPUT_REGISTER_VERTICES = 32,
	D3D11_GS_MAX_INSTANCE_COUNT = 32,
	D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024,
	D3D11_GS_OUTPUT_ELEMENTS = 32,
	D3D11_GS_OUTPUT_REGISTER_COMPONENTS = 4,
	D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_GS_OUTPUT_REGISTER_COUNT = 32,
	D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32,
	D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32,
	D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4,
	D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2,
	D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1,
	D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xffffffff,
	D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1,
	D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1,
	D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2,
	D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1,
	D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1,
	D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1,
	D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2,
	D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1,
	D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1,
	D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1,
	D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2,
	D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1,
	D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xffffffff,
	D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = 1.0f,
	D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = 64.0f,
	D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968,
	D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1,
	D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1,
	D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2,
	D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1,
	D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4,
	D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32,
	D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2,
	D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1,
	D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0,
	D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0,
	D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0,
	D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1,
	D3D11_IA_INSTANCE_ID_BIT_COUNT = 32,
	D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32,
	D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32,
	D3D11_IA_PRIMITIVE_ID_BIT_COUNT = 32,
	D3D11_IA_VERTEX_ID_BIT_COUNT = 32,
	D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32,
	D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128,
	D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32,
	D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 0xffffffff,
	D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 0xffffffff,
	D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 0xffffffff,
	D3D11_KEEP_UNORDERED_ACCESS_VIEWS = 0xffffffff,
	D3D11_LINEAR_GAMMA = 1.0f,
	D3D11_MAJOR_VERSION = 11,
	D3D11_MAX_BORDER_COLOR_COMPONENT = 1.0f,
	D3D11_MAX_DEPTH = 1.0f,
	D3D11_MAX_MAXANISOTROPY = 16,
	D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = 32,
	D3D11_MAX_POSITION_VALUE = 3.402823466e+34f,
	D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17,
	D3D11_MINOR_VERSION = 0,
	D3D11_MIN_BORDER_COLOR_COMPONENT = 0.0f,
	D3D11_MIN_DEPTH = 0.0f,
	D3D11_MIN_MAXANISOTROPY = 0,
	D3D11_MIP_LOD_BIAS_MAX = 15.99f,
	D3D11_MIP_LOD_BIAS_MIN = -16.0f,
	D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = 8,
	D3D11_MIP_LOD_RANGE_BIT_COUNT = 8,
	D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4f,
	D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0,
	D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15,
	D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16,
	D3D11_PS_CS_UAV_REGISTER_COMPONENTS = 1,
	D3D11_PS_CS_UAV_REGISTER_COUNT = 8,
	D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = 1,
	D3D11_PS_CS_UAV_REGISTER_READ_PORTS = 1,
	D3D11_PS_FRONTFACING_DEFAULT_VALUE = 0xffffffff,
	D3D11_PS_FRONTFACING_FALSE_VALUE = 0,
	D3D11_PS_FRONTFACING_TRUE_VALUE = 0xffffffff,
	D3D11_PS_INPUT_REGISTER_COMPONENTS = 4,
	D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_PS_INPUT_REGISTER_COUNT = 32,
	D3D11_PS_INPUT_REGISTER_READS_PER_INST = 2,
	D3D11_PS_INPUT_REGISTER_READ_PORTS = 1,
	D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.0f,
	D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1,
	D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1,
	D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1,
	D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = 1,
	D3D11_PS_OUTPUT_REGISTER_COMPONENTS = 4,
	D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_PS_OUTPUT_REGISTER_COUNT = 8,
	D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5f,
	D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = 16,
	D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096,
	D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27,
	D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096,
	D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096,
	D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32,
	D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32,
	D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384,
	D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024,
	D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096,
	D3D11_REQ_MAXANISOTROPY = 16,
	D3D11_REQ_MIP_LEVELS = 15,
	D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048,
	D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096,
	D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384,
	D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128,
	D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25f,
	D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20,
	D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096,
	D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048,
	D3D11_REQ_TEXTURE1D_U_DIMENSION = 16384,
	D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048,
	D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384,
	D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048,
	D3D11_REQ_TEXTURECUBE_DIMENSION = 16384,
	D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0,
	D3D11_SHADER_MAJOR_VERSION = 5,
	D3D11_SHADER_MAX_INSTANCES = 65535,
	D3D11_SHADER_MAX_INTERFACES = 253,
	D3D11_SHADER_MAX_INTERFACE_CALL_SITES = 4096,
	D3D11_SHADER_MAX_TYPES = 65535,
	D3D11_SHADER_MINOR_VERSION = 0,
	D3D11_SHIFT_INSTRUCTION_PAD_VALUE = 0,
	D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5,
	D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = 8,
	D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048,
	D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512,
	D3D11_SO_BUFFER_SLOT_COUNT = 4,
	D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 0xffffffff,
	D3D11_SO_NO_RASTERIZED_STREAM = 0xffffffff,
	D3D11_SO_OUTPUT_COMPONENT_COUNT = 128,
	D3D11_SO_STREAM_COUNT = 4,
	D3D11_SPEC_DATE_DAY = 04,
	D3D11_SPEC_DATE_MONTH = 06,
	D3D11_SPEC_DATE_YEAR = 2009,
	D3D11_SPEC_VERSION = 1.0,
	D3D11_SRGB_GAMMA = 2.2f,
	D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92f,
	D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055f,
	D3D11_SRGB_TO_FLOAT_EXPONENT = 2.4f,
	D3D11_SRGB_TO_FLOAT_OFFSET = 0.055f,
	D3D11_SRGB_TO_FLOAT_THRESHOLD = 0.04045f,
	D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5f,
	D3D11_STANDARD_COMPONENT_BIT_COUNT = 32,
	D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64,
	D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4,
	D3D11_STANDARD_PIXEL_COMPONENT_COUNT = 128,
	D3D11_STANDARD_PIXEL_ELEMENT_COUNT = 32,
	D3D11_STANDARD_VECTOR_SIZE = 4,
	D3D11_STANDARD_VERTEX_ELEMENT_COUNT = 32,
	D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64,
	D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8,
	D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8,
	D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64,
	D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64,
	D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63,
	D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64,
	D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2,
	D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1,
	D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1,
	D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16,
	D3D11_UNBOUND_MEMORY_ACCESS_RESULT = 0,
	D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15,
	D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16,
	D3D11_VIEWPORT_BOUNDS_MAX = 32767,
	D3D11_VIEWPORT_BOUNDS_MIN = -32768,
	D3D11_VS_INPUT_REGISTER_COMPONENTS = 4,
	D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_VS_INPUT_REGISTER_COUNT = 32,
	D3D11_VS_INPUT_REGISTER_READS_PER_INST = 2,
	D3D11_VS_INPUT_REGISTER_READ_PORTS = 1,
	D3D11_VS_OUTPUT_REGISTER_COMPONENTS = 4,
	D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
	D3D11_VS_OUTPUT_REGISTER_COUNT = 32,
	D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10,
	D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25,
	D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25,
}

private enum _FACD3D11 = 0x87c;
private enum _FACD3D11DEBUG = _FACD3D11 + 1;

private pure nothrow
HRESULT MAKE_D3D11_HRESULT(WORD code )
{
	return MAKE_HRESULT(1, _FACD3D11, code);
}

HRESULT MAKE_D3D11_STATUS(WORD code )
{
	return MAKE_HRESULT(0, _FACD3D11, code);
}

enum {
	D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = MAKE_D3D11_HRESULT(1),
	D3D11_ERROR_FILE_NOT_FOUND = MAKE_D3D11_HRESULT(2),
	D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS = MAKE_D3D11_HRESULT(3),
	D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD = MAKE_D3D11_HRESULT(4),
}

enum {
	D3D11_INPUT_PER_VERTEX_DATA   = 0,
	D3D11_INPUT_PER_INSTANCE_DATA = 1
}
alias int D3D11_INPUT_CLASSIFICATION;

enum D3D11_APPEND_ALIGNED_ELEMENT = 0xffffffff;

struct D3D11_INPUT_ELEMENT_DESC {
	LPCSTR SemanticName;
	UINT SemanticIndex;
	DXGI_FORMAT Format;
	UINT InputSlot;
	UINT AlignedByteOffset;
	D3D11_INPUT_CLASSIFICATION InputSlotClass;
	UINT InstanceDataStepRate;
}

enum {
	D3D11_FILL_WIREFRAME = 2,
	D3D11_FILL_SOLID     = 3
}
alias int D3D11_FILL_MODE;

enum {
	D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
	D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST = 2,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
	D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
	D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
	D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
	D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
	D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
	D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
	D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
	D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
	D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
	D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
	D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
	D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
	D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
	D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
	D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
	D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
	D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
	D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
	D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
	D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
	D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
	D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
	D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
	D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
	D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
	D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
	D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
	D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
	D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
	D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
	D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
	D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
}
alias int D3D11_PRIMITIVE_TOPOLOGY;

enum {
	D3D11_PRIMITIVE_UNDEFINED = 0,
	D3D11_PRIMITIVE_POINT = 1,
	D3D11_PRIMITIVE_LINE = 2,
	D3D11_PRIMITIVE_TRIANGLE = 3,
	D3D11_PRIMITIVE_LINE_ADJ = 6,
	D3D11_PRIMITIVE_TRIANGLE_ADJ = 7,
	D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH = 8,
	D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH = 9,
	D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH = 10,
	D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH = 11,
	D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH = 12,
	D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH = 13,
	D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH = 14,
	D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH = 15,
	D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH = 16,
	D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH = 17,
	D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH = 18,
	D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH = 19,
	D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH = 20,
	D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH = 21,
	D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH = 22,
	D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH = 23,
	D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH = 24,
	D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH = 25,
	D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH = 26,
	D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH = 27,
	D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH = 28,
	D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH = 29,
	D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH = 30,
	D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH = 31,
	D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH = 32,
	D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH = 33,
	D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH = 34,
	D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH = 35,
	D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH = 36,
	D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH = 37,
	D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH = 38,
	D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH = 39
}
alias int D3D11_PRIMITIVE;

enum {
	D3D11_CULL_NONE = 1,
	D3D11_CULL_FRONT = 2,
	D3D11_CULL_BACK = 3
}
alias int D3D11_CULL_MODE;

struct D3D11_SO_DECLARATION_ENTRY {
	UINT Stream;
	LPCSTR SemanticName;
	UINT SemanticIndex;
	BYTE StartComponent;
	BYTE ComponentCount;
	BYTE OutputSlot;
}

struct D3D11_VIEWPORT {
	FLOAT TopLeftX;
	FLOAT TopLeftY;
	FLOAT Width;
	FLOAT Height;
	FLOAT MinDepth;
	FLOAT MaxDepth;
}

enum {
	D3D11_RESOURCE_DIMENSION_UNKNOWN = 0,
	D3D11_RESOURCE_DIMENSION_BUFFER = 1,
	D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
	D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
	D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4
}
alias int D3D11_RESOURCE_DIMENSION;

enum {
	D3D11_SRV_DIMENSION_UNKNOWN = 0,
	D3D11_SRV_DIMENSION_BUFFER = 1,
	D3D11_SRV_DIMENSION_TEXTURE1D = 2,
	D3D11_SRV_DIMENSION_TEXTURE1DARRAY = 3,
	D3D11_SRV_DIMENSION_TEXTURE2D = 4,
	D3D11_SRV_DIMENSION_TEXTURE2DARRAY = 5,
	D3D11_SRV_DIMENSION_TEXTURE2DMS = 6,
	D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
	D3D11_SRV_DIMENSION_TEXTURE3D = 8,
	D3D11_SRV_DIMENSION_TEXTURECUBE = 9,
	D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
	D3D11_SRV_DIMENSION_BUFFEREX = 11
}
alias int D3D11_SRV_DIMENSION;

enum {
	D3D11_DSV_DIMENSION_UNKNOWN = 0,
	D3D11_DSV_DIMENSION_TEXTURE1D = 1,
	D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2,
	D3D11_DSV_DIMENSION_TEXTURE2D = 3,
	D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4,
	D3D11_DSV_DIMENSION_TEXTURE2DMS = 5,
	D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
}
alias int D3D11_DSV_DIMENSION;

enum {
	D3D11_RTV_DIMENSION_UNKNOWN = 0,
	D3D11_RTV_DIMENSION_BUFFER = 1,
	D3D11_RTV_DIMENSION_TEXTURE1D = 2,
	D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3,
	D3D11_RTV_DIMENSION_TEXTURE2D = 4,
	D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5,
	D3D11_RTV_DIMENSION_TEXTURE2DMS = 6,
	D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
	D3D11_RTV_DIMENSION_TEXTURE3D = 8
}
alias int D3D11_RTV_DIMENSION;

enum {
	D3D11_UAV_DIMENSION_UNKNOWN = 0,
	D3D11_UAV_DIMENSION_BUFFER = 1,
	D3D11_UAV_DIMENSION_TEXTURE1D = 2,
	D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
	D3D11_UAV_DIMENSION_TEXTURE2D = 4,
	D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
	D3D11_UAV_DIMENSION_TEXTURE3D = 8
}
alias int D3D11_UAV_DIMENSION;

enum {
	D3D11_USAGE_DEFAULT = 0,
	D3D11_USAGE_IMMUTABLE = 1,
	D3D11_USAGE_DYNAMIC = 2,
	D3D11_USAGE_STAGING = 3
}
alias int D3D11_USAGE;

enum {
	D3D11_BIND_VERTEX_BUFFER = 0x1,
	D3D11_BIND_INDEX_BUFFER = 0x2,
	D3D11_BIND_CONSTANT_BUFFER = 0x4,
	D3D11_BIND_SHADER_RESOURCE = 0x8,
	D3D11_BIND_STREAM_OUTPUT = 0x10,
	D3D11_BIND_RENDER_TARGET = 0x20,
	D3D11_BIND_DEPTH_STENCIL = 0x40,
	D3D11_BIND_UNORDERED_ACCESS = 0x80,
}
alias int D3D11_BIND_FLAG;

enum {
	D3D11_CPU_ACCESS_WRITE = 0x10000,
	D3D11_CPU_ACCESS_READ = 0x20000,
}
alias int D3D11_CPU_ACCESS_FLAG;

enum {
	D3D11_RESOURCE_MISC_GENERATE_MIPS = 0x1,
	D3D11_RESOURCE_MISC_SHARED = 0x2,
	D3D11_RESOURCE_MISC_TEXTURECUBE = 0x4,
	D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x10,
	D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x20,
	D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 0x40,
	D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 0x80,
	D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x100,
	D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 0x200
}
alias int D3D11_RESOURCE_MISC_FLAG;

enum {
	D3D11_MAP_READ = 1,
	D3D11_MAP_WRITE = 2,
	D3D11_MAP_READ_WRITE = 3,
	D3D11_MAP_WRITE_DISCARD = 4,
	D3D11_MAP_WRITE_NO_OVERWRITE = 5
}
alias int D3D11_MAP;

enum {
	D3D11_MAP_FLAG_DO_NOT_WAIT = 0x100000L
}
alias int D3D11_MAP_FLAG;

enum {
	D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x1L
}
alias int D3D11_RAISE_FLAG;

enum {
	D3D11_CLEAR_DEPTH = 0x1,
	D3D11_CLEAR_STENCIL = 0x2
}
alias int D3D11_CLEAR_FLAG;

alias RECT D3D11_RECT;

struct D3D11_BOX {
	UINT left;
	UINT top;
	UINT front;
	UINT right;
	UINT bottom;
	UINT back;
}

//extern(C) const IID IID_ID3D11DeviceChild;
//MIDL_INTERFACE("1841e5c8-16b0-489b-bcc8-44cfb0d5deae")
interface ID3D11DeviceChild : IUnknown {
public extern(Windows):
	void GetDevice(ID3D11Device* ppDevice);
	HRESULT GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData);
	HRESULT SetPrivateData(REFGUID guid, UINT DataSize, const(void)* pData);
	HRESULT SetPrivateDataInterface(REFGUID guid, const IUnknown pData);
}

enum {
	D3D11_COMPARISON_NEVER = 1,
	D3D11_COMPARISON_LESS = 2,
	D3D11_COMPARISON_EQUAL = 3,
	D3D11_COMPARISON_LESS_EQUAL = 4,
	D3D11_COMPARISON_GREATER = 5,
	D3D11_COMPARISON_NOT_EQUAL = 6,
	D3D11_COMPARISON_GREATER_EQUAL = 7,
	D3D11_COMPARISON_ALWAYS = 8
}
alias int D3D11_COMPARISON_FUNC;

enum {
	D3D11_DEPTH_WRITE_MASK_ZERO = 0,
	D3D11_DEPTH_WRITE_MASK_ALL = 1
}
alias int D3D11_DEPTH_WRITE_MASK;

enum {
	D3D11_STENCIL_OP_KEEP = 1,
	D3D11_STENCIL_OP_ZERO = 2,
	D3D11_STENCIL_OP_REPLACE = 3,
	D3D11_STENCIL_OP_INCR_SAT = 4,
	D3D11_STENCIL_OP_DECR_SAT = 5,
	D3D11_STENCIL_OP_INVERT = 6,
	D3D11_STENCIL_OP_INCR = 7,
	D3D11_STENCIL_OP_DECR = 8
}
alias int D3D11_STENCIL_OP;

struct D3D11_DEPTH_STENCILOP_DESC {
	D3D11_STENCIL_OP StencilFailOp;
	D3D11_STENCIL_OP StencilDepthFailOp;
	D3D11_STENCIL_OP StencilPassOp;
	D3D11_COMPARISON_FUNC StencilFunc;
}

struct D3D11_DEPTH_STENCIL_DESC {
	BOOL DepthEnable;
	D3D11_DEPTH_WRITE_MASK DepthWriteMask;
	D3D11_COMPARISON_FUNC DepthFunc;
	BOOL StencilEnable;
	UINT8 StencilReadMask;
	UINT8 StencilWriteMask;
	D3D11_DEPTH_STENCILOP_DESC FrontFace;
	D3D11_DEPTH_STENCILOP_DESC BackFace;
}

//extern(C) const IID IID_ID3D11DepthStencilState;
//MIDL_INTERFACE("03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1")
interface ID3D11DepthStencilState : ID3D11DeviceChild {
public extern(Windows):
	void GetDesc(D3D11_DEPTH_STENCIL_DESC* pDesc);
}

enum {
	D3D11_BLEND_ZERO = 1,
	D3D11_BLEND_ONE = 2,
	D3D11_BLEND_SRC_COLOR = 3,
	D3D11_BLEND_INV_SRC_COLOR = 4,
	D3D11_BLEND_SRC_ALPHA = 5,
	D3D11_BLEND_INV_SRC_ALPHA = 6,
	D3D11_BLEND_DEST_ALPHA = 7,
	D3D11_BLEND_INV_DEST_ALPHA = 8,
	D3D11_BLEND_DEST_COLOR = 9,
	D3D11_BLEND_INV_DEST_COLOR = 10,
	D3D11_BLEND_SRC_ALPHA_SAT = 11,
	D3D11_BLEND_BLEND_FACTOR = 14,
	D3D11_BLEND_INV_BLEND_FACTOR = 15,
	D3D11_BLEND_SRC1_COLOR = 16,
	D3D11_BLEND_INV_SRC1_COLOR = 17,
	D3D11_BLEND_SRC1_ALPHA = 18,
	D3D11_BLEND_INV_SRC1_ALPHA = 19
}
alias int D3D11_BLEND;

enum {
	D3D11_BLEND_OP_ADD = 1,
	D3D11_BLEND_OP_SUBTRACT = 2,
	D3D11_BLEND_OP_REV_SUBTRACT = 3,
	D3D11_BLEND_OP_MIN = 4,
	D3D11_BLEND_OP_MAX = 5
}
alias int D3D11_BLEND_OP;

enum {
	D3D11_COLOR_WRITE_ENABLE_RED = 1,
	D3D11_COLOR_WRITE_ENABLE_GREEN = 2,
	D3D11_COLOR_WRITE_ENABLE_BLUE = 4,
	D3D11_COLOR_WRITE_ENABLE_ALPHA = 8,
	D3D11_COLOR_WRITE_ENABLE_ALL = D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN | D3D11_COLOR_WRITE_ENABLE_BLUE | D3D11_COLOR_WRITE_ENABLE_ALPHA,
}
alias int D3D11_COLOR_WRITE_ENABLE;

struct D3D11_RENDER_TARGET_BLEND_DESC {
	BOOL BlendEnable;
	D3D11_BLEND SrcBlend;
	D3D11_BLEND DestBlend;
	D3D11_BLEND_OP BlendOp;
	D3D11_BLEND SrcBlendAlpha;
	D3D11_BLEND DestBlendAlpha;
	D3D11_BLEND_OP BlendOpAlpha;
	UINT8 RenderTargetWriteMask;
}

struct D3D11_BLEND_DESC {
	BOOL AlphaToCoverageEnable;
	BOOL IndependentBlendEnable;
	D3D11_RENDER_TARGET_BLEND_DESC[8] RenderTarget;
}

//extern(C) const IID IID_ID3D11BlendState;
//MIDL_INTERFACE("75b68faa-347d-4159-8f45-a0640f01cd9a")
interface ID3D11BlendState : ID3D11DeviceChild {
public extern(Windows):
	void GetDesc(D3D11_BLEND_DESC* pDesc);
}

struct D3D11_RASTERIZER_DESC {
	D3D11_FILL_MODE FillMode;
	D3D11_CULL_MODE CullMode;
	BOOL FrontCounterClockwise;
	INT DepthBias;
	FLOAT DepthBiasClamp;
	FLOAT SlopeScaledDepthBias;
	BOOL DepthClipEnable;
	BOOL ScissorEnable;
	BOOL MultisampleEnable;
	BOOL AntialiasedLineEnable;
}
//extern(C) const IID IID_ID3D11RasterizerState;
//MIDL_INTERFACE("9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7")
interface ID3D11RasterizerState : ID3D11DeviceChild {
public extern(Windows):
	void GetDesc(D3D11_RASTERIZER_DESC* pDesc);
}


UINT D3D11CalcSubresource(UINT MipSlice, UINT ArraySlice, UINT MipLevels)
{
	return MipSlice + ArraySlice * MipLevels;
}

struct D3D11_SUBRESOURCE_DATA {
	const(void)* pSysMem;
	UINT SysMemPitch;
	UINT SysMemSlicePitch;
}

struct D3D11_MAPPED_SUBRESOURCE {
	void* pData;
	UINT RowPitch;
	UINT DepthPitch;
}

//extern(C) const IID IID_ID3D11Resource;
//MIDL_INTERFACE("dc8e63f3-d12b-4952-b47b-5e45026a862d")
interface ID3D11Resource : ID3D11DeviceChild {
public extern(Windows):
	void GetType(D3D11_RESOURCE_DIMENSION* pResourceDimension);
	void SetEvictionPriority(UINT EvictionPriority);
	UINT GetEvictionPriority();
}

struct D3D11_BUFFER_DESC {
	UINT ByteWidth;
	D3D11_USAGE Usage;
	UINT BindFlags;
	UINT CPUAccessFlags;
	UINT MiscFlags;
	UINT StructureByteStride;
}

//extern(C) const IID IID_ID3D11Buffer;
//MIDL_INTERFACE("48570b85-d1ee-4fcd-a250-eb350722b037")
interface ID3D11Buffer : ID3D11Resource {
public extern(Windows):
	void GetDesc(D3D11_BUFFER_DESC* pDesc);
}

struct D3D11_TEXTURE1D_DESC {
	UINT Width;
	UINT MipLevels;
	UINT ArraySize;
	DXGI_FORMAT Format;
	D3D11_USAGE Usage;
	UINT BindFlags;
	UINT CPUAccessFlags;
	UINT MiscFlags;
}

//extern(C) const IID IID_ID3D11Texture1D;
//MIDL_INTERFACE("f8fb5c27-c6b3-4f75-a4c8-439af2ef564c")
interface ID3D11Texture1D : ID3D11Resource {
public extern(Windows):
	void GetDesc(D3D11_TEXTURE1D_DESC* pDesc);
}

struct D3D11_TEXTURE2D_DESC {
	UINT Width;
	UINT Height;
	UINT MipLevels;
	UINT ArraySize;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
	D3D11_USAGE Usage;
	UINT BindFlags;
	UINT CPUAccessFlags;
	UINT MiscFlags;
}

//extern(C) const IID IID_ID3D11Texture2D;
//MIDL_INTERFACE("6f15aaf2-d208-4e89-9ab4-489535d34f9c")
interface ID3D11Texture2D : ID3D11Resource {
public extern(Windows):
	void GetDesc(D3D11_TEXTURE2D_DESC* pDesc);
}

struct D3D11_TEXTURE3D_DESC {
	UINT Width;
	UINT Height;
	UINT Depth;
	UINT MipLevels;
	DXGI_FORMAT Format;
	D3D11_USAGE Usage;
	UINT BindFlags;
	UINT CPUAccessFlags;
	UINT MiscFlags;
}

//extern(C) const IID IID_ID3D11Texture3D;
//MIDL_INTERFACE("037e866e-f56d-4357-a8af-9dabbe6e250e")
interface ID3D11Texture3D : ID3D11Resource {
public extern(Windows):
	void GetDesc(D3D11_TEXTURE3D_DESC* pDesc);
}

enum {
	D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0,
	D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1,
	D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2,
	D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
	D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4,
	D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5
}
alias int D3D11_TEXTURECUBE_FACE;

//extern(C) const IID IID_ID3D11View;
//MIDL_INTERFACE("839d1216-bb2e-412b-b7f4-a9dbebe08ed1")
interface ID3D11View : ID3D11DeviceChild {
public extern(Windows):
	void GetResource(ID3D11Resource* ppResource);
}

struct D3D11_BUFFER_SRV {
	union {
		UINT FirstElement;
		UINT ElementOffset;
	}
	union {
		UINT NumElements;
		UINT ElementWidth;
	}
}

enum {
	D3D11_BUFFEREX_SRV_FLAG_RAW	= 0x1
}
alias int D3D11_BUFFEREX_SRV_FLAG;

struct D3D11_BUFFEREX_SRV {
	UINT FirstElement;
	UINT NumElements;
	UINT Flags;
}

struct D3D11_TEX1D_SRV {
	UINT MostDetailedMip;
	UINT MipLevels;
}

struct D3D11_TEX1D_ARRAY_SRV  {
	UINT MostDetailedMip;
	UINT MipLevels;
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D11_TEX2D_SRV {
	UINT MostDetailedMip;
	UINT MipLevels;
}

struct D3D11_TEX2D_ARRAY_SRV {
	UINT MostDetailedMip;
	UINT MipLevels;
	UINT FirstArraySlice;
	UINT ArraySize;
} 

struct D3D11_TEX3D_SRV {
	UINT MostDetailedMip;
	UINT MipLevels;
}

struct D3D11_TEXCUBE_SRV {
	UINT MostDetailedMip;
	UINT MipLevels;
}

struct D3D11_TEXCUBE_ARRAY_SRV {
	UINT MostDetailedMip;
	UINT MipLevels;
	UINT First2DArrayFace;
	UINT NumCubes;
}

struct D3D11_TEX2DMS_SRV {
	UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_ARRAY_SRV {
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D11_SHADER_RESOURCE_VIEW_DESC {
	DXGI_FORMAT Format;
	D3D11_SRV_DIMENSION ViewDimension;
	union {
		D3D11_BUFFER_SRV Buffer;
		D3D11_TEX1D_SRV Texture1D;
		D3D11_TEX1D_ARRAY_SRV Texture1DArray;
		D3D11_TEX2D_SRV Texture2D;
		D3D11_TEX2D_ARRAY_SRV Texture2DArray;
		D3D11_TEX2DMS_SRV Texture2DMS;
		D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
		D3D11_TEX3D_SRV Texture3D;
		D3D11_TEXCUBE_SRV TextureCube;
		D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
		D3D11_BUFFEREX_SRV BufferEx;
	}
}

//extern(C) const IID IID_ID3D11ShaderResourceView;
//MIDL_INTERFACE("b0e06fe0-8192-4e1a-b1ca-36d7414710b2")
interface ID3D11ShaderResourceView : ID3D11View {
public extern(Windows):
	void GetDesc(D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc);
}

struct D3D11_BUFFER_RTV {
	union {
		UINT FirstElement;
		UINT ElementOffset;
	}
	union {
		UINT NumElements;
		UINT ElementWidth;
	}
}

struct D3D11_TEX1D_RTV {
	UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_RTV {
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D11_TEX2D_RTV {
	UINT MipSlice;
}

struct D3D11_TEX2DMS_RTV {
	UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2D_ARRAY_RTV {
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D11_TEX2DMS_ARRAY_RTV {
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D11_TEX3D_RTV {
	UINT MipSlice;
	UINT FirstWSlice;
	UINT WSize;
}

struct D3D11_RENDER_TARGET_VIEW_DESC {
	DXGI_FORMAT Format;
	D3D11_RTV_DIMENSION ViewDimension;
	union {
		D3D11_BUFFER_RTV Buffer;
		D3D11_TEX1D_RTV Texture1D;
		D3D11_TEX1D_ARRAY_RTV Texture1DArray;
		D3D11_TEX2D_RTV Texture2D;
		D3D11_TEX2D_ARRAY_RTV Texture2DArray;
		D3D11_TEX2DMS_RTV Texture2DMS;
		D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
		D3D11_TEX3D_RTV Texture3D;
	}
}

//extern(C) const IID IID_ID3D11RenderTargetView;
//MIDL_INTERFACE("dfdba067-0b8d-4865-875b-d7b4516cc164")
interface ID3D11RenderTargetView : ID3D11View {
public extern(Windows):
	void GetDesc(D3D11_RENDER_TARGET_VIEW_DESC* pDesc);
}

struct D3D11_TEX1D_DSV {
	UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_DSV {
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D11_TEX2D_DSV {
	UINT MipSlice;
}

struct D3D11_TEX2D_ARRAY_DSV {
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D11_TEX2DMS_DSV {
	UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_ARRAY_DSV {
	UINT FirstArraySlice;
	UINT ArraySize;
}


enum {
	D3D11_DSV_READ_ONLY_DEPTH   = 0x1,
	D3D11_DSV_READ_ONLY_STENCIL = 0x2
}
alias int D3D11_DSV_FLAG;

struct D3D11_DEPTH_STENCIL_VIEW_DESC {
	DXGI_FORMAT Format;
	D3D11_DSV_DIMENSION ViewDimension;
	UINT Flags;
	union {
		D3D11_TEX1D_DSV Texture1D;
		D3D11_TEX1D_ARRAY_DSV Texture1DArray;
		D3D11_TEX2D_DSV Texture2D;
		D3D11_TEX2D_ARRAY_DSV Texture2DArray;
		D3D11_TEX2DMS_DSV Texture2DMS;
		D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
	}
}

//extern(C) const IID IID_ID3D11DepthStencilView;
//MIDL_INTERFACE("9fdac92a-1876-48c3-afad-25b94f84a9b6")
interface ID3D11DepthStencilView : ID3D11View {
public extern(Windows):
	void GetDesc(D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc);
}

enum {
	D3D11_BUFFER_UAV_FLAG_RAW     = 0x1,
	D3D11_BUFFER_UAV_FLAG_APPEND  = 0x2,
	D3D11_BUFFER_UAV_FLAG_COUNTER = 0x4
}
alias int D3D11_BUFFER_UAV_FLAG;

struct D3D11_BUFFER_UAV {
	UINT FirstElement;
	UINT NumElements;
	UINT Flags;
}

struct D3D11_TEX1D_UAV {
	UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_UAV {
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D11_TEX2D_UAV {
	UINT MipSlice;
}

struct D3D11_TEX2D_ARRAY_UAV {
	UINT MipSlice;
	UINT FirstArraySlice;
	UINT ArraySize;
}

struct D3D11_TEX3D_UAV {
	UINT MipSlice;
	UINT FirstWSlice;
	UINT WSize;
}

struct D3D11_UNORDERED_ACCESS_VIEW_DESC {
	DXGI_FORMAT Format;
	D3D11_UAV_DIMENSION ViewDimension;
	union {
		D3D11_BUFFER_UAV Buffer;
		D3D11_TEX1D_UAV Texture1D;
		D3D11_TEX1D_ARRAY_UAV Texture1DArray;
		D3D11_TEX2D_UAV Texture2D;
		D3D11_TEX2D_ARRAY_UAV Texture2DArray;
		D3D11_TEX3D_UAV Texture3D;
	}
}

//extern(C) const IID IID_ID3D11UnorderedAccessView;
//MIDL_INTERFACE("28acf509-7f5c-48f6-8611-f316010a6380")
interface ID3D11UnorderedAccessView : ID3D11View {
public extern(Windows):
	void GetDesc(D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc);
}

//extern(C) const IID IID_ID3D11VertexShader;
//MIDL_INTERFACE("3b301d64-d678-4289-8897-22f8928b72f3")
interface ID3D11VertexShader : ID3D11DeviceChild {
public extern(Windows):
}

//extern(C) const IID IID_ID3D11HullShader;
//MIDL_INTERFACE("8e5c6061-628a-4c8e-8264-bbe45cb3d5dd")
interface ID3D11HullShader : ID3D11DeviceChild {
public extern(Windows):
}

//extern(C) const IID IID_ID3D11DomainShader;
//MIDL_INTERFACE("f582c508-0f36-490c-9977-31eece268cfa")
interface ID3D11DomainShader : ID3D11DeviceChild {
public extern(Windows):
}

//extern(C) const IID IID_ID3D11GeometryShader;
//MIDL_INTERFACE("38325b96-effb-4022-ba02-2e795b70275c")
interface ID3D11GeometryShader : ID3D11DeviceChild {
public extern(Windows):
}

//extern(C) const IID IID_ID3D11PixelShader;
//MIDL_INTERFACE("ea82e40d-51dc-4f33-93d4-db7c9125ae8c")
interface ID3D11PixelShader : ID3D11DeviceChild {
public extern(Windows):
}

//extern(C) const IID IID_ID3D11ComputeShader;
//MIDL_INTERFACE("4f5b196e-c2bd-495e-bd01-1fded38e4969")
interface ID3D11ComputeShader : ID3D11DeviceChild {
public extern(Windows):
}

//extern(C) const IID IID_ID3D11InputLayout;
//MIDL_INTERFACE("e4819ddc-4cf0-4025-bd26-5de82a3e07b7")
interface ID3D11InputLayout : ID3D11DeviceChild {
public extern(Windows):
}

enum {
	D3D11_FILTER_MIN_MAG_MIP_POINT = 0,
	D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
	D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
	D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
	D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
	D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
	D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
	D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
	D3D11_FILTER_ANISOTROPIC = 0x55,
	D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
	D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
	D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
	D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
	D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
	D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
	D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
	D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
	D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xd5
}
alias int D3D11_FILTER;

enum {
	D3D11_FILTER_TYPE_POINT = 0,
	D3D11_FILTER_TYPE_LINEAR = 1
}
alias int D3D11_FILTER_TYPE;

enum {
	D3D11_FILTER_TYPE_MASK = 0x3,
	D3D11_MIN_FILTER_SHIFT = 4,
	D3D11_MAG_FILTER_SHIFT = 2,
	D3D11_MIP_FILTER_SHIFT = 0,
	D3D11_COMPARISON_FILTERING_BIT = 0x80,
	D3D11_ANISOTROPIC_FILTERING_BIT = 0x40
}

/*template
D3D11_ENCODE_BASIC_FILTER( min, mag, mip, bComparison )
{
	return  ( ( D3D11_FILTER ) (  ( ( bComparison ) ? D3D11_COMPARISON_FILTERING_BIT : 0 ) |  ( ( ( min ) & D3D11_FILTER_TYPE_MASK ) << D3D11_MIN_FILTER_SHIFT ) |  ( ( ( mag ) & D3D11_FILTER_TYPE_MASK ) << D3D11_MAG_FILTER_SHIFT ) |  ( ( ( mip ) & D3D11_FILTER_TYPE_MASK ) << D3D11_MIP_FILTER_SHIFT ) ) )
}

D3D11_ENCODE_ANISOTROPIC_FILTER( bComparison )
{
	return  ( ( D3D11_FILTER ) (  D3D11_ANISOTROPIC_FILTERING_BIT |  D3D11_ENCODE_BASIC_FILTER( D3D11_FILTER_TYPE_LINEAR,  D3D11_FILTER_TYPE_LINEAR,  D3D11_FILTER_TYPE_LINEAR,  bComparison ) ) )
}

D3D11_DECODE_MIN_FILTER( d3d11Filter )
{
	return  ( ( D3D11_FILTER_TYPE )  ( ( ( d3d11Filter ) >> D3D11_MIN_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK ) )
}

D3D11_DECODE_MAG_FILTER( d3d11Filter )
{
	return  ( ( D3D11_FILTER_TYPE )  ( ( ( d3d11Filter ) >> D3D11_MAG_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK ) )
}
	
D3D11_DECODE_MIP_FILTER( d3d11Filter )
	{
		return  ( ( D3D11_FILTER_TYPE )  ( ( ( d3d11Filter ) >> D3D11_MIP_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK ) )
}

D3D11_DECODE_IS_COMPARISON_FILTER( d3d11Filter )
{
	enum =  ( ( d3d11Filter ) & D3D11_COMPARISON_FILTERING_BIT )
}

D3D11_DECODE_IS_ANISOTROPIC_FILTER( d3d11Filter )
{
	enum =  ( ( ( d3d11Filter ) & D3D11_ANISOTROPIC_FILTERING_BIT ) &&  ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MIN_FILTER( d3d11Filter ) ) &&  ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MAG_FILTER( d3d11Filter ) ) &&  ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MIP_FILTER( d3d11Filter ) ) )
}*/

enum {
	D3D11_TEXTURE_ADDRESS_WRAP = 1,
	D3D11_TEXTURE_ADDRESS_MIRROR = 2,
	D3D11_TEXTURE_ADDRESS_CLAMP = 3,
	D3D11_TEXTURE_ADDRESS_BORDER = 4,
	D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5
}
alias int D3D11_TEXTURE_ADDRESS_MODE;

struct D3D11_SAMPLER_DESC {
	D3D11_FILTER Filter;
	D3D11_TEXTURE_ADDRESS_MODE AddressU;
	D3D11_TEXTURE_ADDRESS_MODE AddressV;
	D3D11_TEXTURE_ADDRESS_MODE AddressW;
	FLOAT MipLODBias;
	UINT MaxAnisotropy;
	D3D11_COMPARISON_FUNC ComparisonFunc;
	FLOAT[4] BorderColor;
	FLOAT MinLOD;
	FLOAT MaxLOD;
}

//extern(C) const IID IID_ID3D11SamplerState;
//MIDL_INTERFACE("da6fea51-564c-4487-9810-f0d0f9b4e3a5")
interface ID3D11SamplerState : ID3D11DeviceChild {
public extern(Windows):
	void GetDesc(D3D11_SAMPLER_DESC* pDesc);
}

enum {
	D3D11_FORMAT_SUPPORT_BUFFER = 0x1,
	D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 0x2,
	D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = 0x4,
	D3D11_FORMAT_SUPPORT_SO_BUFFER = 0x8,
	D3D11_FORMAT_SUPPORT_TEXTURE1D = 0x10,
	D3D11_FORMAT_SUPPORT_TEXTURE2D = 0x20,
	D3D11_FORMAT_SUPPORT_TEXTURE3D = 0x40,
	D3D11_FORMAT_SUPPORT_TEXTURECUBE = 0x80,
	D3D11_FORMAT_SUPPORT_SHADER_LOAD = 0x100,
	D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = 0x200,
	D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 0x400,
	D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 0x800,
	D3D11_FORMAT_SUPPORT_MIP = 0x1000,
	D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = 0x2000,
	D3D11_FORMAT_SUPPORT_RENDER_TARGET = 0x4000,
	D3D11_FORMAT_SUPPORT_BLENDABLE = 0x8000,
	D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = 0x10000,
	D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = 0x20000,
	D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 0x40000,
	D3D11_FORMAT_SUPPORT_DISPLAY = 0x80000,
	D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 0x100000,
	D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 0x200000,
	D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 0x400000,
	D3D11_FORMAT_SUPPORT_SHADER_GATHER = 0x800000,
	D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = 0x1000000,
	D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
	D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 0x4000000
}
alias int D3D11_FORMAT_SUPPORT;

enum {
	D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 0x1,
	D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 0x2,
	D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
	D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 0x8,
	D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
	D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
	D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 0x40,
	D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = 0x80
}
alias int D3D11_FORMAT_SUPPORT2;

//extern(C) const IID IID_ID3D11Asynchronous;
//MIDL_INTERFACE("4b35d0cd-1e15-4258-9c98-1b1333f6dd3b")
interface ID3D11Asynchronous : ID3D11DeviceChild {
public extern(Windows):
	UINT GetDataSize();
}

enum {
	D3D11_ASYNC_GETDATA_DONOTFLUSH = 0x1
}
alias int D3D11_ASYNC_GETDATA_FLAG;

enum {
	D3D11_QUERY_EVENT = 0,
	D3D11_QUERY_OCCLUSION,
	D3D11_QUERY_TIMESTAMP,
	D3D11_QUERY_TIMESTAMP_DISJOINT,
	D3D11_QUERY_PIPELINE_STATISTICS,
	D3D11_QUERY_OCCLUSION_PREDICATE,
	D3D11_QUERY_SO_STATISTICS,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE,
	D3D11_QUERY_SO_STATISTICS_STREAM0,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0,
	D3D11_QUERY_SO_STATISTICS_STREAM1,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1,
	D3D11_QUERY_SO_STATISTICS_STREAM2,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2,
	D3D11_QUERY_SO_STATISTICS_STREAM3,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3
}
alias int D3D11_QUERY;

enum {
	D3D11_QUERY_MISC_PREDICATEHINT	= 0x1
}
alias int D3D11_QUERY_MISC_FLAG;

struct D3D11_QUERY_DESC {
	D3D11_QUERY Query;
	UINT MiscFlags;
}

//extern(C) const IID IID_ID3D11Query;
//MIDL_INTERFACE("d6c00747-87b7-425e-b84d-44d108560afd")
interface ID3D11Query : ID3D11Asynchronous {
public extern(Windows):
	void GetDesc(D3D11_QUERY_DESC* pDesc);
}

//extern(C) const IID IID_ID3D11Predicate;
//MIDL_INTERFACE("9eb576dd-9f77-4d86-81aa-8bab5fe490e2")
interface ID3D11Predicate : ID3D11Query {
public extern(Windows):
}

struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT {
	UINT64 Frequency;
	BOOL Disjoint;
}

struct D3D11_QUERY_DATA_PIPELINE_STATISTICS {
	UINT64 IAVertices;
	UINT64 IAPrimitives;
	UINT64 VSInvocations;
	UINT64 GSInvocations;
	UINT64 GSPrimitives;
	UINT64 CInvocations;
	UINT64 CPrimitives;
	UINT64 PSInvocations;
	UINT64 HSInvocations;
	UINT64 DSInvocations;
	UINT64 CSInvocations;
}

struct D3D11_QUERY_DATA_SO_STATISTICS {
	UINT64 NumPrimitivesWritten;
	UINT64 PrimitivesStorageNeeded;
}

enum {
	D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000
}
alias int D3D11_COUNTER;

enum {
	D3D11_COUNTER_TYPE_FLOAT32 = 0,
	D3D11_COUNTER_TYPE_UINT16,
	D3D11_COUNTER_TYPE_UINT32,
	D3D11_COUNTER_TYPE_UINT64
}
alias int D3D11_COUNTER_TYPE;

struct D3D11_COUNTER_DESC {
	D3D11_COUNTER Counter;
	UINT MiscFlags;
}

struct D3D11_COUNTER_INFO {
	D3D11_COUNTER LastDeviceDependentCounter;
	UINT NumSimultaneousCounters;
	UINT8 NumDetectableParallelUnits;
}

//extern(C) const IID IID_ID3D11Counter;
//MIDL_INTERFACE("6e8c49fb-a371-4770-b440-29086022b741")
interface ID3D11Counter : ID3D11Asynchronous {
public extern(Windows):
	void GetDesc(D3D11_COUNTER_DESC* pDesc);
}

enum {
	D3D11_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
	D3D11_CENTER_MULTISAMPLE_PATTERN   = 0xfffffffe
}
alias int D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS;

enum {
	D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
	D3D11_DEVICE_CONTEXT_DEFERRED,
}
alias int D3D11_DEVICE_CONTEXT_TYPE;

struct D3D11_CLASS_INSTANCE_DESC {
	UINT InstanceId;
	UINT InstanceIndex;
	UINT TypeId;
	UINT ConstantBuffer;
	UINT BaseConstantBufferOffset;
	UINT BaseTexture;
	UINT BaseSampler;
	BOOL Created;
}

//extern(C) const IID IID_ID3D11ClassInstance;
//MIDL_INTERFACE("a6cd7faa-b0b7-4a2f-9436-8662a65797cb")
interface ID3D11ClassInstance : ID3D11DeviceChild {
public extern(Windows):
	void GetClassLinkage(ID3D11ClassLinkage* ppLinkage);
	void GetDesc(D3D11_CLASS_INSTANCE_DESC* pDesc);
	void GetInstanceName(LPSTR pInstanceName, SIZE_T* pBufferLength) ;
	void GetTypeName( LPSTR pTypeName, SIZE_T* pBufferLength);
}

//extern(C) const IID IID_ID3D11ClassLinkage;
//MIDL_INTERFACE("ddf57cba-9543-46e4-a12b-f207a0fe7fed")
interface ID3D11ClassLinkage : ID3D11DeviceChild {
public extern(Windows):
	HRESULT GetClassInstance(LPCSTR pClassInstanceName, UINT InstanceIndex, ID3D11ClassInstance* ppInstance);
	HRESULT CreateClassInstance(LPCSTR pClassTypeName, UINT ConstantBufferOffset, UINT ConstantVectorOffset, UINT TextureOffset, UINT SamplerOffset, ID3D11ClassInstance* ppInstance);
}

//extern(C) const IID IID_ID3D11CommandList;
//MIDL_INTERFACE("a24bc4d1-769e-43f7-8013-98ff566c18e2")
interface ID3D11CommandList : ID3D11DeviceChild {
public extern(Windows):
	UINT GetContextFlags();
}

enum {
	D3D11_FEATURE_THREADING = 0,
	D3D11_FEATURE_DOUBLES,
	D3D11_FEATURE_FORMAT_SUPPORT,
	D3D11_FEATURE_FORMAT_SUPPORT2,
	D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS,
}
alias int D3D11_FEATURE;

struct D3D11_FEATURE_DATA_THREADING {
	BOOL DriverConcurrentCreates;
	BOOL DriverCommandLists;
}

struct D3D11_FEATURE_DATA_DOUBLES {
	BOOL DoublePrecisionFloatShaderOps;
}

struct D3D11_FEATURE_DATA_FORMAT_SUPPORT {
	DXGI_FORMAT InFormat;
	UINT OutFormatSupport;
}

struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2 {
	DXGI_FORMAT InFormat;
	UINT OutFormatSupport2;
}

struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS {
	BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
}

//extern(C) const IID IID_ID3D11DeviceContext;
//MIDL_INTERFACE("c0bfa96c-e089-44fb-8eaf-26f8796190da")
interface ID3D11DeviceContext : ID3D11DeviceChild {
public extern(Windows):
	void VSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, const ID3D11Buffer* ppConstantBuffers);
	void PSSetShaderResources(UINT StartSlot, UINT NumViews, const ID3D11ShaderResourceView* ppShaderResourceViews);
	void PSSetShader(ID3D11PixelShader pPixelShader, const ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
	void PSSetSamplers(UINT StartSlot, UINT NumSamplers, const ID3D11SamplerState* ppSamplers);
	void VSSetShader(ID3D11VertexShader pVertexShader, const ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
	void DrawIndexed(UINT IndexCount, UINT StartIndexLocation, INT BaseVertexLocation);
	void Draw(UINT VertexCount, UINT StartVertexLocation);
	HRESULT Map(ID3D11Resource pResource, UINT Subresource, D3D11_MAP MapType, UINT MapFlags, D3D11_MAPPED_SUBRESOURCE pMappedResource);
	void Unmap(ID3D11Resource pResource, UINT Subresource);
	void PSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, const ID3D11Buffer* ppConstantBuffers);
	void IASetInputLayout(ID3D11InputLayout pInputLayout);
	void IASetVertexBuffers(UINT StartSlot, UINT NumBuffers, const ID3D11Buffer* ppVertexBuffers, const(UINT)* pStrides, const(UINT)* pOffsets);
	void IASetIndexBuffer(ID3D11Buffer pIndexBuffer, DXGI_FORMAT Format, UINT Offset);
	void DrawIndexedInstanced(UINT IndexCountPerInstance, UINT InstanceCount, UINT StartIndexLocation, INT BaseVertexLocation, UINT StartInstanceLocation);
	void DrawInstanced(UINT VertexCountPerInstance, UINT InstanceCount, UINT StartVertexLocation, UINT StartInstanceLocation);
	void GSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, const ID3D11Buffer* ppConstantBuffers);
	void GSSetShader(ID3D11GeometryShader pShader, const ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
	void IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY Topology);
	void VSSetShaderResources(UINT StartSlot, UINT NumViews, const ID3D11ShaderResourceView* ppShaderResourceViews);
	void VSSetSamplers(UINT StartSlot, UINT NumSamplers, const ID3D11SamplerState* ppSamplers);
	void Begin(ID3D11Asynchronous pAsync);
	void End(ID3D11Asynchronous pAsync);
	HRESULT GetData(ID3D11Asynchronous pAsync, void* pData, UINT DataSize, UINT GetDataFlags);
	void SetPredication(ID3D11Predicate pPredicate, BOOL PredicateValue);
	void GSSetShaderResources(UINT StartSlot, UINT NumViews, const ID3D11ShaderResourceView* ppShaderResourceViews);
	void GSSetSamplers(UINT StartSlot, UINT NumSamplers, const ID3D11SamplerState *ppSamplers);
	void OMSetRenderTargets(UINT NumViews, const ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView pDepthStencilView);
	void OMSetRenderTargetsAndUnorderedAccessViews(UINT NumRTVs, const ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView pDepthStencilView, UINT UAVStartSlot, UINT NumUAVs, const ID3D11UnorderedAccessView* ppUnorderedAccessViews, const(UINT)* pUAVInitialCounts);
	void OMSetBlendState(ID3D11BlendState pBlendState, const(FLOAT)* BlendFactor, UINT SampleMask);
	void OMSetDepthStencilState(ID3D11DepthStencilState pDepthStencilState, UINT StencilRef);
	void SOSetTargets(UINT NumBuffers, const ID3D11Buffer* ppSOTargets, const(UINT)* pOffsets);
	void DrawAuto();
	void DrawIndexedInstancedIndirect(ID3D11Buffer pBufferForArgs, UINT AlignedByteOffsetForArgs);
	void DrawInstancedIndirect(ID3D11Buffer pBufferForArgs, UINT AlignedByteOffsetForArgs);
	void Dispatch(UINT ThreadGroupCountX, UINT ThreadGroupCountY, UINT ThreadGroupCountZ);
	void DispatchIndirect(ID3D11Buffer pBufferForArgs, UINT AlignedByteOffsetForArgs);
	void RSSetState(ID3D11RasterizerState pRasterizerState);
	void RSSetViewports(UINT NumViewports, const(D3D11_VIEWPORT)* pViewports);
	void RSSetScissorRects(UINT NumRects, const(D3D11_RECT)* pRects);
	void CopySubresourceRegion(ID3D11Resource pDstResource, UINT DstSubresource, UINT DstX, UINT DstY, UINT DstZ, ID3D11Resource pSrcResource, UINT SrcSubresource, const(D3D11_BOX)* pSrcBox);
	void CopyResource(ID3D11Resource pDstResource, ID3D11Resource pSrcResource);
	void UpdateSubresource(ID3D11Resource pDstResource, UINT DstSubresource, const(D3D11_BOX)* pDstBox, const(void)* pSrcData, UINT SrcRowPitch, UINT SrcDepthPitch);
	void CopyStructureCount(ID3D11Buffer pDstBuffer, UINT DstAlignedByteOffset, ID3D11UnorderedAccessView pSrcView);
	void ClearRenderTargetView(ID3D11RenderTargetView pRenderTargetView, const(FLOAT)* ColorRGBA);
	void ClearUnorderedAccessViewUint(ID3D11UnorderedAccessView pUnorderedAccessView, const(UINT)* Values);
	void ClearUnorderedAccessViewFloat(ID3D11UnorderedAccessView pUnorderedAccessView, const(FLOAT)* Values);
	void ClearDepthStencilView(ID3D11DepthStencilView pDepthStencilView, UINT ClearFlags, FLOAT Depth, UINT8 Stencil);
	void GenerateMips(ID3D11ShaderResourceView pShaderResourceView);
	void SetResourceMinLOD(ID3D11Resource pResource, FLOAT MinLOD);
	FLOAT GetResourceMinLOD(ID3D11Resource pResource);
	void ResolveSubresource(ID3D11Resource pDstResource, UINT DstSubresource, ID3D11Resource pSrcResource, UINT SrcSubresource, DXGI_FORMAT Format);
	void ExecuteCommandList(ID3D11CommandList pCommandList, BOOL RestoreContextState);
	void HSSetShaderResources(UINT StartSlot, UINT NumViews, const ID3D11ShaderResourceView* ppShaderResourceViews);
	void HSSetShader(ID3D11HullShader pHullShader, const ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
	void HSSetSamplers(UINT StartSlot, UINT NumSamplers, const ID3D11SamplerState* ppSamplers);
	void HSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, const ID3D11Buffer* ppConstantBuffers);
	void DSSetShaderResources(UINT StartSlot, UINT NumViews, const ID3D11ShaderResourceView* ppShaderResourceViews);
	void DSSetShader(ID3D11DomainShader pDomainShader, const ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
	void DSSetSamplers(UINT StartSlot, UINT NumSamplers, const ID3D11SamplerState* ppSamplers);
	void DSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, const ID3D11Buffer* ppConstantBuffers);
	void CSSetShaderResources(UINT StartSlot, UINT NumViews, const ID3D11ShaderResourceView* ppShaderResourceViews);
	void CSSetUnorderedAccessViews(UINT StartSlot, UINT NumUAVs, const ID3D11UnorderedAccessView* ppUnorderedAccessViews, const(UINT)* pUAVInitialCounts);
	void CSSetShader(ID3D11ComputeShader pComputeShader, const ID3D11ClassInstance* ppClassInstances, UINT NumClassInstances);
	void CSSetSamplers(UINT StartSlot, UINT NumSamplers, const ID3D11SamplerState* ppSamplers);
	void CSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, const ID3D11Buffer* ppConstantBuffers);
	void VSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void PSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void PSGetShader(ID3D11PixelShader* ppPixelShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
	void PSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
	void VSGetShader(ID3D11VertexShader* ppVertexShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
	void PSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void IAGetInputLayout(ID3D11InputLayout* ppInputLayout);
	void IAGetVertexBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppVertexBuffers, UINT* pStrides, UINT* pOffsets);
	void IAGetIndexBuffer(ID3D11Buffer* pIndexBuffer, DXGI_FORMAT* Format, UINT* Offset);
	void GSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void GSGetShader(ID3D11GeometryShader* ppGeometryShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
	void IAGetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY* pTopology);
	void VSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void VSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
	void GetPredication(ID3D11Predicate* ppPredicate, BOOL* pPredicateValue);
	void GSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void GSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
	void OMGetRenderTargets(UINT NumViews, ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView* ppDepthStencilView);
	void OMGetRenderTargetsAndUnorderedAccessViews(UINT NumRTVs, ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView* ppDepthStencilView, UINT UAVStartSlot, UINT NumUAVs, ID3D11UnorderedAccessView* ppUnorderedAccessViews);
	void OMGetBlendState(ID3D11BlendState* ppBlendState, FLOAT* BlendFactor, UINT* pSampleMask);
	void OMGetDepthStencilState(ID3D11DepthStencilState* ppDepthStencilState, UINT* pStencilRef);
	void SOGetTargets(UINT NumBuffers, ID3D11Buffer* ppSOTargets);
	void RSGetState(ID3D11RasterizerState* ppRasterizerState);
	void RSGetViewports(UINT* pNumViewports, D3D11_VIEWPORT* pViewports);
	void RSGetScissorRects(UINT* pNumRects, D3D11_RECT* pRects);
	void HSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void HSGetShader(ID3D11HullShader* ppHullShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
	void HSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
	void HSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void DSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void DSGetShader(ID3D11DomainShader* ppDomainShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
	void DSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
	void DSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void CSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void CSGetUnorderedAccessViews(UINT StartSlot, UINT NumUAVs, ID3D11UnorderedAccessView* ppUnorderedAccessViews);
	void CSGetShader(ID3D11ComputeShader* ppComputeShader, ID3D11ClassInstance* ppClassInstances, UINT* pNumClassInstances);
	void CSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState* ppSamplers);
	void CSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void ClearState();
	void Flush();
	D3D11_DEVICE_CONTEXT_TYPE GetType();
	UINT GetContextFlags();
	HRESULT FinishCommandList(BOOL RestoreDeferredContextState, ID3D11CommandList* ppCommandList);
}

//extern(C) const IID IID_ID3D11Device;
//MIDL_INTERFACE("db6f6ddb-ac77-4e88-8253-819df9bbf140")
interface ID3D11Device : IUnknown {
public extern(Windows):
	HRESULT CreateBuffer(const(D3D11_BUFFER_DESC)* pDesc, const(D3D11_SUBRESOURCE_DATA)* pInitialData, ID3D11Buffer* ppBuffer);
	HRESULT CreateTexture1D(const(D3D11_TEXTURE1D_DESC)* pDesc, const(D3D11_SUBRESOURCE_DATA)* pInitialData, ID3D11Texture1D* ppTexture1D);
	HRESULT CreateTexture2D(const(D3D11_TEXTURE2D_DESC)* pDesc, const(D3D11_SUBRESOURCE_DATA)* pInitialData, ID3D11Texture2D* ppTexture2D);
	HRESULT CreateTexture3D(const(D3D11_TEXTURE3D_DESC)* pDesc, const(D3D11_SUBRESOURCE_DATA)* pInitialData, ID3D11Texture3D* ppTexture3D);
	HRESULT CreateShaderResourceView(ID3D11Resource pResource, const(D3D11_SHADER_RESOURCE_VIEW_DESC)* pDesc, ID3D11ShaderResourceView* ppSRView);
	HRESULT CreateUnorderedAccessView(ID3D11Resource pResource, const(D3D11_UNORDERED_ACCESS_VIEW_DESC)* pDesc, ID3D11UnorderedAccessView* ppUAView);
	HRESULT CreateRenderTargetView(ID3D11Resource pResource, const(D3D11_RENDER_TARGET_VIEW_DESC)* pDesc, ID3D11RenderTargetView* ppRTView);
	HRESULT CreateDepthStencilView(ID3D11Resource pResource, const(D3D11_DEPTH_STENCIL_VIEW_DESC)* pDesc, ID3D11DepthStencilView* ppDepthStencilView);
	HRESULT CreateInputLayout(const(D3D11_INPUT_ELEMENT_DESC)* pInputElementDescs, UINT NumElements, const(void)* pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, ID3D11InputLayout* ppInputLayout);
	HRESULT CreateVertexShader(const(void)* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader* ppVertexShader);
	HRESULT CreateGeometryShader(const(void)* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader* ppGeometryShader);
	HRESULT CreateGeometryShaderWithStreamOutput(const(void)* pShaderBytecode, SIZE_T BytecodeLength, const(D3D11_SO_DECLARATION_ENTRY)* pSODeclaration, UINT NumEntries, const(UINT)* pBufferStrides, UINT NumStrides, UINT RasterizedStream, ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader* ppGeometryShader);
	HRESULT CreatePixelShader(const(void)* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader* ppPixelShader);
	HRESULT CreateHullShader(const(void)* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader* ppHullShader);
	HRESULT CreateDomainShader(const(void)* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader* ppDomainShader);
	HRESULT CreateComputeShader(const(void)* pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader* ppComputeShader);
	HRESULT CreateClassLinkage(ID3D11ClassLinkage* ppLinkage);
	HRESULT CreateBlendState(const(D3D11_BLEND_DESC)* pBlendStateDesc, ID3D11BlendState* ppBlendState);
	HRESULT CreateDepthStencilState(const(D3D11_DEPTH_STENCIL_DESC)* pDepthStencilDesc, ID3D11DepthStencilState* ppDepthStencilState);
	HRESULT CreateRasterizerState(const(D3D11_RASTERIZER_DESC*)pRasterizerDesc, ID3D11RasterizerState* ppRasterizerState);
	HRESULT CreateSamplerState(const(D3D11_SAMPLER_DESC)* pSamplerDesc, ID3D11SamplerState* ppSamplerState);
	HRESULT CreateQuery(const(D3D11_QUERY_DESC)* pQueryDesc, ID3D11Query* ppQuery);
	HRESULT CreatePredicate(const(D3D11_QUERY_DESC)* pPredicateDesc, ID3D11Predicate* ppPredicate);
	HRESULT CreateCounter(const(D3D11_COUNTER_DESC)* pCounterDesc, ID3D11Counter* ppCounter);
	HRESULT CreateDeferredContext(UINT ContextFlags, ID3D11DeviceContext* ppDeferredContext);
	HRESULT OpenSharedResource(HANDLE hResource, REFIID ReturnedInterface, void** ppResource);
	HRESULT CheckFormatSupport(DXGI_FORMAT Format, UINT* pFormatSupport);
	HRESULT CheckMultisampleQualityLevels(DXGI_FORMAT Format, UINT SampleCount, UINT* pNumQualityLevels);
	void CheckCounterInfo(D3D11_COUNTER_INFO* pCounterInfo);
	HRESULT CheckCounter(const(D3D11_COUNTER_DESC)* pDesc, D3D11_COUNTER_TYPE* pType, UINT* pActiveCounters, LPSTR szName, UINT* pNameLength, LPSTR szUnits, UINT* pUnitsLength, LPSTR szDescription, UINT* pDescriptionLength);
	HRESULT CheckFeatureSupport(D3D11_FEATURE Feature, void*pFeatureSupportData, UINT FeatureSupportDataSize);
	HRESULT GetPrivateData(REFGUID guid, UINT* pDataSize, void* pData);
	HRESULT SetPrivateData(REFGUID guid, INT DataSize, const(void)* pData);
	HRESULT SetPrivateDataInterface(REFGUID guid, const(IUnknown) pData);
	D3D_FEATURE_LEVEL GetFeatureLevel();
	UINT GetCreationFlags();
	HRESULT GetDeviceRemovedReason();
	void GetImmediateContext(ID3D11DeviceContext* ppImmediateContext);
	HRESULT SetExceptionMode(UINT RaiseFlags);
	UINT GetExceptionMode();
}

enum {
	D3D11_CREATE_DEVICE_SINGLETHREADED = 0x1,
	D3D11_CREATE_DEVICE_DEBUG = 0x2,
	D3D11_CREATE_DEVICE_SWITCH_TO_REF = 0x4,
	D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
	D3D11_CREATE_DEVICE_BGRA_SUPPORT = 0x20
}
alias int D3D11_CREATE_DEVICE_FLAG;

enum D3D11_SDK_VERSION = 7;

alias extern(Windows) HRESULT function(IDXGIAdapter, D3D_DRIVER_TYPE, HMODULE, UINT, const(D3D_FEATURE_LEVEL)*, UINT FeatureLevels, UINT, ID3D11Device*, D3D_FEATURE_LEVEL*, ID3D11DeviceContext*) PFN_D3D11_CREATE_DEVICE;
extern(Windows) HRESULT D3D11CreateDevice(IDXGIAdapter pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, const(D3D_FEATURE_LEVEL)* pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, ID3D11Device* ppDevice, D3D_FEATURE_LEVEL* pFeatureLevel, ID3D11DeviceContext* ppImmediateContext);

alias extern(Windows) HRESULT function(IDXGIAdapter, D3D_DRIVER_TYPE, HMODULE, UINT, const(D3D_FEATURE_LEVEL)*, UINT FeatureLevels, UINT, const(DXGI_SWAP_CHAIN_DESC)*, IDXGISwapChain*, ID3D11Device*, D3D_FEATURE_LEVEL*, ID3D11DeviceContext*) PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN;
extern(Windows) HRESULT D3D11CreateDeviceAndSwapChain(IDXGIAdapter pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, const(D3D_FEATURE_LEVEL)* pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, const(DXGI_SWAP_CHAIN_DESC)* pSwapChainDesc, IDXGISwapChain* ppSwapChain, ID3D11Device* ppDevice, D3D_FEATURE_LEVEL* pFeatureLevel, ID3D11DeviceContext* ppImmediateContext);

mixin DEFINE_GUID!("IID_ID3D11DeviceChild", 0x1841e5c8, 0x16b0, 0x489b, 0xbc, 0xc8, 0x44, 0xcf, 0xb0, 0xd5, 0xde, 0xae);
mixin DEFINE_GUID!("IID_ID3D11DepthStencilState", 0x03823efb, 0x8d8f, 0x4e1c, 0x9a, 0xa2, 0xf6, 0x4b, 0xb2, 0xcb, 0xfd, 0xf1);
mixin DEFINE_GUID!("IID_ID3D11BlendState", 0x75b68faa, 0x347d, 0x4159, 0x8f, 0x45, 0xa0, 0x64, 0x0f, 0x01, 0xcd, 0x9a);
mixin DEFINE_GUID!("IID_ID3D11RasterizerState", 0x9bb4ab81, 0xab1a, 0x4d8f, 0xb5, 0x06, 0xfc, 0x04, 0x20, 0x0b, 0x6e, 0xe7);
mixin DEFINE_GUID!("IID_ID3D11Resource", 0xdc8e63f3, 0xd12b, 0x4952, 0xb4, 0x7b, 0x5e, 0x45, 0x02, 0x6a, 0x86, 0x2d);
mixin DEFINE_GUID!("IID_ID3D11Buffer", 0x48570b85, 0xd1ee, 0x4fcd, 0xa2, 0x50, 0xeb, 0x35, 0x07, 0x22, 0xb0, 0x37);
mixin DEFINE_GUID!("IID_ID3D11Texture1D", 0xf8fb5c27, 0xc6b3, 0x4f75, 0xa4, 0xc8, 0x43, 0x9a, 0xf2, 0xef, 0x56, 0x4c);
mixin DEFINE_GUID!("IID_ID3D11Texture2D", 0x6f15aaf2, 0xd208, 0x4e89, 0x9a, 0xb4, 0x48, 0x95, 0x35, 0xd3, 0x4f, 0x9c);
mixin DEFINE_GUID!("IID_ID3D11Texture3D", 0x037e866e, 0xf56d, 0x4357, 0xa8, 0xaf, 0x9d, 0xab, 0xbe, 0x6e, 0x25, 0x0e);
mixin DEFINE_GUID!("IID_ID3D11View", 0x839d1216, 0xbb2e, 0x412b, 0xb7, 0xf4, 0xa9, 0xdb, 0xeb, 0xe0, 0x8e, 0xd1);
mixin DEFINE_GUID!("IID_ID3D11ShaderResourceView", 0xb0e06fe0, 0x8192, 0x4e1a, 0xb1, 0xca, 0x36, 0xd7, 0x41, 0x47, 0x10, 0xb2);
mixin DEFINE_GUID!("IID_ID3D11RenderTargetView", 0xdfdba067, 0x0b8d, 0x4865, 0x87, 0x5b, 0xd7, 0xb4, 0x51, 0x6c, 0xc1, 0x64);
mixin DEFINE_GUID!("IID_ID3D11DepthStencilView", 0x9fdac92a, 0x1876, 0x48c3, 0xaf, 0xad, 0x25, 0xb9, 0x4f, 0x84, 0xa9, 0xb6);
mixin DEFINE_GUID!("IID_ID3D11UnorderedAccessView", 0x28acf509, 0x7f5c, 0x48f6, 0x86, 0x11, 0xf3, 0x16, 0x01, 0x0a, 0x63, 0x80);
mixin DEFINE_GUID!("IID_ID3D11VertexShader", 0x3b301d64, 0xd678, 0x4289, 0x88, 0x97, 0x22, 0xf8, 0x92, 0x8b, 0x72, 0xf3);
mixin DEFINE_GUID!("IID_ID3D11HullShader", 0x8e5c6061, 0x628a, 0x4c8e, 0x82, 0x64, 0xbb, 0xe4, 0x5c, 0xb3, 0xd5, 0xdd);
mixin DEFINE_GUID!("IID_ID3D11DomainShader", 0xf582c508, 0x0f36, 0x490c, 0x99, 0x77, 0x31, 0xee, 0xce, 0x26, 0x8c, 0xfa);
mixin DEFINE_GUID!("IID_ID3D11GeometryShader", 0x38325b96, 0xeffb, 0x4022, 0xba, 0x02, 0x2e, 0x79, 0x5b, 0x70, 0x27, 0x5c);
mixin DEFINE_GUID!("IID_ID3D11PixelShader", 0xea82e40d, 0x51dc, 0x4f33, 0x93, 0xd4, 0xdb, 0x7c, 0x91, 0x25, 0xae, 0x8c);
mixin DEFINE_GUID!("IID_ID3D11ComputeShader", 0x4f5b196e, 0xc2bd, 0x495e, 0xbd, 0x01, 0x1f, 0xde, 0xd3, 0x8e, 0x49, 0x69);
mixin DEFINE_GUID!("IID_ID3D11InputLayout", 0xe4819ddc, 0x4cf0, 0x4025, 0xbd, 0x26, 0x5d, 0xe8, 0x2a, 0x3e, 0x07, 0xb7);
mixin DEFINE_GUID!("IID_ID3D11SamplerState", 0xda6fea51, 0x564c, 0x4487, 0x98, 0x10, 0xf0, 0xd0, 0xf9, 0xb4, 0xe3, 0xa5);
mixin DEFINE_GUID!("IID_ID3D11Asynchronous", 0x4b35d0cd, 0x1e15, 0x4258, 0x9c, 0x98, 0x1b, 0x13, 0x33, 0xf6, 0xdd, 0x3b);
mixin DEFINE_GUID!("IID_ID3D11Query", 0xd6c00747, 0x87b7, 0x425e, 0xb8, 0x4d, 0x44, 0xd1, 0x08, 0x56, 0x0a, 0xfd);
mixin DEFINE_GUID!("IID_ID3D11Predicate", 0x9eb576dd, 0x9f77, 0x4d86, 0x81, 0xaa, 0x8b, 0xab, 0x5f, 0xe4, 0x90, 0xe2);
mixin DEFINE_GUID!("IID_ID3D11Counter", 0x6e8c49fb, 0xa371, 0x4770, 0xb4, 0x40, 0x29, 0x08, 0x60, 0x22, 0xb7, 0x41);
mixin DEFINE_GUID!("IID_ID3D11ClassInstance", 0xa6cd7faa, 0xb0b7, 0x4a2f, 0x94, 0x36, 0x86, 0x62, 0xa6, 0x57, 0x97, 0xcb);
mixin DEFINE_GUID!("IID_ID3D11ClassLinkage", 0xddf57cba, 0x9543, 0x46e4, 0xa1, 0x2b, 0xf2, 0x07, 0xa0, 0xfe, 0x7f, 0xed);
mixin DEFINE_GUID!("IID_ID3D11CommandList", 0xa24bc4d1, 0x769e, 0x43f7, 0x80, 0x13, 0x98, 0xff, 0x56, 0x6c, 0x18, 0xe2);
mixin DEFINE_GUID!("IID_ID3D11DeviceContext", 0xc0bfa96c, 0xe089, 0x44fb, 0x8e, 0xaf, 0x26, 0xf8, 0x79, 0x61, 0x90, 0xda);
mixin DEFINE_GUID!("IID_ID3D11Device", 0xdb6f6ddb, 0xac77, 0x4e88, 0x82, 0x53, 0x81, 0x9d, 0xf9, 0xbb, 0xf1, 0x40);

}// extern(C)

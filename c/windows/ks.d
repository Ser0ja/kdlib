/** ks.d

Converted from 'ks.h'.

Version: V7.0
Authors: Koji Kishita
*/
module c.windows.ks;


import c.windows.windef;
import c.windows.winioctl;
import c.windows.winternl;
import c.windows.guiddef;
import c.windows.unknwn;


enum {
	IOCTL_KS_PROPERTY      = CTL_CODE(FILE_DEVICE_KS, 0x000, METHOD_NEITHER, FILE_ANY_ACCESS),
	IOCTL_KS_ENABLE_EVENT  = CTL_CODE(FILE_DEVICE_KS, 0x001, METHOD_NEITHER, FILE_ANY_ACCESS),
	IOCTL_KS_DISABLE_EVENT = CTL_CODE(FILE_DEVICE_KS, 0x002, METHOD_NEITHER, FILE_ANY_ACCESS),
	IOCTL_KS_METHOD        = CTL_CODE(FILE_DEVICE_KS, 0x003, METHOD_NEITHER, FILE_ANY_ACCESS),
	IOCTL_KS_WRITE_STREAM  = CTL_CODE(FILE_DEVICE_KS, 0x004, METHOD_NEITHER, FILE_WRITE_ACCESS),
	IOCTL_KS_READ_STREAM   = CTL_CODE(FILE_DEVICE_KS, 0x005, METHOD_NEITHER, FILE_READ_ACCESS),
	IOCTL_KS_RESET_STATE   = CTL_CODE(FILE_DEVICE_KS, 0x006, METHOD_NEITHER, FILE_ANY_ACCESS),
}

enum {
	KSRESET_BEGIN,
	KSRESET_END
}
alias int KSRESET;

enum {
	KSSTATE_STOP,
	KSSTATE_ACQUIRE,
	KSSTATE_PAUSE,
	KSSTATE_RUN
}
alias int KSSTATE;
alias KSSTATE* PKSSTATE;

enum {
	KSPRIORITY_LOW       = 0x00000001,
	KSPRIORITY_NORMAL    = 0x40000000,
	KSPRIORITY_HIGH      = 0x80000000,
	KSPRIORITY_EXCLUSIVE = 0xFFFFFFFF,
}

struct KSPRIORITY {
	ULONG PriorityClass;
	ULONG PrioritySubClass;
}
alias KSPRIORITY* PKSPRIORITY;

struct KSIDENTIFIER {
	union {
		struct {
			GUID Set;
			ULONG Id;
			ULONG Flags;
		}
		LONGLONG Alignment;
	}
}
alias KSIDENTIFIER* PKSIDENTIFIER;

alias KSIDENTIFIER KSPROPERTY;
alias KSPROPERTY* PKSPROPERTY;
alias KSIDENTIFIER KSMETHOD;
alias KSMETHOD* PKSMETHOD;
alias KSIDENTIFIER KSEVENT;
alias KSEVENT* PKSEVENT;

enum {
	KSMETHOD_TYPE_NONE         = 0x00000000,
	KSMETHOD_TYPE_READ         = 0x00000001,
	KSMETHOD_TYPE_WRITE        = 0x00000002,
	KSMETHOD_TYPE_MODIFY       = 0x00000003,
	KSMETHOD_TYPE_SOURCE       = 0x00000004,
	KSMETHOD_TYPE_SEND         = 0x00000001,
	KSMETHOD_TYPE_SETSUPPORT   = 0x00000100,
	KSMETHOD_TYPE_BASICSUPPORT = 0x00000200,
	KSMETHOD_TYPE_TOPOLOGY     = 0x10000000,
}

enum {
	KSPROPERTY_TYPE_GET            = 0x00000001,
	KSPROPERTY_TYPE_SET            = 0x00000002,
	KSPROPERTY_TYPE_SETSUPPORT     = 0x00000100,
	KSPROPERTY_TYPE_BASICSUPPORT   = 0x00000200,
	KSPROPERTY_TYPE_RELATIONS      = 0x00000400,
	KSPROPERTY_TYPE_SERIALIZESET   = 0x00000800,
	KSPROPERTY_TYPE_UNSERIALIZESET = 0x00001000,
	KSPROPERTY_TYPE_SERIALIZERAW   = 0x00002000,
	KSPROPERTY_TYPE_UNSERIALIZERAW = 0x00004000,
	KSPROPERTY_TYPE_SERIALIZESIZE  = 0x00008000,
	KSPROPERTY_TYPE_DEFAULTVALUES  = 0x00010000,
	KSPROPERTY_TYPE_TOPOLOGY       = 0x10000000,
}

struct KSP_NODE {
	KSPROPERTY Property;
	ULONG NodeId;
	ULONG Reserved;
}
alias KSP_NODE* PKSP_NODE;

struct KSM_NODE {
	KSMETHOD Method;
	ULONG NodeId;
	ULONG Reserved;
}
alias KSM_NODE* PKSM_NODE;

struct KSE_NODE {
	KSEVENT Event;
	ULONG NodeId;
	ULONG Reserved;
}
alias KSE_NODE* PKSE_NODE;

mixin DEFINE_GUID!("KSPROPTYPESETID_General", "97E99BA0-BDEA-11CF-A5D6-28DB04C10000");

struct KSMULTIPLE_ITEM {
	ULONG Size;
	ULONG Count;
}
alias KSMULTIPLE_ITEM* PKSMULTIPLE_ITEM;

struct KSPROPERTY_DESCRIPTION {
	ULONG AccessFlags;
	ULONG DescriptionSize;
	KSIDENTIFIER PropTypeSet;
	ULONG MembersListCount;
	ULONG Reserved;
}
alias KSPROPERTY_DESCRIPTION* PKSPROPERTY_DESCRIPTION;

enum {
	KSPROPERTY_MEMBER_RANGES        = 0x00000001,
	KSPROPERTY_MEMBER_STEPPEDRANGES = 0x00000002,
	KSPROPERTY_MEMBER_VALUES        = 0x00000003,
	KSPROPERTY_MEMBER_FLAG_DEFAULT  = 0x00000001,
	//(NTDDI_VERSION >= NTDDI_WINXP)
		KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_MULTICHANNEL = 0x00000002,
		KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_UNIFORM      = 0x00000004,
}

struct KSPROPERTY_MEMBERSHEADER {
	ULONG MembersFlags;
	ULONG MembersSize;
	ULONG MembersCount;
	ULONG Flags;
}
alias KSPROPERTY_MEMBERSHEADER* PKSPROPERTY_MEMBERSHEADER;

union KSPROPERTY_BOUNDS_LONG {
	struct {
		LONG SignedMinimum;
		LONG SignedMaximum;
	}
	struct {
		ULONG UnsignedMinimum;
		ULONG UnsignedMaximum;
	}
}
alias KSPROPERTY_BOUNDS_LONG* PKSPROPERTY_BOUNDS_LONG;

union KSPROPERTY_BOUNDS_LONGLONG {
	struct {
		LONGLONG SignedMinimum;
		LONGLONG SignedMaximum;
	}
	struct {
		DWORDLONG UnsignedMinimum;
		DWORDLONG UnsignedMaximum;
	}
}
alias KSPROPERTY_BOUNDS_LONGLONG* PKSPROPERTY_BOUNDS_LONGLONG;

struct KSPROPERTY_STEPPING_LONG {
	ULONG SteppingDelta;
	ULONG Reserved;
	KSPROPERTY_BOUNDS_LONG Bounds;
}
alias KSPROPERTY_STEPPING_LONG* PKSPROPERTY_STEPPING_LONG;

struct KSPROPERTY_STEPPING_LONGLONG {
	DWORDLONG SteppingDelta;
	KSPROPERTY_BOUNDS_LONGLONG Bounds;
}
alias KSPROPERTY_STEPPING_LONGLONG* PKSPROPERTY_STEPPING_LONGLONG;

alias PVOID PKSWORKER;

struct KSEVENTDATA {
	ULONG NotificationType;
	union {
		struct {
			HANDLE Event;
			ULONG_PTR[2] Reserved;
		}// EventHandle
		struct {
			HANDLE Semaphore;
			ULONG Reserved_1;
			LONG Adjustment;
		}// SemaphoreHandle
		/*
		struct {
			PVOID Event;
			KPRIORITY Increment;
			ULONG_PTR Reserved;
		}// EventObject
		struct {
			PVOID Semaphore;
			KPRIORITY Increment;
			LONG Adjustment;
		}// SemaphoreObject
		struct {
			PKDPC Dpc;
			ULONG ReferenceCount;
			ULONG_PTR Reserved;
		}// Dpc
		struct {
			PWORK_QUEUE_ITEM WorkQueueItem;
			WORK_QUEUE_TYPE WorkQueueType;
			ULONG_PTR Reserved;
		}// WorkItem
		struct {
			PWORK_QUEUE_ITEM WorkQueueItem;
			PKSWORKER KsWorkerObject;
			ULONG_PTR Reserved;
		}// KsWorkItem
		*/
		struct {
			PVOID Unused;
			LONG_PTR[2] Alignment;
		}// Alignment
	}
}
alias KSEVENTDATA* PKSEVENTDATA;

enum {
	KSEVENTF_EVENT_HANDLE       = 0x00000001,
	KSEVENTF_SEMAPHORE_HANDLE   = 0x00000002,
	KSEVENTF_EVENT_OBJECT       = 0x00000004,
	KSEVENTF_SEMAPHORE_OBJECT   = 0x00000008,
	KSEVENTF_DPC                = 0x00000010,
	KSEVENTF_WORKITEM           = 0x00000020,
	KSEVENTF_KSWORKITEM         = 0x00000080,
	KSEVENT_TYPE_ENABLE         = 0x00000001,
	KSEVENT_TYPE_ONESHOT        = 0x00000002,
	KSEVENT_TYPE_ENABLEBUFFERED = 0x00000004,
	KSEVENT_TYPE_SETSUPPORT     = 0x00000100,
	KSEVENT_TYPE_BASICSUPPORT   = 0x00000200,
	KSEVENT_TYPE_QUERYBUFFER    = 0x00000400,
	KSEVENT_TYPE_TOPOLOGY       = 0x10000000,
}

struct KSQUERYBUFFER {
	KSEVENT Event;
	PKSEVENTDATA EventData;
	PVOID Reserved;
}
alias KSQUERYBUFFER* PKSQUERYBUFFER;

struct KSRELATIVEEVENT {
	ULONG Size;
	ULONG Flags;
	union {
		HANDLE ObjectHandle;
		PVOID ObjectPointer;
	}
	PVOID Reserved;
	KSEVENT Event;
	KSEVENTDATA EventData;
}

enum {
	KSRELATIVEEVENT_FLAG_HANDLE  = 0x00000001,
	KSRELATIVEEVENT_FLAG_POINTER = 0x00000002,
}

struct KSEVENT_TIME_MARK {
	KSEVENTDATA EventData;
	LONGLONG MarkTime;
}
alias KSEVENT_TIME_MARK* PKSEVENT_TIME_MARK;

struct KSEVENT_TIME_INTERVAL {
	KSEVENTDATA EventData;
	LONGLONG TimeBase;
	LONGLONG Interval;
}
alias KSEVENT_TIME_INTERVAL* PKSEVENT_TIME_INTERVAL;

struct KSINTERVAL {
	LONGLONG TimeBase;
	LONGLONG Interval;
}
alias KSINTERVAL* PKSINTERVAL;

mixin DEFINE_GUID!("KSPROPSETID_General", "1464EDA5-6A8F-11D1-9AA7-00A0C9223196");

enum {
	KSPROPERTY_GENERAL_COMPONENTID
}
alias int KSPROPERTY_GENERAL;

struct KSCOMPONENTID {
	GUID Manufacturer;
	GUID Product;
	GUID Component;
	GUID Name;
	ULONG Version;
	ULONG Revision;
}
alias KSCOMPONENTID* PKSCOMPONENTID;

//DEFINE_KSPROPERTY_ITEM_GENERAL_COMPONENTID(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_GENERAL_COMPONENTID, (Handler), sizeof(KSPROPERTY), sizeof(KSCOMPONENTID), NULL, NULL, 0, NULL, NULL, 0)

mixin DEFINE_GUID!("KSMETHODSETID_StreamIo", "65D003CA-1523-11D2-B27A-00A0C9223196");

enum {
	KSMETHOD_STREAMIO_READ,
	KSMETHOD_STREAMIO_WRITE
}
alias int KSMETHOD_STREAMIO;

//DEFINE_KSMETHOD_ITEM_STREAMIO_READ(Handler) DEFINE_KSMETHOD_ITEM( KSMETHOD_STREAMIO_READ, KSMETHOD_TYPE_WRITE, (Handler), sizeof(KSMETHOD), 0, NULL)
//DEFINE_KSMETHOD_ITEM_STREAMIO_WRITE(Handler) DEFINE_KSMETHOD_ITEM( KSMETHOD_STREAMIO_WRITE, KSMETHOD_TYPE_READ, (Handler), sizeof(KSMETHOD), 0, NULL)
mixin DEFINE_GUID!("KSPROPSETID_MediaSeeking", "EE904F0C-D09B-11D0-ABE9-00A0C9223196");

enum {
	KSPROPERTY_MEDIASEEKING_CAPABILITIES,
	KSPROPERTY_MEDIASEEKING_FORMATS,
	KSPROPERTY_MEDIASEEKING_TIMEFORMAT,
	KSPROPERTY_MEDIASEEKING_POSITION,
	KSPROPERTY_MEDIASEEKING_STOPPOSITION,
	KSPROPERTY_MEDIASEEKING_POSITIONS,
	KSPROPERTY_MEDIASEEKING_DURATION,
	KSPROPERTY_MEDIASEEKING_AVAILABLE,
	KSPROPERTY_MEDIASEEKING_PREROLL,
	KSPROPERTY_MEDIASEEKING_CONVERTTIMEFORMAT
}
alias int KSPROPERTY_MEDIASEEKING;

enum {
	KS_SEEKING_NoPositioning,
	KS_SEEKING_AbsolutePositioning,
	KS_SEEKING_RelativePositioning,
	KS_SEEKING_IncrementalPositioning,
	KS_SEEKING_PositioningBitsMask = 0x3,
	KS_SEEKING_SeekToKeyFrame,
	KS_SEEKING_ReturnTime = 0x8
}
alias int KS_SEEKING_FLAGS;

enum {
	KS_SEEKING_CanSeekAbsolute   = 0x1,
	KS_SEEKING_CanSeekForwards   = 0x2,
	KS_SEEKING_CanSeekBackwards  = 0x4,
	KS_SEEKING_CanGetCurrentPos  = 0x8,
	KS_SEEKING_CanGetStopPos     = 0x10,
	KS_SEEKING_CanGetDuration    = 0x20,
	KS_SEEKING_CanPlayBackwards  = 0x40
}
alias int KS_SEEKING_CAPABILITIES;

struct KSPROPERTY_POSITIONS {
	LONGLONG Current;
	LONGLONG Stop;
	KS_SEEKING_FLAGS CurrentFlags;
	KS_SEEKING_FLAGS StopFlags;
}
alias KSPROPERTY_POSITIONS* PKSPROPERTY_POSITIONS;

struct KSPROPERTY_MEDIAAVAILABLE {
	LONGLONG Earliest;
	LONGLONG Latest;
}
alias KSPROPERTY_MEDIAAVAILABLE* PKSPROPERTY_MEDIAAVAILABLE;

struct KSP_TIMEFORMAT {
	KSPROPERTY Property;
	GUID SourceFormat;
	GUID TargetFormat;
	LONGLONG Time;
}
alias KSP_TIMEFORMAT* PKSP_TIMEFORMAT;

//DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_CAPABILITIES(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MEDIASEEKING_CAPABILITIES, (Handler), sizeof(KSPROPERTY), sizeof(KS_SEEKING_CAPABILITIES), NULL, NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_FORMATS(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MEDIASEEKING_FORMATS, (Handler), sizeof(KSPROPERTY), 0, NULL, NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_TIMEFORMAT(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MEDIASEEKING_TIMEFORMAT, (GetHandler), sizeof(KSPROPERTY), sizeof(GUID), (SetHandler), NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_POSITION(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MEDIASEEKING_POSITION, (Handler), sizeof(KSPROPERTY), sizeof(LONGLONG), NULL, NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_STOPPOSITION(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MEDIASEEKING_STOPPOSITION, (Handler), sizeof(KSPROPERTY), sizeof(LONGLONG), NULL, NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_POSITIONS(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MEDIASEEKING_POSITIONS, NULL, sizeof(KSPROPERTY), sizeof(KSPROPERTY_POSITIONS), (Handler), NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_DURATION(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MEDIASEEKING_DURATION, (Handler), sizeof(KSPROPERTY), sizeof(LONGLONG), NULL, NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_AVAILABLE(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MEDIASEEKING_AVAILABLE, (Handler), sizeof(KSPROPERTY), sizeof(KSPROPERTY_MEDIAAVAILABLE), NULL, NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_PREROLL(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MEDIASEEKING_PREROLL, (Handler), sizeof(KSPROPERTY), sizeof(LONGLONG), NULL, NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_CONVERTTIMEFORMAT(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MEDIASEEKING_CONVERTTIMEFORMAT, (Handler), sizeof(KSP_TIMEFORMAT), sizeof(LONGLONG), NULL, NULL, 0, NULL, NULL, 0)

mixin DEFINE_GUID!("KSPROPSETID_Topology", "720D4AC0-7533-11D0-A5D6-28DB04C10000");

enum {
	KSPROPERTY_TOPOLOGY_CATEGORIES,
	KSPROPERTY_TOPOLOGY_NODES,
	KSPROPERTY_TOPOLOGY_CONNECTIONS,
	KSPROPERTY_TOPOLOGY_NAME
}
alias int KSPROPERTY_TOPOLOGY;

//DEFINE_KSPROPERTY_ITEM_TOPOLOGY_CATEGORIES(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_TOPOLOGY_CATEGORIES, (Handler), sizeof(KSPROPERTY), 0, NULL, NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_TOPOLOGY_NODES(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_TOPOLOGY_NODES, (Handler), sizeof(KSPROPERTY), 0, NULL, NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_TOPOLOGY_CONNECTIONS(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_TOPOLOGY_CONNECTIONS, (Handler), sizeof(KSPROPERTY), 0, NULL, NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_ITEM_TOPOLOGY_NAME(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_TOPOLOGY_NAME, (Handler), sizeof(KSP_NODE), 0, NULL, NULL, 0, NULL, NULL, 0)
//DEFINE_KSPROPERTY_TOPOLOGYSET(TopologySet, Handler) DEFINE_KSPROPERTY_TABLE(TopologySet) { DEFINE_KSPROPERTY_ITEM_TOPOLOGY_CATEGORIES(Handler), DEFINE_KSPROPERTY_ITEM_TOPOLOGY_NODES(Handler), DEFINE_KSPROPERTY_ITEM_TOPOLOGY_CONNECTIONS(Handler), DEFINE_KSPROPERTY_ITEM_TOPOLOGY_NAME(Handler) }

/*
mixin DEFINE_GUID!("KSPROPSETID_GM", "AF627536-E719-11D2-8A1D-006097D2DF5D");

alias extern(Windows) VOID function(PFILE_OBJECT GraphManager, ULONG EventId, PVOID Filter, PVOID Pin, PVOID Frame, ULONG Duration) PFNKSGRAPHMANAGER_NOTIFY;

struct KSGRAPHMANAGER_FUNCTIONTABLE{
	PFNKSGRAPHMANAGER_NOTIFY NotifyEvent;
}
alias KSGRAPHMANAGER_FUNCTIONTABLE PKSGRAPHMANAGER_FUNCTIONTABLE;

struct KSPROPERTY_GRAPHMANAGER_INTERFACE {
	PFILE_OBJECT GraphManager;
	KSGRAPHMANAGER_FUNCTIONTABLE FunctionTable;
}
alias KSPROPERTY_GRAPHMANAGER_INTERFACE* PKSPROPERTY_GRAPHMANAGER_INTERFACE;

enum {
	KSPROPERTY_GM_GRAPHMANAGER,
	KSPROPERTY_GM_TIMESTAMP_CLOCK,
	KSPROPERTY_GM_RATEMATCH,
	KSPROPERTY_GM_RENDER_CLOCK,
}
alias int KSPROPERTY_GM;
*/

mixin DEFINE_GUID!("KSCATEGORY_BRIDGE", "085AFF00-62CE-11CF-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSCATEGORY_CAPTURE", "65E8773D-8F56-11D0-A3B9-00A0C9223196");
mixin DEFINE_GUID!("KSCATEGORY_RENDER", "65E8773E-8F56-11D0-A3B9-00A0C9223196");
mixin DEFINE_GUID!("KSCATEGORY_MIXER", "AD809C00-7B88-11D0-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSCATEGORY_SPLITTER", "0A4252A0-7E70-11D0-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSCATEGORY_DATACOMPRESSOR", "1E84C900-7E70-11D0-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSCATEGORY_DATADECOMPRESSOR", "2721AE20-7E70-11D0-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSCATEGORY_DATATRANSFORM", "2EB07EA0-7E70-11D0-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSMFT_CATEGORY_VIDEO_DECODER", "d6c02d4b-6833-45b4-971a-05a4b04bab91");
mixin DEFINE_GUID!("KSMFT_CATEGORY_VIDEO_ENCODER", "f79eac7d-e545-4387-bdee-d647d7bde42a");
mixin DEFINE_GUID!("KSMFT_CATEGORY_VIDEO_EFFECT", "12e17c21-532c-4a6e-8a1c-40825a736397");
mixin DEFINE_GUID!("KSMFT_CATEGORY_MULTIPLEXER", "059c561e-05ae-4b61-b69d-55b61ee54a7b");
mixin DEFINE_GUID!("KSMFT_CATEGORY_DEMULTIPLEXER", "a8700a7a-939b-44c5-99d7-76226b23b3f1");
mixin DEFINE_GUID!("KSMFT_CATEGORY_AUDIO_DECODER", "9ea73fb4-ef7a-4559-8d5d-719d8f0426c7");
mixin DEFINE_GUID!("KSMFT_CATEGORY_AUDIO_ENCODER", "91c64bd0-f91e-4d8c-9276-db248279d975");
mixin DEFINE_GUID!("KSMFT_CATEGORY_AUDIO_EFFECT", "11064c48-3648-4ed0-932e-05ce8ac811b7");
mixin DEFINE_GUID!("KSMFT_CATEGORY_VIDEO_PROCESSOR", "302ea3fc-aa5f-47f9-9f7a-c2188bb16302");
mixin DEFINE_GUID!("KSMFT_CATEGORY_OTHER", "90175d57-b7ea-4901-aeb3-933a8747756f");
mixin DEFINE_GUID!("KSCATEGORY_COMMUNICATIONSTRANSFORM", "CF1DDA2C-9743-11D0-A3EE-00A0C9223196");
mixin DEFINE_GUID!("KSCATEGORY_INTERFACETRANSFORM", "CF1DDA2D-9743-11D0-A3EE-00A0C9223196");
mixin DEFINE_GUID!("KSCATEGORY_MEDIUMTRANSFORM", "CF1DDA2E-9743-11D0-A3EE-00A0C9223196");
mixin DEFINE_GUID!("KSCATEGORY_FILESYSTEM", "760FED5E-9357-11D0-A3CC-00A0C9223196");
mixin DEFINE_GUID!("KSCATEGORY_CLOCK", "53172480-4791-11D0-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSCATEGORY_PROXY", "97EBAACA-95BD-11D0-A3EA-00A0C9223196");
mixin DEFINE_GUID!("KSCATEGORY_QUALITY", "97EBAACB-95BD-11D0-A3EA-00A0C9223196");

struct KSTOPOLOGY_CONNECTION {
	ULONG FromNode;
	ULONG FromNodePin;
	ULONG ToNode;
	ULONG ToNodePin;
}
alias KSTOPOLOGY_CONNECTION* PKSTOPOLOGY_CONNECTION;

struct KSTOPOLOGY {
	ULONG CategoriesCount;
	const(GUID)* Categories;
	ULONG TopologyNodesCount;
	const(GUID)* TopologyNodes;
	ULONG TopologyConnectionsCount;
	const(KSTOPOLOGY_CONNECTION)* TopologyConnections;
	const(GUID)* TopologyNodesNames;
	ULONG Reserved;
}
alias KSTOPOLOGY* PKSTOPOLOGY;

enum {
	KSFILTER_NODE = cast(ULONG)-1,
	KSALL_NODES   = cast(ULONG)-1,
}

struct KSNODE_CREATE {
	ULONG CreateFlags;
	ULONG Node;
}
alias KSNODE_CREATE* PKSNODE_CREATE;

alias GUID_NULL KSTIME_FORMAT_NONE;

mixin DEFINE_GUID!("KSTIME_FORMAT_FRAME", "7b785570-8c82-11cf-bc0c-00aa00ac74f6");
mixin DEFINE_GUID!("KSTIME_FORMAT_BYTE", "7b785571-8c82-11cf-bc0c-00aa00ac74f6");
mixin DEFINE_GUID!("KSTIME_FORMAT_SAMPLE", "7b785572-8c82-11cf-bc0c-00aa00ac74f6");
mixin DEFINE_GUID!("KSTIME_FORMAT_FIELD", "7b785573-8c82-11cf-bc0c-00aa00ac74f6");
mixin DEFINE_GUID!("KSTIME_FORMAT_MEDIA_TIME", "7b785574-8c82-11cf-bc0c-00aa00ac74f6");

alias KSIDENTIFIER KSPIN_INTERFACE;
alias KSPIN_INTERFACE* PKSPIN_INTERFACE;

mixin DEFINE_GUID!("KSINTERFACESETID_Standard", "1A8766A0-62CE-11CF-A5D6-28DB04C10000");

enum {
	KSINTERFACE_STANDARD_STREAMING,
	KSINTERFACE_STANDARD_LOOPED_STREAMING,
	KSINTERFACE_STANDARD_CONTROL
}
alias int KSINTERFACE_STANDARD;

mixin DEFINE_GUID!("KSINTERFACESETID_FileIo", "8C6F932C-E771-11D0-B8FF-00A0C9223196");

enum {
	KSINTERFACE_FILEIO_STREAMING
}
alias int KSINTERFACE_FILEIO;

enum KSMEDIUM_TYPE_ANYINSTANCE = 0;

mixin DEFINE_GUID!("KSMEDIUMSETID_Standard", "4747B320-62CE-11CF-A5D6-28DB04C10000");

alias KSMEDIUM_TYPE_ANYINSTANCE KSMEDIUM_STANDARD_DEVIO;

mixin DEFINE_GUID!("KSPROPSETID_Pin", "8C134960-51AD-11CF-878A-94F801C10000");

enum {
	KSPROPERTY_PIN_CINSTANCES,
	KSPROPERTY_PIN_CTYPES,
	KSPROPERTY_PIN_DATAFLOW,
	KSPROPERTY_PIN_DATARANGES,
	KSPROPERTY_PIN_DATAINTERSECTION,
	KSPROPERTY_PIN_INTERFACES,
	KSPROPERTY_PIN_MEDIUMS,
	KSPROPERTY_PIN_COMMUNICATION,
	KSPROPERTY_PIN_GLOBALCINSTANCES,
	KSPROPERTY_PIN_NECESSARYINSTANCES,
	KSPROPERTY_PIN_PHYSICALCONNECTION,
	KSPROPERTY_PIN_CATEGORY,
	KSPROPERTY_PIN_NAME,
	KSPROPERTY_PIN_CONSTRAINEDDATARANGES,
	KSPROPERTY_PIN_PROPOSEDATAFORMAT
}
alias int KSPROPERTY_PIN;

struct KSP_PIN {
	KSPROPERTY Property;
	ULONG PinId;
	ULONG Reserved;
}
alias KSP_PIN* PKSP_PIN;

struct KSE_PIN {
	KSEVENT Event;
	ULONG PinId;
	ULONG Reserved;
}
alias KSE_PIN* PKSE_PIN;

enum KSINSTANCE_INDETERMINATE = cast(ULONG)-1;

struct KSPIN_CINSTANCES {
	ULONG PossibleCount;
	ULONG CurrentCount;
}
alias KSPIN_CINSTANCES* PKSPIN_CINSTANCES;

enum {
	KSPIN_DATAFLOW_IN = 1,
	KSPIN_DATAFLOW_OUT
}
alias int KSPIN_DATAFLOW;
alias KSPIN_DATAFLOW* PKSPIN_DATAFLOW;

enum {
	KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION = 0,
	KSDATAFORMAT_TEMPORAL_COMPRESSION     = 1 << KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION,
	KSDATAFORMAT_BIT_ATTRIBUTES           = 1,
	KSDATAFORMAT_ATTRIBUTES               = 1 << KSDATAFORMAT_BIT_ATTRIBUTES,
	KSDATARANGE_BIT_ATTRIBUTES            = 1,
	KSDATARANGE_ATTRIBUTES                = 1 << KSDATARANGE_BIT_ATTRIBUTES,
	KSDATARANGE_BIT_REQUIRED_ATTRIBUTES   = 2,
	KSDATARANGE_REQUIRED_ATTRIBUTES       = 1 << KSDATARANGE_BIT_REQUIRED_ATTRIBUTES,
}


struct KSDATAFORMAT {
	ULONG FormatSize;
	ULONG Flags;
	ULONG SampleSize;
	ULONG Reserved;
	GUID MajorFormat;
	GUID SubFormat;
	GUID Specifier;
}
alias KSDATAFORMAT* PKSDATAFORMAT;
alias KSDATAFORMAT KSDATARANGE;
alias KSDATARANGE* PKSDATARANGE;

enum KSATTRIBUTE_REQUIRED = 0x00000001;

struct KSATTRIBUTE {
	ULONG Size;
	ULONG Flags;
	GUID Attribute;
}
alias KSATTRIBUTE* PKSATTRIBUTE;

version(none){//_NTDDK_
	struct KSATTRIBUTE_LIST {
		ULONG Count;
		PKSATTRIBUTE* Attributes;
	}
	alias KSATTRIBUTE_LIST* PKSATTRIBUTE_LIST;
}

enum {
	KSPIN_COMMUNICATION_NONE,
	KSPIN_COMMUNICATION_SINK,
	KSPIN_COMMUNICATION_SOURCE,
	KSPIN_COMMUNICATION_BOTH,
	KSPIN_COMMUNICATION_BRIDGE
}
alias int KSPIN_COMMUNICATION;
alias KSPIN_COMMUNICATION*PKSPIN_COMMUNICATION;

alias KSIDENTIFIER KSPIN_MEDIUM;
alias KSPIN_MEDIUM* PKSPIN_MEDIUM;

struct KSPIN_CONNECT {
	KSPIN_INTERFACE Interface;
	KSPIN_MEDIUM Medium;
	ULONG PinId;
	HANDLE PinToHandle;
	KSPRIORITY Priority;
}
alias KSPIN_CONNECT* PKSPIN_CONNECT;

struct KSPIN_PHYSICALCONNECTION {
	ULONG Size;
	ULONG Pin;
	WCHAR[1] SymbolicLinkName;
}
alias KSPIN_PHYSICALCONNECTION* PKSPIN_PHYSICALCONNECTION;

version(none){//_NTDDK_
	alias extern(Windows) NTSTATUS function(PIRP Irp, PKSP_PIN Pin, PKSDATARANGE DataRange, PVOID Data) PFNKSINTERSECTHANDLER;
	alias extern(Windows) NTSTATUS function(PVOID Context, PIRP Irp, PKSP_PIN Pin, PKSDATARANGE DataRange, PKSDATARANGE MatchingDataRange, ULONG DataBufferSize, PVOID Data, PULONG DataSize) PFNKSINTERSECTHANDLEREX;
}

/*
DEFINE_KSPIN_INTERFACE_TABLE(tablename) const KSPIN_INTERFACE tablename[] =
DEFINE_KSPIN_INTERFACE_ITEM(guid, interface) { STATICGUIDOF(guid), (interface), 0 }
DEFINE_KSPIN_MEDIUM_TABLE( tablename ) const KSPIN_MEDIUM tablename[] =
DEFINE_KSPIN_MEDIUM_ITEM(guid, medium) DEFINE_KSPIN_INTERFACE_ITEM(guid, medium)
DEFINE_KSPROPERTY_ITEM_PIN_CINSTANCES(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_CINSTANCES, (Handler), sizeof(KSP_PIN), sizeof(KSPIN_CINSTANCES), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_CTYPES(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_CTYPES, (Handler), sizeof(KSPROPERTY), sizeof(ULONG), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_DATAFLOW(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_DATAFLOW, (Handler), sizeof(KSP_PIN), sizeof(KSPIN_DATAFLOW), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_DATARANGES(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_DATARANGES, (Handler), sizeof(KSP_PIN), 0, NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_DATAINTERSECTION(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_DATAINTERSECTION, (Handler), sizeof(KSP_PIN) + sizeof(KSMULTIPLE_ITEM), 0, NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_INTERFACES(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_INTERFACES, (Handler), sizeof(KSP_PIN), 0, NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_MEDIUMS(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_MEDIUMS, (Handler), sizeof(KSP_PIN), 0, NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_COMMUNICATION(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_COMMUNICATION, (Handler), sizeof(KSP_PIN), sizeof(KSPIN_COMMUNICATION), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_GLOBALCINSTANCES(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_GLOBALCINSTANCES, (Handler), sizeof(KSP_PIN), sizeof(KSPIN_CINSTANCES), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_NECESSARYINSTANCES(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_NECESSARYINSTANCES, (Handler), sizeof(KSP_PIN), sizeof(ULONG), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_PHYSICALCONNECTION(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_PHYSICALCONNECTION, (Handler), sizeof(KSP_PIN), 0, NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_CATEGORY(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_CATEGORY, (Handler), sizeof(KSP_PIN), sizeof(GUID), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_NAME(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_NAME, (Handler), sizeof(KSP_PIN), 0, NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_CONSTRAINEDDATARANGES(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_CONSTRAINEDDATARANGES, (Handler), sizeof(KSP_PIN), 0, NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_PIN_PROPOSEDATAFORMAT(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PIN_PROPOSEDATAFORMAT, NULL, sizeof(KSP_PIN), sizeof(KSDATAFORMAT), (Handler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_PINSET(PinSet, PropGeneral, PropInstances, PropIntersection) DEFINE_KSPROPERTY_TABLE(PinSet) { DEFINE_KSPROPERTY_ITEM_PIN_CINSTANCES(PropInstances), DEFINE_KSPROPERTY_ITEM_PIN_CTYPES(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_DATAFLOW(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_DATARANGES(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_DATAINTERSECTION(PropIntersection), DEFINE_KSPROPERTY_ITEM_PIN_INTERFACES(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_MEDIUMS(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_COMMUNICATION(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_CATEGORY(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_NAME(PropGeneral) }
DEFINE_KSPROPERTY_PINSETCONSTRAINED(PinSet, PropGeneral, PropInstances, PropIntersection) DEFINE_KSPROPERTY_TABLE(PinSet) { DEFINE_KSPROPERTY_ITEM_PIN_CINSTANCES(PropInstances), DEFINE_KSPROPERTY_ITEM_PIN_CTYPES(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_DATAFLOW(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_DATARANGES(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_DATAINTERSECTION(PropIntersection), DEFINE_KSPROPERTY_ITEM_PIN_INTERFACES(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_MEDIUMS(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_COMMUNICATION(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_CATEGORY(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_NAME(PropGeneral), DEFINE_KSPROPERTY_ITEM_PIN_CONSTRAINEDDATARANGES(PropGeneral) }
*/

mixin DEFINE_GUID!("KSEVENTSETID_PinCapsChange", "DD4F192E-3B78-49AD-A534-2C315B822000");

enum {
	KSEVENT_PINCAPS_FORMATCHANGE,
	KSEVENT_PINCAPS_JACKINFOCHANGE
}
alias int KSEVENT_PINCAPS_CHANGENOTIFICATIONS;

mixin DEFINE_GUID!("KSNAME_Filter", "9b365890-165f-11d0-a195-0020afd156e4");

const wchar* KSSTRING_Filter = "{9B365890-165F-11D0-A195-0020AFD156E4}";

mixin DEFINE_GUID!("KSNAME_Pin", "146F1A80-4791-11D0-A5D6-28DB04C10000");

const wchar* KSSTRING_Pin = "{146F1A80-4791-11D0-A5D6-28DB04C10000}";

mixin DEFINE_GUID!("KSNAME_Clock", "53172480-4791-11D0-A5D6-28DB04C10000");

const wchar* KSSTRING_Clock = "{53172480-4791-11D0-A5D6-28DB04C10000}";

mixin DEFINE_GUID!("KSNAME_Allocator", "642F5D00-4791-11D0-A5D6-28DB04C10000");

const wchar* KSSTRING_Allocator = "{642F5D00-4791-11D0-A5D6-28DB04C10000}";

const wchar* KSSTRING_AllocatorEx = "{091BB63B-603F-11D1-B067-00A0C9062802}";

mixin DEFINE_GUID!("KSNAME_TopologyNode", "0621061A-EE75-11D0-B915-00A0C9223196");

const wchar* KSSTRING_TopologyNode = "{0621061A-EE75-11D0-B915-00A0C9223196}";

version(none){//_NTDDK_
	struct KSPIN_DESCRIPTOR {
		ULONG InterfacesCount;
		const(KSPIN_INTERFACE)* Interfaces;
		ULONG MediumsCount;
		const(KSPIN_MEDIUM)* Mediums;
		ULONG DataRangesCount;
		const(PKSDATARANGE)* DataRanges;
		KSPIN_DATAFLOW DataFlow;
		KSPIN_COMMUNICATION Communication;
		const(GUID)* Category;
		const(GUID)* Name;
		union {
			LONGLONG Reserved;
			struct {
				ULONG ConstrainedDataRangesCount;
				PKSDATARANGE* ConstrainedDataRanges;
			}
		}
	}
	alias KSPIN_DESCRIPTOR* PKSPIN_DESCRIPTOR;
	alias const(KSPIN_DESCRIPTOR)* PCKSPIN_DESCRIPTOR;

	/*
	DEFINE_KSPIN_DESCRIPTOR_TABLE(tablename) const KSPIN_DESCRIPTOR tablename[] =
	DEFINE_KSPIN_DESCRIPTOR_ITEM( InterfacesCount, Interfaces, MediumsCount, Mediums, DataRangesCount, DataRanges, DataFlow, Communication) { InterfacesCount, Interfaces, MediumsCount, Mediums, DataRangesCount, DataRanges, DataFlow, Communication, NULL, NULL, 0 }
	DEFINE_KSPIN_DESCRIPTOR_ITEMEX( InterfacesCount, Interfaces, MediumsCount, Mediums, DataRangesCount, DataRanges, DataFlow, Communication, Category, Name) { InterfacesCount, Interfaces, MediumsCount, Mediums, DataRangesCount, DataRanges, DataFlow, Communication, Category, Name, 0 }
	*/
}

alias GUID_NULL KSDATAFORMAT_TYPE_WILDCARD;

alias GUID_NULL KSDATAFORMAT_SUBTYPE_WILDCARD;

mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_STREAM", "E436EB83-524F-11CE-9F53-0020AF0BA770");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_NONE", "E436EB8E-524F-11CE-9F53-0020AF0BA770");

alias GUID_NULL KSDATAFORMAT_SPECIFIER_WILDCARD;

mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_FILENAME", "AA797B40-E974-11CF-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_FILEHANDLE", "65E8773C-8F56-11D0-A3B9-00A0C9223196");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_NONE", "0F6417D6-C318-11D0-A43F-00A0C9223196");
mixin DEFINE_GUID!("KSPROPSETID_Quality", "D16AD380-AC1A-11CF-A5D6-28DB04C10000");

enum {
	KSPROPERTY_QUALITY_REPORT,
	KSPROPERTY_QUALITY_ERROR
}
alias int  KSPROPERTY_QUALITY;

/*
DEFINE_KSPROPERTY_ITEM_QUALITY_REPORT(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_QUALITY_REPORT, (GetHandler), sizeof(KSPROPERTY), sizeof(KSQUALITY), (SetHandler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_QUALITY_ERROR(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_QUALITY_ERROR, (GetHandler), sizeof(KSPROPERTY), sizeof(KSERROR), (SetHandler), NULL, 0, NULL, NULL, 0)
*/

mixin DEFINE_GUID!("KSPROPSETID_Connection", "1D58C920-AC9B-11CF-A5D6-28DB04C10000");

enum {
	KSPROPERTY_CONNECTION_STATE,
	KSPROPERTY_CONNECTION_PRIORITY,
	KSPROPERTY_CONNECTION_DATAFORMAT,
	KSPROPERTY_CONNECTION_ALLOCATORFRAMING,
	KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT,
	KSPROPERTY_CONNECTION_ACQUIREORDERING,
	KSPROPERTY_CONNECTION_ALLOCATORFRAMING_EX,
	KSPROPERTY_CONNECTION_STARTAT
}
alias int KSPROPERTY_CONNECTION;

/*
DEFINE_KSPROPERTY_ITEM_CONNECTION_STATE(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CONNECTION_STATE, (GetHandler), sizeof(KSPROPERTY), sizeof(KSSTATE), (SetHandler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_CONNECTION_PRIORITY(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CONNECTION_PRIORITY, (GetHandler), sizeof(KSPROPERTY), sizeof(KSPRIORITY), (SetHandler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_CONNECTION_DATAFORMAT(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CONNECTION_DATAFORMAT, (GetHandler), sizeof(KSPROPERTY), 0, (SetHandler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_CONNECTION_ALLOCATORFRAMING(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CONNECTION_ALLOCATORFRAMING, (Handler), sizeof(KSPROPERTY), sizeof(KSALLOCATOR_FRAMING), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_CONNECTION_ALLOCATORFRAMING_EX(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CONNECTION_ALLOCATORFRAMING_EX, (Handler), sizeof(KSPROPERTY), 0, NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_CONNECTION_PROPOSEDATAFORMAT(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT, NULL, sizeof(KSPROPERTY), sizeof(KSDATAFORMAT), (Handler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_CONNECTION_ACQUIREORDERING(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CONNECTION_ACQUIREORDERING, (Handler), sizeof(KSPROPERTY), sizeof(int), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_CONNECTION_STARTAT(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CONNECTION_STARTAT, NULL, sizeof(KSPROPERTY), sizeof(KSRELATIVEEVENT), (Handler), NULL, 0, NULL, NULL, 0)
*/

mixin DEFINE_GUID!("KSPROPSETID_MemoryTransport", "0A3D1C5D-5243-4819-9ED0-AEE8044CEE2B");

enum {
	KSPROPERTY_MEMORY_TRANSPORT = 1
}

//DEFINE_KSPROPERTY_ITEM_MEMORY_TRANSPORT(SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MEMORY_TRANSPORT, NULL, sizeof(KSPROPERTY), sizeof(BOOL), (SetHandler), NULL, 0, NULL, NULL, 0)

enum {
	KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER = 0x00000001,
	KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY    = 0x00000002,
	KSALLOCATOR_REQUIREMENTF_FRAME_INTEGRITY  = 0x00000004,
	KSALLOCATOR_REQUIREMENTF_MUST_ALLOCATE    = 0x00000008,
	KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY = 0x80000000,
}

enum {
	KSALLOCATOR_OPTIONF_COMPATIBLE    = 0x00000001,
	KSALLOCATOR_OPTIONF_SYSTEM_MEMORY = 0x00000002,
	KSALLOCATOR_OPTIONF_VALID         = 0x00000003,
}

enum {
	KSALLOCATOR_FLAG_PARTIAL_READ_SUPPORT      = 0x00000010,
	KSALLOCATOR_FLAG_DEVICE_SPECIFIC           = 0x00000020,
	KSALLOCATOR_FLAG_CAN_ALLOCATE              = 0x00000040,
	KSALLOCATOR_FLAG_INSIST_ON_FRAMESIZE_RATIO = 0x00000080,
	KSALLOCATOR_FLAG_NO_FRAME_INTEGRITY        = 0x00000100,
	KSALLOCATOR_FLAG_MULTIPLE_OUTPUT           = 0x00000200,
	KSALLOCATOR_FLAG_CYCLE                     = 0x00000400,
	KSALLOCATOR_FLAG_ALLOCATOR_EXISTS          = 0x00000800,
	KSALLOCATOR_FLAG_INDEPENDENT_RANGES        = 0x00001000,
	KSALLOCATOR_FLAG_ATTENTION_STEPPING        = 0x00002000,
}

struct KSALLOCATOR_FRAMING {
	union {
		ULONG OptionsFlags;
		ULONG RequirementsFlags;
	}
	ULONG PoolType;
	ULONG Frames;
	ULONG FrameSize;
	ULONG FileAlignment;
	ULONG Reserved;
}
alias KSALLOCATOR_FRAMING* PKSALLOCATOR_FRAMING;

version(none){//_NTDDK_
	alias extern(Windows) PVOID function(PVOID Context) PFNKSDEFAULTALLOCATE;
	alias extern(Windows) VOID function(PVOID Context, PVOID Buffer) PFNKSDEFAULTFREE;
	alias extern(Windows) NTSTATUS function(PVOID InitialContext, PKSALLOCATOR_FRAMING AllocatorFraming, PVOID* Context) PFNKSINITIALIZEALLOCATOR;
	alias extern(Windows) VOID function(PVOID Context) PFNKSDELETEALLOCATOR;
}

struct KS_FRAMING_RANGE {
	ULONG MinFrameSize;
	ULONG MaxFrameSize;
	ULONG Stepping;
}
alias KS_FRAMING_RANGE* PKS_FRAMING_RANGE;

struct KS_FRAMING_RANGE_WEIGHTED {
	KS_FRAMING_RANGE Range;
	ULONG InPlaceWeight;
	ULONG NotInPlaceWeight;
}
alias KS_FRAMING_RANGE_WEIGHTED* PKS_FRAMING_RANGE_WEIGHTED;

struct KS_COMPRESSION {
	ULONG RatioNumerator;
	ULONG RatioDenominator;
	ULONG RatioConstantMargin;
}
alias KS_COMPRESSION* PKS_COMPRESSION;

struct KS_FRAMING_ITEM {
	GUID MemoryType;
	GUID BusType;
	ULONG MemoryFlags;
	ULONG BusFlags;
	ULONG Flags;
	ULONG Frames;
	ULONG FileAlignment;
	ULONG MemoryTypeWeight;
	KS_FRAMING_RANGE PhysicalRange;
	KS_FRAMING_RANGE_WEIGHTED FramingRange;
}
alias KS_FRAMING_ITEM* PKS_FRAMING_ITEM;

struct KSALLOCATOR_FRAMING_EX {
	ULONG CountItems;
	ULONG PinFlags;
	KS_COMPRESSION OutputCompression;
	ULONG PinWeight;
	KS_FRAMING_ITEM[1] FramingItem;
}
alias KSALLOCATOR_FRAMING_EX* PKSALLOCATOR_FRAMING_EX;

alias GUID_NULL KSMEMORY_TYPE_WILDCARD;
alias GUID_NULL KSMEMORY_TYPE_DONT_CARE;
alias GUID_NULL KS_TYPE_DONT_CARE;

mixin DEFINE_GUID!("KSMEMORY_TYPE_SYSTEM", "091bb638-603f-11d1-b067-00a0c9062802");
mixin DEFINE_GUID!("KSMEMORY_TYPE_USER", "8cb0fc28-7893-11d1-b069-00a0c9062802");
mixin DEFINE_GUID!("KSMEMORY_TYPE_KERNEL_PAGED", "d833f8f8-7894-11d1-b069-00a0c9062802");
mixin DEFINE_GUID!("KSMEMORY_TYPE_KERNEL_NONPAGED", "4a6d5fc4-7895-11d1-b069-00a0c9062802");
mixin DEFINE_GUID!("KSMEMORY_TYPE_DEVICE_UNKNOWN", "091bb639-603f-11d1-b067-00a0c9062802");

/*
DECLARE_SIMPLE_FRAMING_EX(FramingExName, MemoryType, Flags, Frames, Alignment, MinFrameSize, MaxFrameSize)  const KSALLOCATOR_FRAMING_EX FramingExName =  { 1,  0,  { 1,  1,  0  },  0,  { { MemoryType,  STATIC_KS_TYPE_DONT_CARE,  0,  0,  Flags,  Frames,  Alignment,  0,  { 0,  (ULONG)-1,  1  },  { { MinFrameSize,  MaxFrameSize,  1  },  0,  0  } } } }
SetDefaultKsCompression(KsCompressionPointer)  { KsCompressionPointer->RatioNumerator = 1; KsCompressionPointer->RatioDenominator = 1; KsCompressionPointer->RatioConstantMargin = 0; }
SetDontCareKsFramingRange(KsFramingRangePointer)  { KsFramingRangePointer->MinFrameSize = 0; KsFramingRangePointer->MaxFrameSize = (ULONG) -1; KsFramingRangePointer->Stepping = 1; }
SetKsFramingRange(KsFramingRangePointer, P_MinFrameSize, P_MaxFrameSize)  { KsFramingRangePointer->MinFrameSize = P_MinFrameSize; KsFramingRangePointer->MaxFrameSize = P_MaxFrameSize; KsFramingRangePointer->Stepping = 1; }
SetKsFramingRangeWeighted(KsFramingRangeWeightedPointer, P_MinFrameSize, P_MaxFrameSize)  { KS_FRAMING_RANGE *KsFramingRange = &KsFramingRangeWeightedPointer->Range; SetKsFramingRange(KsFramingRange, P_MinFrameSize, P_MaxFrameSize); KsFramingRangeWeightedPointer->InPlaceWeight = 0; KsFramingRangeWeightedPointer->NotInPlaceWeight = 0; }
INITIALIZE_SIMPLE_FRAMING_EX(FramingExPointer, P_MemoryType, P_Flags, P_Frames, P_Alignment, P_MinFrameSize, P_MaxFrameSize)  { KS_COMPRESSION *KsCompression = &FramingExPointer->OutputCompression; KS_FRAMING_RANGE *KsFramingRange = &FramingExPointer->FramingItem[0].PhysicalRange; KS_FRAMING_RANGE_WEIGHTED *KsFramingRangeWeighted = &FramingExPointer->FramingItem[0].FramingRange; FramingExPointer->CountItems = 1; FramingExPointer->PinFlags = 0; SetDefaultKsCompression(KsCompression); FramingExPointer->PinWeight = 0; FramingExPointer->FramingItem[0].MemoryType = P_MemoryType; FramingExPointer->FramingItem[0].BusType = KS_TYPE_DONT_CARE; FramingExPointer->FramingItem[0].MemoryFlags = 0; FramingExPointer->FramingItem[0].BusFlags = 0; FramingExPointer->FramingItem[0].Flags = P_Flags; FramingExPointer->FramingItem[0].Frames = P_Frames; FramingExPointer->FramingItem[0].FileAlignment = P_Alignment; FramingExPointer->FramingItem[0].MemoryTypeWeight = 0; SetDontCareKsFramingRange(KsFramingRange); SetKsFramingRangeWeighted(KsFramingRangeWeighted, P_MinFrameSize, P_MaxFrameSize); }
*/

mixin DEFINE_GUID!("KSEVENTSETID_StreamAllocator", "75d95571-073c-11d0-a161-0020afd156e4");

enum {
	KSEVENT_STREAMALLOCATOR_INTERNAL_FREEFRAME,
	KSEVENT_STREAMALLOCATOR_FREEFRAME
}
alias int KSEVENT_STREAMALLOCATOR;

mixin DEFINE_GUID!("KSMETHODSETID_StreamAllocator", "cf6e4341-ec87-11cf-a130-0020afd156e4");

enum {
	KSMETHOD_STREAMALLOCATOR_ALLOC,
	KSMETHOD_STREAMALLOCATOR_FREE
}
alias int KSMETHOD_STREAMALLOCATOR;

/*
DEFINE_KSMETHOD_ITEM_STREAMALLOCATOR_ALLOC(Handler) DEFINE_KSMETHOD_ITEM( KSMETHOD_STREAMALLOCATOR_ALLOC, KSMETHOD_TYPE_WRITE, (Handler), sizeof(KSMETHOD), sizeof(PVOID), NULL)
DEFINE_KSMETHOD_ITEM_STREAMALLOCATOR_FREE(Handler) DEFINE_KSMETHOD_ITEM( KSMETHOD_STREAMALLOCATOR_FREE, KSMETHOD_TYPE_READ, (Handler), sizeof(KSMETHOD), sizeof(PVOID), NULL)
DEFINE_KSMETHOD_ALLOCATORSET(AllocatorSet, MethodAlloc, MethodFree) DEFINE_KSMETHOD_TABLE(AllocatorSet) { DEFINE_KSMETHOD_ITEM_STREAMALLOCATOR_ALLOC(MethodAlloc), DEFINE_KSMETHOD_ITEM_STREAMALLOCATOR_FREE(MethodFree) }
*/

mixin DEFINE_GUID!("KSPROPSETID_StreamAllocator", "cf6e4342-ec87-11cf-a130-0020afd156e4");

version(none){//_NTDDK_
	enum {
		KSPROPERTY_STREAMALLOCATOR_FUNCTIONTABLE,
		KSPROPERTY_STREAMALLOCATOR_STATUS
	}
	alias int KSPROPERTY_STREAMALLOCATOR;

	/*
	DEFINE_KSPROPERTY_ITEM_STREAMALLOCATOR_FUNCTIONTABLE(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAMALLOCATOR_FUNCTIONTABLE, (Handler), sizeof(KSPROPERTY), sizeof(KSSTREAMALLOCATOR_FUNCTIONTABLE), NULL, NULL, 0, NULL, NULL, 0)
	DEFINE_KSPROPERTY_ITEM_STREAMALLOCATOR_STATUS(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAMALLOCATOR_STATUS, (Handler), sizeof(KSPROPERTY), sizeof(KSSTREAMALLOCATOR_STATUS), NULL, NULL, 0, NULL, NULL, 0)
	DEFINE_KSPROPERTY_ALLOCATORSET(AllocatorSet, PropFunctionTable, PropStatus) DEFINE_KSPROPERTY_TABLE(AllocatorSet) { DEFINE_KSPROPERTY_ITEM_STREAMALLOCATOR_STATUS(PropStatus), DEFINE_KSPROPERTY_ITEM_STREAMALLOCATOR_FUNCTIONTABLE(PropFunctionTable) }
	*/

	alias extern(Windows) NTSTATUS function(PFILE_OBJECT FileObject, PVOID* Frame) PFNALLOCATOR_ALLOCATEFRAME;
	alias extern(Windows) VOID function(PFILE_OBJECT FileObject, PVOID Frame) PFNALLOCATOR_FREEFRAME;

	struct KSSTREAMALLOCATOR_FUNCTIONTABLE {
		PFNALLOCATOR_ALLOCATEFRAME AllocateFrame;
		PFNALLOCATOR_FREEFRAME FreeFrame;
	}
	alias KSSTREAMALLOCATOR_FUNCTIONTABLE* PKSSTREAMALLOCATOR_FUNCTIONTABLE;
}

struct KSSTREAMALLOCATOR_STATUS {
	KSALLOCATOR_FRAMING Framing;
	ULONG AllocatedFrames;
	ULONG Reserved;
}
alias KSSTREAMALLOCATOR_STATUS* PKSSTREAMALLOCATOR_STATUS;

struct KSSTREAMALLOCATOR_STATUS_EX {
	KSALLOCATOR_FRAMING_EX Framing;
	ULONG AllocatedFrames;
	ULONG Reserved;
}
alias KSSTREAMALLOCATOR_STATUS_EX* PKSSTREAMALLOCATOR_STATUS_EX;

enum {
	KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT        = 0x00000001,
	KSSTREAM_HEADER_OPTIONSF_PREROLL            = 0x00000002,
	KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY  = 0x00000004,
	KSSTREAM_HEADER_OPTIONSF_TYPECHANGED        = 0x00000008,
	KSSTREAM_HEADER_OPTIONSF_TIMEVALID          = 0x00000010,
	KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY  = 0x00000040,
	KSSTREAM_HEADER_OPTIONSF_FLUSHONPAUSE       = 0x00000080,
	KSSTREAM_HEADER_OPTIONSF_DURATIONVALID      = 0x00000100,
	KSSTREAM_HEADER_OPTIONSF_ENDOFSTREAM        = 0x00000200,
	KSSTREAM_HEADER_OPTIONSF_BUFFEREDTRANSFER   = 0x00000400,
	KSSTREAM_HEADER_OPTIONSF_VRAM_DATA_TRANSFER = 0x00000800,
	KSSTREAM_HEADER_OPTIONSF_LOOPEDDATA         = 0x80000000,
}

struct KSTIME {
	LONGLONG Time;
	ULONG Numerator;
	ULONG Denominator;
}
alias KSTIME* PKSTIME;

struct KSSTREAM_HEADER {
	ULONG Size;
	ULONG TypeSpecificFlags;
	KSTIME PresentationTime;
	LONGLONG Duration;
	ULONG FrameExtent;
	ULONG DataUsed;
	PVOID Data;
	ULONG OptionsFlags;
	version(Win64)
		ULONG Reserved;
}
alias KSSTREAM_HEADER* PKSSTREAM_HEADER;

mixin DEFINE_GUID!("KSPROPSETID_StreamInterface", "1fdd8ee1-9cd3-11d0-82aa-0000f822fe8a");

enum {
	KSPROPERTY_STREAMINTERFACE_HEADERSIZE
}
alias int KSPROPERTY_STREAMINTERFACE;

/*
DEFINE_KSPROPERTY_ITEM_STREAMINTERFACE_HEADERSIZE( GetHandler ) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAMINTERFACE_HEADERSIZE, (GetHandler), sizeof(KSPROPERTY), sizeof(ULONG), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_STREAMINTERFACESET(StreamInterfaceSet, HeaderSizeHandler) DEFINE_KSPROPERTY_TABLE(StreamInterfaceSet) { DEFINE_KSPROPERTY_ITEM_STREAMINTERFACE_HEADERSIZE( HeaderSizeHandler ) }
*/

mixin DEFINE_GUID!("KSPROPSETID_Stream", "65aaba60-98ae-11cf-a10d-0020afd156e4");

enum {
	KSPROPERTY_STREAM_ALLOCATOR,
	KSPROPERTY_STREAM_QUALITY,
	KSPROPERTY_STREAM_DEGRADATION,
	KSPROPERTY_STREAM_MASTERCLOCK,
	KSPROPERTY_STREAM_TIMEFORMAT,
	KSPROPERTY_STREAM_PRESENTATIONTIME,
	KSPROPERTY_STREAM_PRESENTATIONEXTENT,
	KSPROPERTY_STREAM_FRAMETIME,
	KSPROPERTY_STREAM_RATECAPABILITY,
	KSPROPERTY_STREAM_RATE,
	KSPROPERTY_STREAM_PIPE_ID
}
alias int KSPROPERTY_STREAM;

/*
DEFINE_KSPROPERTY_ITEM_STREAM_ALLOCATOR(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAM_ALLOCATOR, (GetHandler), sizeof(KSPROPERTY), sizeof(HANDLE), (SetHandler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_STREAM_QUALITY(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAM_QUALITY, (Handler), sizeof(KSPROPERTY), sizeof(KSQUALITY_MANAGER), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_STREAM_DEGRADATION(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAM_DEGRADATION, (GetHandler), sizeof(KSPROPERTY), 0, (SetHandler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_STREAM_MASTERCLOCK(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAM_MASTERCLOCK, (GetHandler), sizeof(KSPROPERTY), sizeof(HANDLE), (SetHandler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_STREAM_TIMEFORMAT(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAM_TIMEFORMAT, (Handler), sizeof(KSPROPERTY), sizeof(GUID), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_STREAM_PRESENTATIONTIME(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAM_PRESENTATIONTIME, (GetHandler), sizeof(KSPROPERTY), sizeof(KSTIME), (SetHandler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_STREAM_PRESENTATIONEXTENT(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAM_PRESENTATIONEXTENT, (Handler), sizeof(KSPROPERTY), sizeof(LONGLONG), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_STREAM_FRAMETIME(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAM_FRAMETIME, (Handler), sizeof(KSPROPERTY), sizeof(KSFRAMETIME), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_STREAM_RATECAPABILITY(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAM_RATECAPABILITY, (Handler), sizeof(KSRATE_CAPABILITY), sizeof(KSRATE), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_STREAM_RATE(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAM_RATE, (GetHandler), sizeof(KSPROPERTY), sizeof(KSRATE), (SetHandler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_STREAM_PIPE_ID(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_STREAM_PIPE_ID, (GetHandler), sizeof(KSPROPERTY), sizeof(HANDLE), (SetHandler), NULL, 0, NULL, NULL, 0)
*/

struct KSQUALITY_MANAGER {
	HANDLE QualityManager;
	PVOID Context;
}
alias KSQUALITY_MANAGER* PKSQUALITY_MANAGER;

struct KSFRAMETIME {
	LONGLONG Duration;
	ULONG FrameFlags;
	ULONG Reserved;
}
alias KSFRAMETIME* PKSFRAMETIME;

enum KSFRAMETIME_VARIABLESIZE = 0x00000001;

struct KSRATE {
	LONGLONG PresentationStart;
	LONGLONG Duration;
	KSPIN_INTERFACE Interface;
	LONG Rate;
	ULONG Flags;
}
alias KSRATE* PKSRATE;

enum {
	KSRATE_NOPRESENTATIONSTART    = 0x00000001,
	KSRATE_NOPRESENTATIONDURATION = 0x00000002,
}

struct KSRATE_CAPABILITY {
	KSPROPERTY Property;
	KSRATE Rate;
}
alias KSRATE_CAPABILITY* PKSRATE_CAPABILITY;

mixin DEFINE_GUID!("KSPROPSETID_Clock", "DF12A4C0-AC17-11CF-A5D6-28DB04C10000");

//NANOSECONDS 10000000
//KSCONVERT_PERFORMANCE_TIME(Frequency, PerformanceTime)  ((((ULONGLONG)(ULONG)(PerformanceTime).HighPart * NANOSECONDS / (Frequency)) << 32) +  ((((((ULONGLONG)(ULONG)(PerformanceTime).HighPart * NANOSECONDS) % (Frequency)) << 32) +  ((ULONGLONG)(PerformanceTime).LowPart * NANOSECONDS)) / (Frequency)))

struct KSCLOCK_CREATE {
	ULONG CreateFlags;
}
alias KSCLOCK_CREATE* PKSCLOCK_CREATE;

struct KSCORRELATED_TIME {
	LONGLONG Time;
	LONGLONG SystemTime;
}
alias KSCORRELATED_TIME* PKSCORRELATED_TIME;

struct KSRESOLUTION {
	LONGLONG Granularity;
	LONGLONG Error;
}
alias KSRESOLUTION* PKSRESOLUTION;

enum {
	KSPROPERTY_CLOCK_TIME,
	KSPROPERTY_CLOCK_PHYSICALTIME,
	KSPROPERTY_CLOCK_CORRELATEDTIME,
	KSPROPERTY_CLOCK_CORRELATEDPHYSICALTIME,
	KSPROPERTY_CLOCK_RESOLUTION,
	KSPROPERTY_CLOCK_STATE,
	KSPROPERTY_CLOCK_FUNCTIONTABLE
}
alias int KSPROPERTY_CLOCK;

version(none){//_NTDDK_
	alias extern(Windows) LONGLONG function(PFILE_OBJECT FileObject) PFNKSCLOCK_GETTIME;
	alias extern(Windows) LONGLONG function(PFILE_OBJECT FileObject, PLONGLONG SystemTime) PFNKSCLOCK_CORRELATEDTIME;

	struct KSCLOCK_FUNCTIONTABLE {
		PFNKSCLOCK_GETTIME GetTime;
		PFNKSCLOCK_GETTIME GetPhysicalTime;
		PFNKSCLOCK_CORRELATEDTIME GetCorrelatedTime;
		PFNKSCLOCK_CORRELATEDTIME GetCorrelatedPhysicalTime;
	}
	alias KSCLOCK_FUNCTIONTABLE* PKSCLOCK_FUNCTIONTABLE;

	//(NTDDI_VERSION >= NTDDI_WINXP)
		alias extern(Windows) BOOLEAN function(PVOID Context, PKTIMER Timer, LARGE_INTEGER DueTime, PKDPC Dpc) PFNKSSETTIMER;
		alias extern(Windows) BOOLEAN function(PVOID Context, PKTIMER Timer) PFNKSCANCELTIMER;
		alias extern(Windows) LONGLONG function(PVOID Context, PLONGLONG SystemTime) PFNKSCORRELATEDTIME;

	alias PVOID PKSDEFAULTCLOCK;

	/*
	DEFINE_KSPROPERTY_ITEM_CLOCK_TIME(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CLOCK_TIME, (Handler), sizeof(KSPROPERTY), sizeof(LONGLONG), NULL, NULL, 0, NULL, NULL, 0)
	DEFINE_KSPROPERTY_ITEM_CLOCK_PHYSICALTIME(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CLOCK_PHYSICALTIME, (Handler), sizeof(KSPROPERTY), sizeof(LONGLONG), NULL, NULL, 0, NULL, NULL, 0)
	DEFINE_KSPROPERTY_ITEM_CLOCK_CORRELATEDTIME(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CLOCK_CORRELATEDTIME, (Handler), sizeof(KSPROPERTY), sizeof(KSCORRELATED_TIME), NULL, NULL, 0, NULL, NULL, 0)
	DEFINE_KSPROPERTY_ITEM_CLOCK_CORRELATEDPHYSICALTIME(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CLOCK_CORRELATEDPHYSICALTIME, (Handler), sizeof(KSPROPERTY), sizeof(KSCORRELATED_TIME), NULL, NULL, 0, NULL, NULL, 0)
	DEFINE_KSPROPERTY_ITEM_CLOCK_RESOLUTION(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CLOCK_RESOLUTION, (Handler), sizeof(KSPROPERTY), sizeof(KSRESOLUTION), NULL, NULL, 0, NULL, NULL, 0)
	DEFINE_KSPROPERTY_ITEM_CLOCK_STATE(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CLOCK_STATE, (Handler), sizeof(KSPROPERTY), sizeof(KSSTATE), NULL, NULL, 0, NULL, NULL, 0)
	DEFINE_KSPROPERTY_ITEM_CLOCK_FUNCTIONTABLE(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CLOCK_FUNCTIONTABLE, (Handler), sizeof(KSPROPERTY), sizeof(KSCLOCK_FUNCTIONTABLE), NULL, NULL, 0, NULL, NULL, 0)
	DEFINE_KSPROPERTY_CLOCKSET(ClockSet, PropTime, PropPhysicalTime, PropCorrelatedTime, PropCorrelatedPhysicalTime, PropResolution, PropState, PropFunctionTable) DEFINE_KSPROPERTY_TABLE(ClockSet) { DEFINE_KSPROPERTY_ITEM_CLOCK_TIME(PropTime), DEFINE_KSPROPERTY_ITEM_CLOCK_PHYSICALTIME(PropPhysicalTime), DEFINE_KSPROPERTY_ITEM_CLOCK_CORRELATEDTIME(PropCorrelatedTime), DEFINE_KSPROPERTY_ITEM_CLOCK_CORRELATEDPHYSICALTIME(PropCorrelatedPhysicalTime), DEFINE_KSPROPERTY_ITEM_CLOCK_RESOLUTION(PropResolution), DEFINE_KSPROPERTY_ITEM_CLOCK_STATE(PropState), DEFINE_KSPROPERTY_ITEM_CLOCK_FUNCTIONTABLE(PropFunctionTable) }
	*/
}

mixin DEFINE_GUID!("KSEVENTSETID_Clock", "364D8E20-62C7-11CF-A5D6-28DB04C10000");

enum {
	KSEVENT_CLOCK_INTERVAL_MARK,
	KSEVENT_CLOCK_POSITION_MARK
}
alias int KSEVENT_CLOCK_POSITION;

mixin DEFINE_GUID!("KSEVENTSETID_Connection", "7f4bcbe0-9ea5-11cf-a5d6-28db04c10000");

enum {
	KSEVENT_CONNECTION_POSITIONUPDATE,
	KSEVENT_CONNECTION_DATADISCONTINUITY,
	KSEVENT_CONNECTION_TIMEDISCONTINUITY,
	KSEVENT_CONNECTION_PRIORITY,
	KSEVENT_CONNECTION_ENDOFSTREAM
}
alias int KSEVENT_CONNECTION;

struct KSQUALITY {
	PVOID Context;
	ULONG Proportion;
	LONGLONG DeltaTime;
}
alias KSQUALITY* PKSQUALITY;

struct KSERROR {
	PVOID Context;
	ULONG Status;
}
alias KSERROR* PKSERROR;

alias KSIDENTIFIER KSDEGRADE;
alias KSDEGRADE* PKSDEGRADE;

mixin DEFINE_GUID!("KSDEGRADESETID_Standard", "9F564180-704C-11D0-A5D6-28DB04C10000");

enum {
	KSDEGRADE_STANDARD_SAMPLE,
	KSDEGRADE_STANDARD_QUALITY,
	KSDEGRADE_STANDARD_COMPUTATION,
	KSDEGRADE_STANDARD_SKIP
}
alias int KSDEGRADE_STANDARD;

version(none){//_NTDDK_
	enum {
		KSPROBE_STREAMREAD        = 0x00000000,
		KSPROBE_STREAMWRITE       = 0x00000001,
		KSPROBE_ALLOCATEMDL       = 0x00000010,
		KSPROBE_PROBEANDLOCK      = 0x00000020,
		KSPROBE_SYSTEMADDRESS     = 0x00000040,
		KSPROBE_MODIFY            = 0x00000200,
		KSPROBE_STREAMWRITEMODIFY = KSPROBE_MODIFY | KSPROBE_STREAMWRITE,
		KSPROBE_ALLOWFORMATCHANGE = 0x00000080,
	}

	enum {
		KSSTREAM_READ             = KSPROBE_STREAMREAD,
		KSSTREAM_WRITE            = KSPROBE_STREAMWRITE,
		KSSTREAM_PAGED_DATA       = 0x00000000,
		KSSTREAM_NONPAGED_DATA    = 0x00000100,
		KSSTREAM_SYNCHRONOUS      = 0x00001000,
		KSSTREAM_FAILUREEXCEPTION = 0x00002000,
	}

	alias extern(Windows) NTSTATUS function(PVOID Context, PIRP Irp) PFNKSCONTEXT_DISPATCH;
	alias extern(Windows) NTSTATUS function(PIRP Irp, PKSIDENTIFIER Request, PVOID Data) PFNKSHANDLER;
	alias extern(Windows) BOOLEAN function(PFILE_OBJECT FileObject, PKSIDENTIFIER Request, ULONG RequestLength, PVOID Data, ULONG DataLength, PIO_STATUS_BLOCK IoStatus) PFNKSFASTHANDLER;
	alias extern(Windows) NTSTATUS function(PIRP Irp, ULONG BufferSize, BOOLEAN InputOperation) PFNKSALLOCATOR;

	struct KSPROPERTY_MEMBERSLIST {
		KSPROPERTY_MEMBERSHEADER MembersHeader;
		const(VOID)* Members;
	}
	alias KSPROPERTY_MEMBERSLIST* PKSPROPERTY_MEMBERSLIST;

	struct KSPROPERTY_VALUES {
		KSIDENTIFIER PropTypeSet;
		ULONG MembersListCount;
		const(KSPROPERTY_MEMBERSLIST)* MembersList;
	}
	alias KSPROPERTY_VALUES* PKSPROPERTY_VALUES;

	//DEFINE_KSPROPERTY_TABLE(tablename) const KSPROPERTY_ITEM tablename[] =
	//DEFINE_KSPROPERTY_ITEM(PropertyId, GetHandler, MinProperty, MinData, SetHandler, Values, RelationsCount, Relations, SupportHandler, SerializedSize) { PropertyId, (PFNKSHANDLER)GetHandler, MinProperty, MinData, (PFNKSHANDLER)SetHandler, (PKSPROPERTY_VALUES)Values, RelationsCount, (PKSPROPERTY)Relations, (PFNKSHANDLER)SupportHandler, (ULONG)SerializedSize }

	struct KSPROPERTY_ITEM {
		ULONG PropertyId;
		union {
			PFNKSHANDLER GetPropertyHandler;
			BOOLEAN GetSupported;
		}
		ULONG MinProperty;
		ULONG MinData;
		union {
			PFNKSHANDLER SetPropertyHandler;
			BOOLEAN SetSupported;
		}
		const(KSPROPERTY_VALUES)* Values;
		ULONG RelationsCount;
		const(KSPROPERTY)* Relations;
		PFNKSHANDLER SupportHandler;
		ULONG SerializedSize;
	}
	alias KSPROPERTY_ITEM* PKSPROPERTY_ITEM;

	//DEFINE_KSFASTPROPERTY_ITEM(PropertyId, GetHandler, SetHandler) { PropertyId, (PFNKSFASTHANDLER)GetHandler, (PFNKSFASTHANDLER)SetHandler, 0 }

	struct KSFASTPROPERTY_ITEM {
		ULONG PropertyId;
		union {
			PFNKSFASTHANDLER GetPropertyHandler;
			BOOLEAN GetSupported;
		}
		union {
			PFNKSFASTHANDLER SetPropertyHandler;
			BOOLEAN SetSupported;
		}
		ULONG Reserved;
	}
	alias KSFASTPROPERTY_ITEM* PKSFASTPROPERTY_ITEM;

	//DEFINE_KSPROPERTY_SET(Set, PropertiesCount, PropertyItem, FastIoCount, FastIoTable) { Set, PropertiesCount, PropertyItem, FastIoCount, FastIoTable }
	//DEFINE_KSPROPERTY_SET_TABLE(tablename) const KSPROPERTY_SET tablename[] =

	struct KSPROPERTY_SET {
		const(GUID)* Set;
		ULONG PropertiesCount;
		const(KSPROPERTY_ITEM)* PropertyItem;
		ULONG FastIoCount;
		const(KSFASTPROPERTY_ITEM)* FastIoTable;
	}
	alias KSPROPERTY_SET* PKSPROPERTY_SET;

	//DEFINE_KSMETHOD_TABLE(tablename) const KSMETHOD_ITEM tablename[] =
	//DEFINE_KSMETHOD_ITEM(MethodId, Flags, MethodHandler, MinMethod, MinData, SupportHandler) { MethodId, (PFNKSHANDLER)MethodHandler, MinMethod, MinData, SupportHandler, Flags }

	struct KSMETHOD_ITEM {
		ULONG MethodId;
		union {
			PFNKSHANDLER MethodHandler;
			BOOLEAN MethodSupported;
		}
		ULONG MinMethod;
		ULONG MinData;
		PFNKSHANDLER SupportHandler;
		ULONG Flags;
	}
	alias KSMETHOD_ITEM* PKSMETHOD_ITEM;

	//DEFINE_KSFASTMETHOD_ITEM(MethodId, MethodHandler) { MethodId, (PFNKSFASTHANDLER)MethodHandler }

	struct KSFASTMETHOD_ITEM {
		ULONG MethodId;
		union {
			PFNKSFASTHANDLER MethodHandler;
			BOOLEAN MethodSupported;
		}
	}
	alias KSFASTMETHOD_ITEM* PKSFASTMETHOD_ITEM;

	//DEFINE_KSMETHOD_SET(Set, MethodsCount, MethodItem, FastIoCount, FastIoTable) { Set, MethodsCount, MethodItem, FastIoCount, FastIoTable }
	//DEFINE_KSMETHOD_SET_TABLE(tablename) const KSMETHOD_SET tablename[] =

	struct KSMETHOD_SET {
		const(GUID)* Set;
		ULONG MethodsCount;
		const(KSMETHOD_ITEM)* MethodItem;
		ULONG FastIoCount;
		const(KSFASTMETHOD_ITEM)* FastIoTable;
	}
	alias KSMETHOD_SET* PKSMETHOD_SET;

	//struct KSEVENT_ENTRY;
	//alias KSEVENT_ENTRY* PKSEVENT_ENTRY;

	alias extern(Windows) NTSTATUS function(PIRP Irp, PKSEVENTDATA EventData, KSEVENT_ENTRY* EventEntry) PFNKSADDEVENT;
	alias extern(Windows) VOID function(PFILE_OBJECT FileObject, KSEVENT_ENTRY* EventEntry) PFNKSREMOVEEVENT;

	//DEFINE_KSEVENT_TABLE(tablename) const KSEVENT_ITEM tablename[] =
	//DEFINE_KSEVENT_ITEM(EventId, DataInput, ExtraEntryData, AddHandler, RemoveHandler, SupportHandler) { EventId, DataInput, ExtraEntryData, AddHandler, RemoveHandler, SupportHandler }

	struct KSEVENT_ITEM {
		ULONG EventId;
		ULONG DataInput;
		ULONG ExtraEntryData;
		PFNKSADDEVENT AddHandler;
		PFNKSREMOVEEVENT RemoveHandler;
		PFNKSHANDLER SupportHandler;
	}
	alias KSEVENT_ITEM* PKSEVENT_ITEM;

	//DEFINE_KSEVENT_SET(Set, EventsCount, EventItem) { Set, EventsCount, EventItem }
	//DEFINE_KSEVENT_SET_TABLE(tablename) const KSEVENT_SET tablename[] =

	struct KSEVENT_SET {
		const(GUID)* Set;
		ULONG EventsCount;
		const(KSEVENT_ITEM)* EventItem;
	}
	alias KSEVENT_SET* PKSEVENT_SET;

	struct KSDPC_ITEM {
		KDPC Dpc;
		ULONG ReferenceCount;
		KSPIN_LOCK AccessLock;
	}
	alias KSDPC_ITEM* PKSDPC_ITEM;

	struct KSBUFFER_ITEM {
		KSDPC_ITEM DpcItem;
		LIST_ENTRY BufferList;
	}
	alias KSBUFFER_ITEM* PKSBUFFER_ITEM;

	enum {
		KSEVENT_ENTRY_DELETED  = 1,
		KSEVENT_ENTRY_ONESHOT  = 2,
		KSEVENT_ENTRY_BUFFERED = 4,
	}

	struct KSEVENT_ENTRY {
		LIST_ENTRY ListEntry;
		PVOID Object;
		union {
			PKSDPC_ITEM DpcItem;
			PKSBUFFER_ITEM BufferItem;
		}
		PKSEVENTDATA EventData;
		ULONG NotificationType;
		const(KSEVENT_SET)* EventSet;
		const(KSEVENT_ITEM)* EventItem;
		PFILE_OBJECT FileObject;
		ULONG SemaphoreAdjustment;
		ULONG Reserved;
		ULONG Flags;
	}
	alias KSEVENT_ENTRY* PKSEVENT_ENTRY;

	enum {
		KSEVENTS_NONE,
		KSEVENTS_SPINLOCK,
		KSEVENTS_MUTEX,
		KSEVENTS_FMUTEX,
		KSEVENTS_FMUTEXUNSAFE,
		KSEVENTS_INTERRUPT,
		KSEVENTS_ERESOURCE
	}
	alias int KSEVENTS_LOCKTYPE;

	enum KSDISPATCH_FASTIO = 0x80000000;

	struct KSOBJECT_CREATE_ITEM {
		PDRIVER_DISPATCH Create;
		PVOID Context;
		UNICODE_STRING ObjectClass;
		PSECURITY_DESCRIPTOR SecurityDescriptor;
		ULONG Flags;
	}
	alias KSOBJECT_CREATE_ITEM* PKSOBJECT_CREATE_ITEM;

	alias extern(Windows) VOID function(PKSOBJECT_CREATE_ITEM CreateItem) PFNKSITEMFREECALLBACK;

	enum {
		KSCREATE_ITEM_SECURITYCHANGED = 0x00000001,
		KSCREATE_ITEM_WILDCARD        = 0x00000002,
		KSCREATE_ITEM_NOPARAMETERS    = 0x00000004,
		KSCREATE_ITEM_FREEONSTOP      = 0x00000008,
	}

	/*
	DEFINE_KSCREATE_DISPATCH_TABLE( tablename ) KSOBJECT_CREATE_ITEM tablename[] =
	DEFINE_KSCREATE_ITEM(DispatchCreate, TypeName, Context) { (DispatchCreate), (PVOID)(Context), { sizeof(TypeName) - sizeof(UNICODE_NULL), sizeof(TypeName), (PWCHAR)(TypeName) }, NULL, 0 }
	DEFINE_KSCREATE_ITEMEX(DispatchCreate, TypeName, Context, Flags) { (DispatchCreate), (PVOID)(Context), { sizeof(TypeName) - sizeof(UNICODE_NULL), sizeof(TypeName), (PWCHAR)(TypeName) }, NULL, (Flags) }
	DEFINE_KSCREATE_ITEMNULL( DispatchCreate, Context ) { DispatchCreate, Context, { 0, 0, NULL, }, NULL, 0 }
	*/

	struct KSOBJECT_CREATE {
		ULONG CreateItemsCount;
		PKSOBJECT_CREATE_ITEM CreateItemsList;
	}
	alias KSOBJECT_CREATE* PKSOBJECT_CREATE;

	struct KSDISPATCH_TABLE {
		PDRIVER_DISPATCH DeviceIoControl;
		PDRIVER_DISPATCH Read;
		PDRIVER_DISPATCH Write;
		PDRIVER_DISPATCH Flush;
		PDRIVER_DISPATCH Close;
		PDRIVER_DISPATCH QuerySecurity;
		PDRIVER_DISPATCH SetSecurity;
		PFAST_IO_DEVICE_CONTROL FastDeviceIoControl;
		PFAST_IO_READ FastRead;
		PFAST_IO_WRITE FastWrite;
	}
	alias KSDISPATCH_TABLE* PKSDISPATCH_TABLE;

	//DEFINE_KSDISPATCH_TABLE( tablename, DeviceIoControl, Read, Write, Flush, Close, QuerySecurity, SetSecurity, FastDeviceIoControl, FastRead, FastWrite ) const KSDISPATCH_TABLE tablename =  { DeviceIoControl,  Read,  Write,  Flush,  Close,  QuerySecurity,  SetSecurity,  FastDeviceIoControl,  FastRead,  FastWrite,  }
	/*
	KSCREATE_ITEM_IRP_STORAGE(Irp) (*(PKSOBJECT_CREATE_ITEM*)&(Irp)->Tail.Overlay.DriverContext[0])
	KSEVENT_SET_IRP_STORAGE(Irp) (*(const KSEVENT_SET**)&(Irp)->Tail.Overlay.DriverContext[0])
	KSEVENT_ITEM_IRP_STORAGE(Irp) (*(const KSEVENT_ITEM**)&(Irp)->Tail.Overlay.DriverContext[3])
	KSEVENT_ENTRY_IRP_STORAGE(Irp) (*(PKSEVENT_ENTRY*)&(Irp)->Tail.Overlay.DriverContext[0])
	KSMETHOD_SET_IRP_STORAGE(Irp) (*(const KSMETHOD_SET**)&(Irp)->Tail.Overlay.DriverContext[0])
	KSMETHOD_ITEM_IRP_STORAGE(Irp) (*(const KSMETHOD_ITEM**)&(Irp)->Tail.Overlay.DriverContext[3])
	KSMETHOD_TYPE_IRP_STORAGE(Irp) (*(ULONG_PTR*)(&(Irp)->Tail.Overlay.DriverContext[2]))
	KSQUEUE_SPINLOCK_IRP_STORAGE(Irp) (*(PKSPIN_LOCK*)&(Irp)->Tail.Overlay.DriverContext[1])
	KSPROPERTY_SET_IRP_STORAGE(Irp) (*(const KSPROPERTY_SET**)&(Irp)->Tail.Overlay.DriverContext[0])
	KSPROPERTY_ITEM_IRP_STORAGE(Irp) (*(const KSPROPERTY_ITEM**)&(Irp)->Tail.Overlay.DriverContext[3])
	KSPROPERTY_ATTRIBUTES_IRP_STORAGE(Irp) (*(PKSATTRIBUTE_LIST*)&(Irp)->Tail.Overlay.DriverContext[2])
	*/

	enum KSDEVICE_HEADER : PVOID {init = (PVOID).init}
	enum KSOBJECT_HEADER : PVOID {init = (PVOID).init}

	enum {
		KsInvokeOnSuccess  = 1,
		KsInvokeOnError    = 2,
		KsInvokeOnCancel   = 4
	}
	alias int KSCOMPLETION_INVOCATION;

	enum {
		KsListEntryTail,
		KsListEntryHead
	}
	alias int KSLIST_ENTRY_LOCATION;

	enum {
		KsAcquireOnly,
		KsAcquireAndRemove,
		KsAcquireOnlySingleItem,
		KsAcquireAndRemoveOnlySingleItem
	}
	alias int KSIRP_REMOVAL_OPERATION;

	enum {
		KsStackCopyToNewLocation,
		KsStackReuseCurrentLocation,
		KsStackUseNewLocation
	}
	alias int KSSTACK_USE;

	enum {
		KSTARGET_STATE_DISABLED,
		KSTARGET_STATE_ENABLED
	}
	alias int KSTARGET_STATE;

	alias extern(Windows) NTSTATUS function(PIRP Irp, PVOID Context) PFNKSIRPLISTCALLBACK;

	alias extern(Windows) VOID function(PVOID Context) PFNREFERENCEDEVICEOBJECT;
	alias extern(Windows) VOID function(PVOID Context) PFNDEREFERENCEDEVICEOBJECT;
	alias extern(Windows) NTSTATUS function(PVOID Context, PWCHAR* String) PFNQUERYREFERENCESTRING;

	enum BUS_INTERFACE_REFERENCE_VERSION = 0x100;

	struct BUS_INTERFACE_REFERENCE {
		INTERFACE Interface;
		PFNREFERENCEDEVICEOBJECT ReferenceDeviceObject;
		PFNDEREFERENCEDEVICEOBJECT DereferenceDeviceObject;
		PFNQUERYREFERENCESTRING QueryReferenceString;
	}
	alias BUS_INTERFACE_REFERENCE* PBUS_INTERFACE_REFERENCE;

	//STATIC_REFERENCE_BUS_INTERFACE STATIC_KSMEDIUMSETID_Standard
	//REFERENCE_BUS_INTERFACE KSMEDIUMSETID_Standard


	alias extern(Windows) NTSTATUS function(PVOID Context, ULONG* MediumsCount, PKSPIN_MEDIUM* MediumList) PFNQUERYMEDIUMSLIST;

	struct BUS_INTERFACE_MEDIUMS {
		INTERFACE Interface;
		PFNQUERYMEDIUMSLIST QueryMediumsList;
	}
	alias BUS_INTERFACE_MEDIUMS* PBUS_INTERFACE_MEDIUMS;

	mixin DEFINE_GUID!("GUID_BUS_INTERFACE_MEDIUMS", "4EC35C3E-201B-11D2-8745-00A0C9223196");
}

align(1)
struct KSPROPERTY_SERIALHDR {
	GUID PropertySet;
	ULONG Count;
}
alias KSPROPERTY_SERIALHDR* PKSPROPERTY_SERIALHDR;

struct KSPROPERTY_SERIAL {
	KSIDENTIFIER PropTypeSet;
	ULONG Id;
	ULONG PropertyLength;
}
alias KSPROPERTY_SERIAL* PKSPROPERTY_SERIAL;

//(NTDDI_VERSION >= NTDDI_WINXP)
	version(none){//_NTDDK_
		//IOCTL_KS_HANDSHAKE CTL_CODE(FILE_DEVICE_KS, 0x007, METHOD_NEITHER, FILE_ANY_ACCESS)
		struct KSHANDSHAKE {
			GUID ProtocolId;
			PVOID Argument1;
			PVOID Argument2;
		}
		alias KSHANDSHAKE* PKSHANDSHAKE;

		struct KSGATE {
			LONG Count;
			PKSGATE NextGate;
		}
		alias KSGATE* PKSGATE;

		void KsGateTurnInputOn(PKSGATE Gate)
		{
			while(Gate && (InterlockedIncrement(&Gate.Count) == 1)){
				Gate = Gate.NextGate;
			}
		}

		void KsGateTurnInputOff(PKSGATE Gate)
		{
			while(Gate && (InterlockedDecrement(&Gate.Count) == 0)){
				Gate = Gate.NextGate;
			}
		}

		BOOLEAN KsGateGetStateUnsafe(PKSGATE Gate)
		{
			assert(Gate);
			return cast(BOOLEAN)(Gate.Count > 0);
		}

		BOOLEAN KsGateCaptureThreshold(PKSGATE Gate)
		{
			BOOLEAN captured;

			assert(Gate);
			captured = cast(BOOLEAN)(InterlockedCompareExchange(&Gate.Count, 0, 1) == 1);
			if(captured){
				KsGateTurnInputOff(Gate.NextGate);
			}
			return captured;
		}

		void KsGateInitialize(PKSGATE Gate, LONG InitialCount, PKSGATE NextGate, BOOLEAN StateToPropagate)
		{
			assert(Gate);
			Gate.Count = InitialCount;
			Gate.NextGate = NextGate;

			if (NextGate) {
				if (InitialCount > 0) {
					if (StateToPropagate) {
						KsGateTurnInputOn(NextGate);
					}
				} else {
					if (! StateToPropagate) {
						KsGateTurnInputOff(NextGate);
					}
				}
			}
		}

		void KsGateInitializeAnd(PKSGATE AndGate, PKSGATE NextOrGate)
		{
			KsGateInitialize(AndGate, 1, NextOrGate, TRUE);
		}

		
		void  KsGateInitializeOr(PKSGATE OrGate, PKSGATE NextAndGate)
		{
			KsGateInitialize(OrGate,0,NextAndGate,FALSE);
		}

		void KsGateAddOnInputToAnd(PKSGATE AndGate)
		{
		}

		void  KsGateAddOffInputToAnd(PKSGATE AndGate)
		{
			KsGateTurnInputOff(AndGate);
		}

		void  KsGateRemoveOnInputFromAnd(PKSGATE AndGate)
		{
		}

		void  KsGateRemoveOffInputFromAnd(PKSGATE AndGate)
		{
			KsGateTurnInputOn(AndGate);
		}

		void KsGateAddOnInputToOr(PKSGATE OrGate)
		{
			KsGateTurnInputOn(OrGate);
		}

		void KsGateAddOffInputToOr(PKSGATE OrGate)
		{
		}

		void KsGateRemoveOnInputFromOr(PKSGATE OrGate)
		{
			KsGateTurnInputOff(OrGate);
		}

		void KsGateRemoveOffInputFromOr(PKSGATE OrGate)
		{
		}

		void KsGateTerminateAnd(PKSGATE AndGate)
		{
			assert(AndGate);
			if(KsGateGetStateUnsafe(AndGate))
				KsGateRemoveOnInputFromOr(AndGate.NextGate);
			else
				KsGateRemoveOffInputFromOr(AndGate.NextGate);
		}

		void KsGateTerminateOr(PKSGATE OrGate)
		{
			assert(OrGate);
			if(KsGateGetStateUnsafe(OrGate))
				KsGateRemoveOnInputFromAnd(OrGate.NextGate);
			else
				KsGateRemoveOffInputFromAnd(OrGate.NextGate);
		}

		alias PVOID KSOBJECT_BAG;

		alias extern(Windows) BOOLEAN function(PVOID Context, PKSEVENT_ENTRY EventEntry) PFNKSGENERATEEVENTCALLBACK;
		alias extern(Windows) NTSTATUS function(PKSDEVICE Device) PFNKSDEVICECREATE;
		alias extern(Windows) NTSTATUS function(PKSDEVICE Device, PIRP Irp, PCM_RESOURCE_LIST TranslatedResourceList, PCM_RESOURCE_LIST UntranslatedResourceList) PFNKSDEVICEPNPSTART;
		alias extern(Windows) NTSTATUS function(PKSDEVICE Device) PFNKSDEVICE;
		alias extern(Windows) NTSTATUS function(PKSDEVICE Device, PIRP Irp) PFNKSDEVICEIRP;
		alias extern(Windows) void function(PKSDEVICE Device, PIRP Irp) PFNKSDEVICEIRPVOID;
		alias extern(Windows) NTSTATUS function(PKSDEVICE Device, PIRP Irp, PDEVICE_CAPABILITIES Capabilities) PFNKSDEVICEQUERYCAPABILITIES;
		alias extern(Windows) NTSTATUS function(PKSDEVICE Device, PIRP Irp, DEVICE_POWER_STATE DeviceTo, DEVICE_POWER_STATE DeviceFrom, SYSTEM_POWER_STATE SystemTo, SYSTEM_POWER_STATE SystemFrom, POWER_ACTION Action) PFNKSDEVICEQUERYPOWER;
		alias extern(Windows) void function(PKSDEVICE Device, PIRP Irp, DEVICE_POWER_STATE To, DEVICE_POWER_STATE From) PFNKSDEVICESETPOWER;
		alias extern(Windows) NTSTATUS function(PKSFILTERFACTORY FilterFactory) PFNKSFILTERFACTORYVOID;
		alias extern(Windows) void function(PKSFILTERFACTORY FilterFactory, DEVICE_POWER_STATE State) PFNKSFILTERFACTORYPOWER;
		alias extern(Windows) NTSTATUS function(PKSFILTER Filter, PIRP Irp) PFNKSFILTERIRP;
		alias extern(Windows) NTSTATUS function(PKSFILTER Filter, PKSPROCESSPIN_INDEXENTRY Index) PFNKSFILTERPROCESS;
		alias extern(Windows) NTSTATUS function(PKSFILTER Filter) PFNKSFILTERVOID;
		alias extern(Windows) void function(PKSFILTER Filter, DEVICE_POWER_STATE State) PFNKSFILTERPOWER;
		alias extern(Windows) NTSTATUS function(PKSPIN Pin, PIRP Irp) PFNKSPINIRP;
		alias extern(Windows) NTSTATUS function(PKSPIN Pin, KSSTATE ToState, KSSTATE FromState) PFNKSPINSETDEVICESTATE;
		alias extern(Windows) NTSTATUS function(PKSPIN Pin, PKSDATAFORMAT OldFormat, PKSMULTIPLE_ITEM OldAttributeList, const(KSDATARANGE)* DataRange, const(KSATTRIBUTE_LIST)* AttributeRange) PFNKSPINSETDATAFORMAT;
		alias extern(Windows) NTSTATUS function(PKSPIN Pin, PKSHANDSHAKE In, PKSHANDSHAKE Out) PFNKSPINHANDSHAKE;
		alias extern(Windows) NTSTATUS function(PKSPIN Pin) PFNKSPIN;
		
		alias extern(Windows) void function(PKSPIN Pin) PFNKSPINVOID;
		alias extern(Windows) void function(PKSPIN Pin, DEVICE_POWER_STATE State) PFNKSPINPOWER;
		alias extern(Windows) BOOLEAN function(PKSPIN Pin, PKTIMER Timer, LARGE_INTEGER DueTime, PKDPC Dpc) PFNKSPINSETTIMER;
		alias extern(Windows) BOOLEAN function(PKSPIN Pin, PKTIMER Timer) PFNKSPINCANCELTIMER;
		
		alias extern(Windows) LONGLONG function(PKSPIN Pin, PLONGLONG SystemTime) PFNKSPINCORRELATEDTIME;
		alias extern(Windows) void function(PKSPIN Pin, PKSRESOLUTION Resolution) PFNKSPINRESOLUTION;
		alias extern(Windows) NTSTATUS function(PKSPIN Pin, PKSALLOCATOR_FRAMING AllocatorFraming, PVOID* Context) PFNKSPININITIALIZEALLOCATOR;
		alias extern(Windows) void function(PKSSTREAM_POINTER StreamPointer) PFNKSSTREAMPOINTER;

		struct KSAUTOMATION_TABLE {
			ULONG PropertySetsCount;
			ULONG PropertyItemSize;
			const(KSPROPERTY_SET)* PropertySets;
			ULONG MethodSetsCount;
			ULONG MethodItemSize;
			const(KSMETHOD_SET)* MethodSets;
			ULONG EventSetsCount;
			ULONG EventItemSize;
			const(KSEVENT_SET)* EventSets;
			version(Win32)
				PVOID Alignment;
		}
		alias KSAUTOMATION_TABLE *PKSAUTOMATION_TABLE;

	/*
		DEFINE_KSAUTOMATION_TABLE(table) const KSAUTOMATION_TABLE table =
		DEFINE_KSAUTOMATION_PROPERTIES(table) SIZEOF_ARRAY(table), sizeof(KSPROPERTY_ITEM), table
		DEFINE_KSAUTOMATION_METHODS(table) SIZEOF_ARRAY(table), sizeof(KSMETHOD_ITEM), table
		DEFINE_KSAUTOMATION_EVENTS(table) SIZEOF_ARRAY(table), sizeof(KSEVENT_ITEM), table
		DEFINE_KSAUTOMATION_PROPERTIES_NULL 0, sizeof(KSPROPERTY_ITEM), NULL
		DEFINE_KSAUTOMATION_METHODS_NULL 0, sizeof(KSMETHOD_ITEM), NULL
		DEFINE_KSAUTOMATION_EVENTS_NULL 0, sizeof(KSEVENT_ITEM), NULL
	*/

		enum IN_DEV_VER_FOR_QI = 0x100;

		struct KSDEVICE_DISPATCH {
			PFNKSDEVICECREATE Add;
			PFNKSDEVICEPNPSTART Start;
			PFNKSDEVICE PostStart;
			PFNKSDEVICEIRP QueryStop;
			PFNKSDEVICEIRPVOID CancelStop;
			PFNKSDEVICEIRPVOID Stop;
			PFNKSDEVICEIRP QueryRemove;
			PFNKSDEVICEIRPVOID CancelRemove;
			PFNKSDEVICEIRPVOID Remove;
			PFNKSDEVICEQUERYCAPABILITIES QueryCapabilities;
			PFNKSDEVICEIRPVOID SurpriseRemoval;
			PFNKSDEVICEQUERYPOWER QueryPower;
			PFNKSDEVICESETPOWER SetPower;
			PFNKSDEVICEIRP QueryInterface;
		}
		alias KSDEVICE_DISPATCH* PKSDEVICE_DISPATCH;

		struct KSFILTER_DISPATCH {
			PFNKSFILTERIRP Create;
			PFNKSFILTERIRP Close;
			PFNKSFILTERPROCESS Process;
			PFNKSFILTERVOID Reset;
		}
		alias KSFILTER_DISPATCH* PKSFILTER_DISPATCH;

		struct KSPIN_DISPATCH {
			PFNKSPINIRP Create;
			PFNKSPINIRP Close;
			PFNKSPIN Process;
			PFNKSPINVOID Reset;
			PFNKSPINSETDATAFORMAT SetDataFormat;
			PFNKSPINSETDEVICESTATE SetDeviceState;
			PFNKSPIN Connect;
			PFNKSPINVOID Disconnect;
			const(KSCLOCK_DISPATCH)* Clock;
			const(KSALLOCATOR_DISPATCH)* Allocator;
		}
		alias KSPIN_DISPATCH* PKSPIN_DISPATCH;

		struct KSCLOCK_DISPATCH {
			PFNKSPINSETTIMER SetTimer;
			PFNKSPINCANCELTIMER CancelTimer;
			PFNKSPINCORRELATEDTIME CorrelatedTime;
			PFNKSPINRESOLUTION Resolution;
		}
		alias KSCLOCK_DISPATCH* PKSCLOCK_DISPATCH;

		struct KSALLOCATOR_DISPATCH {
			PFNKSPININITIALIZEALLOCATOR InitializeAllocator;
			PFNKSDELETEALLOCATOR DeleteAllocator;
			PFNKSDEFAULTALLOCATE Allocate;
			PFNKSDEFAULTFREE Free;
		}
		alias KSALLOCATOR_DISPATCH* PKSALLOCATOR_DISPATCH;

		enum KSDEVICE_DESCRIPTOR_VERSION = 0x100;
		//(NTDDI_VERSION >= NTDDI_VISTA)
			enum KSDEVICE_DESCRIPTOR_VERSION_2 = 0x110;
			enum MIN_DEV_VER_FOR_FLAGS = 0x110;

		//(NTDDI_VERSION >= NTDDI_VISTA)
			enum {
				KSDEVICE_FLAG_ENABLE_REMOTE_WAKEUP = 0x00000001,
				KSDEVICE_FLAG_LOWPOWER_PASSTHROUGH = 0x00000002,
			}
		struct KSDEVICE_DESCRIPTOR {
			const(KSDEVICE_DISPATCH)* Dispatch;
			ULONG FilterDescriptorsCount;
			const(KSFILTER_DESCRIPTOR)** FilterDescriptors;
			ULONG Version;
			//(NTDDI_VERSION >= NTDDI_VISTA)
				ULONG Flags;
				version(Win32)
					PVOID Alignment;
		}
		alias KSDEVICE_DESCRIPTOR* PKSDEVICE_DESCRIPTOR;

		enum KSFILTER_DESCRIPTOR_VERSION = cast(ULONG)-1;
		enum {
			KSFILTER_FLAG_DISPATCH_LEVEL_PROCESSING   = 0x00000001,
			KSFILTER_FLAG_CRITICAL_PROCESSING         = 0x00000002,
			KSFILTER_FLAG_HYPERCRITICAL_PROCESSING    = 0x00000004,
			KSFILTER_FLAG_RECEIVE_ZERO_LENGTH_SAMPLES = 0x00000008,
			//(NTDDI_VERSION >= NTDDI_WINXPSP2)
				KSFILTER_FLAG_DENY_USERMODE_ACCESS = 0x80000000,
		}
		struct KSFILTER_DESCRIPTOR {
			const(KSFILTER_DISPATCH)* Dispatch;
			const(KSAUTOMATION_TABLE)* AutomationTable;
			ULONG Version;
			ULONG Flags;
			const(GUID)* ReferenceGuid;
			ULONG PinDescriptorsCount;
			ULONG PinDescriptorSize;
			const(KSPIN_DESCRIPTOR_EX)* PinDescriptors;
			ULONG CategoriesCount;
			const(GUID)* Categories;
			ULONG NodeDescriptorsCount;
			ULONG NodeDescriptorSize;
			const(KSNODE_DESCRIPTOR)* NodeDescriptors;
			ULONG ConnectionsCount;
			const(KSTOPOLOGY_CONNECTION)* Connections;
			const(KSCOMPONENTID)* ComponentId;
		}
		alias KSFILTER_DESCRIPTOR* PKSFILTER_DESCRIPTOR;

	/*
		DEFINE_KSFILTER_DESCRIPTOR(descriptor) const KSFILTER_DESCRIPTOR descriptor =
		DEFINE_KSFILTER_PIN_DESCRIPTORS(table) SIZEOF_ARRAY(table), sizeof(table[0]), table
		DEFINE_KSFILTER_CATEGORIES(table) SIZEOF_ARRAY(table), table
		DEFINE_KSFILTER_CATEGORY(category) 1, &(category)
		DEFINE_KSFILTER_CATEGORIES_NULL 0, NULL
		DEFINE_KSFILTER_NODE_DESCRIPTORS(table) SIZEOF_ARRAY(table), sizeof(table[0]), table
		DEFINE_KSFILTER_NODE_DESCRIPTORS_NULL 0, sizeof(KSNODE_DESCRIPTOR), NULL
		DEFINE_KSFILTER_CONNECTIONS(table) SIZEOF_ARRAY(table), table
		DEFINE_KSFILTER_DEFAULT_CONNECTIONS 0, NULL
		DEFINE_KSFILTER_DESCRIPTOR_TABLE(table) const KSFILTER_DESCRIPTOR*const table[] =
	*/

		enum {
			KSPIN_FLAG_DISPATCH_LEVEL_PROCESSING            = KSFILTER_FLAG_DISPATCH_LEVEL_PROCESSING,
			KSPIN_FLAG_CRITICAL_PROCESSING                  = KSFILTER_FLAG_CRITICAL_PROCESSING,
			KSPIN_FLAG_HYPERCRITICAL_PROCESSING             = KSFILTER_FLAG_HYPERCRITICAL_PROCESSING,
			KSPIN_FLAG_ASYNCHRONOUS_PROCESSING              = 0x00000008,
			KSPIN_FLAG_DO_NOT_INITIATE_PROCESSING           = 0x00000010,
			KSPIN_FLAG_INITIATE_PROCESSING_ON_EVERY_ARRIVAL = 0x00000020,
			KSPIN_FLAG_FRAMES_NOT_REQUIRED_FOR_PROCESSING   = 0x00000040,
			KSPIN_FLAG_ENFORCE_FIFO                         = 0x00000080,
			KSPIN_FLAG_GENERATE_MAPPINGS                    = 0x00000100,
			KSPIN_FLAG_DISTINCT_TRAILING_EDGE               = 0x00000200,
			KSPIN_FLAG_PROCESS_IN_RUN_STATE_ONLY            = 0x00010000,
			KSPIN_FLAG_SPLITTER                             = 0x00020000,
			KSPIN_FLAG_USE_STANDARD_TRANSPORT               = 0x00040000,
			KSPIN_FLAG_DO_NOT_USE_STANDARD_TRANSPORT        = 0x00080000,
			KSPIN_FLAG_FIXED_FORMAT                         = 0x00100000,
			KSPIN_FLAG_GENERATE_EOS_EVENTS                  = 0x00200000,
			KSPIN_FLAG_RENDERER                             = KSPIN_FLAG_PROCESS_IN_RUN_STATE_ONLY|KSPIN_FLAG_GENERATE_EOS_EVENTS,
			KSPIN_FLAG_IMPLEMENT_CLOCK                      = 0x00400000,
			KSPIN_FLAG_SOME_FRAMES_REQUIRED_FOR_PROCESSING  = 0x00800000,
			KSPIN_FLAG_PROCESS_IF_ANY_IN_RUN_STATE          = 0x01000000,
			//(NTDDI_VERSION >= NTDDI_WINXPSP2)
				KSPIN_FLAG_DENY_USERMODE_ACCESS = 0x80000000,
		}

		struct KSPIN_DESCRIPTOR_EX {
			const(KSPIN_DISPATCH)* Dispatch;
			const(KSAUTOMATION_TABLE)* AutomationTable;
			KSPIN_DESCRIPTOR PinDescriptor;
			ULONG Flags;
			ULONG InstancesPossible;
			ULONG InstancesNecessary;
			const(KSALLOCATOR_FRAMING_EX)* AllocatorFraming;
			PFNKSINTERSECTHANDLEREX IntersectHandler;
		}
		alias KSPIN_DESCRIPTOR_EX* PKSPIN_DESCRIPTOR_EX;

	/* DEFINE_KSPIN_DEFAULT_INTERFACES 0, NULL
	DEFINE_KSPIN_DEFAULT_MEDIUMS 0, NULL
	*/
		struct KSNODE_DESCRIPTOR {
			const(KSAUTOMATION_TABLE)* AutomationTable;
			const(GUID)* Type;
			const(GUID)* Name;
			version(Win32)
				PVOID Alignment;
		}
		alias KSNODE_DESCRIPTOR* PKSNODE_DESCRIPTOR;
	/*
		#if !defined(_WIN64)
				DEFINE_NODE_DESCRIPTOR(automation,type,name)  { (automation), (type), (name), NULL }
		#else
				DEFINE_NODE_DESCRIPTOR(automation,type,name)  { (automation), (type), (name) }
		#endif
	*/
		struct KSDEVICE {
			const(KSDEVICE_DESCRIPTOR)* Descriptor;
			KSOBJECT_BAG Bag;
			PVOID Context;
			PDEVICE_OBJECT FunctionalDeviceObject;
			PDEVICE_OBJECT PhysicalDeviceObject;
			PDEVICE_OBJECT NextDeviceObject;
			BOOLEAN Started;
			SYSTEM_POWER_STATE SystemPowerState;
			DEVICE_POWER_STATE DevicePowerState;
		}
		alias KSDEVICE* PKSDEVICE;

		struct KSFILTERFACTORY {
			const(KSFILTER_DESCRIPTOR)* FilterDescriptor;
			KSOBJECT_BAG Bag;
			PVOID Context;
		}
		alias KSFILTERFACTORY* PKSFILTERFACTORY;

		struct KSFILTER {
			const(KSFILTER_DESCRIPTOR)* Descriptor;
			KSOBJECT_BAG Bag;
			PVOID Context;
		}
		alias KSFILTER* PKSFILTER;

		struct KSPIN {
			const(KSPIN_DESCRIPTOR_EX)* Descriptor;
			KSOBJECT_BAG Bag;
			PVOID Context;
			ULONG Id;
			KSPIN_COMMUNICATION Communication;
			BOOLEAN ConnectionIsExternal;
			KSPIN_INTERFACE ConnectionInterface;
			KSPIN_MEDIUM ConnectionMedium;
			KSPRIORITY ConnectionPriority;
			PKSDATAFORMAT ConnectionFormat;
			PKSMULTIPLE_ITEM AttributeList;
			ULONG StreamHeaderSize;
			KSPIN_DATAFLOW DataFlow;
			KSSTATE DeviceState;
			KSRESET ResetState;
			KSSTATE ClientState;
		}
		alias KSPIN* PKSPIN;

		struct KSMAPPING {
			PHYSICAL_ADDRESS PhysicalAddress;
			ULONG ByteCount;
			ULONG Alignment;
		}
		alias KSMAPPING* PKSMAPPING;

		struct KSSTREAM_POINTER_OFFSET {
			union {
				PUCHAR Data;
				PKSMAPPING Mappings;
			}
			version(Win32)
				PVOID Alignment;
			ULONG Count;
			ULONG Remaining;
		}
		alias KSSTREAM_POINTER_OFFSET* PKSSTREAM_POINTER_OFFSET;

		struct KSSTREAM_POINTER {
			PVOID Context;
			PKSPIN Pin;
			PKSSTREAM_HEADER StreamHeader;
			PKSSTREAM_POINTER_OFFSET Offset;
			KSSTREAM_POINTER_OFFSET OffsetIn;
			KSSTREAM_POINTER_OFFSET OffsetOut;
		}
		alias KSSTREAM_POINTER* PKSSTREAM_POINTER;

		struct KSPROCESSPIN {
			PKSPIN Pin;
			PKSSTREAM_POINTER StreamPointer;
			PKSPROCESSPIN InPlaceCounterpart;
			PKSPROCESSPIN DelegateBranch;
			PKSPROCESSPIN CopySource;
			PVOID Data;
			ULONG BytesAvailable;
			ULONG BytesUsed;
			ULONG Flags;
			BOOLEAN Terminate;
		}
		alias KSPROCESSPIN* PKSPROCESSPIN;

		struct KSPROCESSPIN_INDEXENTRY {
			PKSPROCESSPIN *Pins;
			ULONG Count;
		}
		alias KSPROCESSPIN_INDEXENTRY* PKSPROCESSPIN_INDEXENTRY;

		enum {
			KsObjectTypeDevice,
			KsObjectTypeFilterFactory,
			KsObjectTypeFilter,
			KsObjectTypePin
		}
		alias int KSOBJECTTYPE;

		alias extern(Windows) void function(PVOID Data) PFNKSFREE;
		alias extern(Windows) void function(PKSPIN Pin, PVOID Data, ULONG Size, PMDL Mdl, PVOID Context, NTSTATUS Status) PFNKSPINFRAMERETURN;
		alias extern(Windows) void function(PKSPIN Pin, PIRP Irp) PFNKSPINIRPCOMPLETION;

		interface IKsControl : IUnknown {
		public extern(Windows):
			NTSTATUS KsProperty(PKSPROPERTY Property, ULONG PropertyLength, PVOID PropertyData, ULONG DataLength, ULONG* BytesReturned);
			NTSTATUS KsMethod(PKSMETHOD Method, ULONG MethodLength, PVOID MethodData, ULONG DataLength, ULONG* BytesReturned);
			NTSTATUS KsEvent(PKSEVENT Event, ULONG EventLength, PVOID EventData, ULONG DataLength, ULONG* BytesReturned);
		}
		alias IKsControl PIKSCONTROL;

		interface IKsReferenceClock : IUnknow {
		public extern(Windows):
			LONGLONG GetTime();
			LONGLONG GetPhysicalTime();
			LONGLONG GetCorrelatedTime(PLONGLONG SystemTime);
			LONGLONG GetCorrelatedPhysicalTime(PLONGLONG SystemTime);
			NTSTATUS GetResolution(PKSRESOLUTION Resolution);
			NTSTATUS GetState(PKSSTATE State);
		}
		alias IKsReferenceClock PIKSREFERENCECLOCK;

		//(NTDDI_VERSION >= NTDDI_WS03SP1)
			interface IKsDeviceFunctions : IUnknown {
			public extern(Windows):
				NTSTATUS RegisterAdapterObjectEx(PADAPTER_OBJECT AdapterObject, PDEVICE_DESCRIPTION DeviceDescription, ULONG NumberOfMapRegisters, ULONG MaxMappingsByteCount, ULONG MappingTableStride);
			}

		mixin DEFINE_GUID!("IID_IKsControl", 0x28F54685L, 0x06FD, 0x11D2, 0xB2, 0x7A, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96);
		mixin DEFINE_GUID!("IID_IKsFastClock", 0xc9902485, 0xc180, 0x11d2, 0x84, 0x73, 0xd4, 0x23, 0x94, 0x45, 0x9e, 0x5e);
		//(NTDDI_VERSION >= NTDDI_WS03SP1)
			mixin DEFINE_GUID!("IID_IKsDeviceFunctions", 0xe234f2e2, 0xbd69, 0x4f8c, 0xb3, 0xf2, 0x7c, 0xd7, 0x9e, 0xd4, 0x66, 0xbd);
	}// _NTDDK_

extern(C){

version(none){//_NTDDK_
	export extern(Windows) NTSTATUS KsEnableEvent(PIRP Irp, ULONG EventSetsCount, const(KSEVENT_SET)* EventSet, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock);
	export extern(Windows) NTSTATUS KsEnableEventWithAllocator(PIRP Irp, ULONG EventSetsCount, const(KSEVENT_SET)* EventSet, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock, PFNKSALLOCATOR Allocator, ULONG EventItemSize);
	export extern(Windows) NTSTATUS KsDisableEvent(PIRP Irp, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock);
	export extern(Windows) VOID KsDiscardEvent(PKSEVENT_ENTRY EventEntry);
	export extern(Windows) VOID KsFreeEventList(PFILE_OBJECTFileObject, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock);
	export extern(Windows) NTSTATUS KsGenerateEvent(PKSEVENT_ENTRY EventEntry);
	export extern(Windows) NTSTATUS KsGenerateDataEvent(PKSEVENT_ENTRY EventEntry, ULONG DataSize, PVOID Data);
	export extern(Windows) VOID KsGenerateEventList(GUID* Set, ULONG EventId, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock);
	export extern(Windows) NTSTATUS KsPropertyHandler(PIRP Irp, ULONG PropertySetsCount, const(KSPROPERTY_SET)* PropertySet);
	export extern(Windows) NTSTATUS KsPropertyHandlerWithAllocator(PIRP Irp, ULONG PropertySetsCount, const(KSPROPERTY_SET)* PropertySet, PFNKSALLOCATOR Allocator, ULONG PropertyItemSize);
	export extern(Windows) BOOLEAN KsFastPropertyHandler(PFILE_OBJECT FileObject, PKSPROPERTY Property, ULONG PropertyLength, PVOID Data, ULONG DataLength, PIO_STATUS_BLOCK IoStatus, ULONG PropertySetsCount, const(KSPROPERTY_SET)* PropertySet);
	export extern(Windows) NTSTATUS KsMethodHandler(PIRP Irp, ULONG MethodSetsCount, const(KSMETHOD_SET)* MethodSet);
	export extern(Windows) NTSTATUS KsMethodHandlerWithAllocator(PIRP Irp, ULONG MethodSetsCount, const(KSMETHOD_SET)* MethodSet, PFNKSALLOCATOR Allocator, ULONG MethodItemSize);
	export extern(Windows) BOOLEAN KsFastMethodHandler(PFILE_OBJECT FileObject, PKSMETHOD Method, ULONG MethodLength, PVOID Data, ULONG DataLength, PIO_STATUS_BLOCK IoStatus, ULONG MethodSetsCount, const(KSMETHOD_SET)* MethodSet);
	export extern(Windows) NTSTATU KsCreateDefaultAllocator(PIRP Irp);
	export extern(Windows) NTSTATUS KsCreateDefaultAllocatorEx(PIRP Irp, PVOID InitializeContext, PFNKSDEFAULTALLOCATE DefaultAllocate, PFNKSDEFAULTFREE DefaultFree, PFNKSINITIALIZEALLOCATOR InitializeAllocator, PFNKSDELETEALLOCATOR DeleteAllocator);
	export extern(Windows) NTSTATUS KsCreateAllocator(HANDLE ConnectionHandle, PKSALLOCATOR_FRAMING AllocatorFraming, PHANDLE AllocatorHandle);
	export extern(Windows) NTSTATUS KsValidateAllocatorCreateRequest(PIRP Irp, PKSALLOCATOR_FRAMING* AllocatorFraming);
	export extern(Windows) NTSTATUS KsValidateAllocatorFramingEx(PKSALLOCATOR_FRAMING_EX Framing, ULONG BufferSize, const(KSALLOCATOR_FRAMING_EX)* PinFraming);
	export extern(Windows) NTSTATUS KsAllocateDefaultClock(PKSDEFAULTCLOCK* DefaultClock);

	//(NTDDI_VERSION >= NTDDI_WINXP)
		export extern(Windows) NTSTATUS KsAllocateDefaultClockEx(PKSDEFAULTCLOCK* DefaultClock, PVOID Context, PFNKSSETTIMER SetTimer, PFNKSCANCELTIMER CancelTimer, PFNKSCORRELATEDTIME CorrelatedTime, const(KSRESOLUTION)* Resolution, ULONG Flags);

	export extern(Windows) VOID KsFreeDefaultClock(PKSDEFAULTCLOCK DefaultClock);
	export extern(Windows) NTSTATUS KsCreateDefaultClock(PIRP Irp, PKSDEFAULTCLOCK DefaultClock);
	export extern(Windows) NTSTATUS KsCreateClock(HANDLE ConnectionHandle, PKSCLOCK_CREATE ClockCreate, PHANDLE ClockHandle);
	export extern(Windows) NTSTATUS KsValidateClockCreateRequest(PIRP Irp, PKSCLOCK_CREATE* ClockCreate);
	export extern(Windows) KSSTATE KsGetDefaultClockState(PKSDEFAULTCLOCK DefaultClock);
	export extern(Windows) VOID KsSetDefaultClockState(PKSDEFAULTCLOCK DefaultClock, KSSTATE State);
	export extern(Windows) LONGLONG KsGetDefaultClockTime(PKSDEFAULTCLOCK DefaultClock);
	export extern(Windows) VOID KsSetDefaultClockTime(PKSDEFAULTCLOCK DefaultClock, LONGLONG Time);
	export extern(Windows) NTSTATUS KsCreatePin(HANDLE FilterHandle, PKSPIN_CONNECT Connect, ACCESS_MASK DesiredAccess, PHANDLE ConnectionHandle);
	export extern(Windows) NTSTATUS KsValidateConnectRequest(PIRP Irp, ULONG DescriptorsCount, const(KSPIN_DESCRIPTOR)* Descriptor, PKSPIN_CONNECT* Connect);
	export extern(Windows) NTSTATUS KsPinPropertyHandler(PIRP Irp, PKSPROPERTY Property, PVOID Data, ULONG DescriptorsCount, const(KSPIN_DESCRIPTOR)* Descriptor);
	export extern(Windows) NTSTATUS KsPinDataIntersection(PIRP Irp, PKSP_PIN Pin, PVOID Data, ULONG DescriptorsCount, const(KSPIN_DESCRIPTOR)* Descriptor, PFNKSINTERSECTHANDLER IntersectHandler);
	export extern(Windows) NTSTATUS KsPinDataIntersectionEx(PIRP Irp, PKSP_PIN Pin, PVOID Data, ULONG DescriptorsCount, const(KSPIN_DESCRIPTOR)* Descriptor, ULONG DescriptorSize, PFNKSINTERSECTHANDLEREX IntersectHandler, PVOID HandlerContext);
	export extern(Windows) NTSTATUS KsHandleSizedListQuery(PIRP Irp, ULONG DataItemsCount, ULONG DataItemSize, const(VOID)* DataItems);

	export extern(Windows) NTSTATUS KsLoadResource(PVOID ImageBase, POOL_TYPE PoolType, ULONG_PTR ResourceName, ULONG ResourceType, PVOID *Resource, PULONG ResourceSize);
	export extern(Windows) NTSTATUS KsGetImageNameAndResourceId(HANDLE RegKey, PUNICODE_STRING ImageName, PULONG_PTR ResourceId, PULONG ValueType);
	export extern(Windows) NTSTATUS KsMapModuleName(PDEVICE_OBJECT PhysicalDeviceObject, PUNICODE_STRING ModuleName, PUNICODE_STRING ImageName, PULONG_PTR ResourceId, PULONG ValueType);
	export extern(Windows) NTSTATUS KsReferenceBusObject(KSDEVICE_HEADER Header);
	export extern(Windows) VOID KsDereferenceBusObject(KSDEVICE_HEADER Header);
	export extern(Windows) NTSTATUS KsDispatchQuerySecurity(PDEVICE_OBJECT DeviceObject, PIRP Irp);
	export extern(Windows) NTSTATUS KsDispatchSetSecurity(PDEVICE_OBJECT DeviceObject, PIRP Irp);
	export extern(Windows) NTSTATUS KsDispatchSpecificProperty(PIRP Irp, PFNKSHANDLER Handler);
	export extern(Windows) NTSTATUS KsDispatchSpecificMethod(PIRP Irp, PFNKSHANDLER Handler);
	export extern(Windows) NTSTATUS KsReadFile(PFILE_OBJECT FileObject, PKEVENT Event, PVOID PortContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG Key, KPROCESSOR_MODE RequestorMode);
	export extern(Windows) NTSTATUS KsWriteFile(PFILE_OBJECT FileObject, PKEVENT Event, PVOID PortContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG Key, KPROCESSOR_MODE RequestorMode);
	export extern(Windows) NTSTATUS KsQueryInformationFile(PFILE_OBJECT FileObject, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
	export extern(Windows) NTSTATUS KsSetInformationFile(PFILE_OBJECT FileObject, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
	export extern(Windows) NTSTATUS KsStreamIo(PFILE_OBJECT FileObject, PKEVENT Event, PVOID PortContext, PIO_COMPLETION_ROUTINE CompletionRoutine, PVOID CompletionContext, KSCOMPLETION_INVOCATION CompletionInvocationFlags, PIO_STATUS_BLOCK IoStatusBlock, PVOID StreamHeaders, ULONG Length, ULONG Flags, KPROCESSOR_MODE RequestorMode);
	export extern(Windows) NTSTATUS KsProbeStreamIrp(PIRP Irp, ULONG ProbeFlags, ULONG HeaderSize);
	export extern(Windows) NTSTATUS KsAllocateExtraData(PIRP Irp, ULONG ExtraSize, PVOID* ExtraBuffer);
	export extern(Windows) VOID KsNullDriverUnload(PDRIVER_OBJECT DriverObject);
	export extern(Windows) NTSTATUS KsSetMajorFunctionHandler(PDRIVER_OBJECT DriverObject, ULONG MajorFunction);
	export extern(Windows) NTSTATUS KsDispatchInvalidDeviceRequest( PDEVICE_OBJECT DeviceObject, PIRP Irp);
	export extern(Windows) NTSTATUS KsDefaultDeviceIoCompletion(PDEVICE_OBJECT DeviceObject, PIRP Irp);
	export extern(Windows) NTSTATUS KsDispatchIrp(PDEVICE_OBJECT DeviceObject, PIRP Irp);
	export extern(Windows) BOOLEAN KsDispatchFastIoDeviceControlFailure(PFILE_OBJECT FileObject, BOOLEAN Wait, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, ULONG IoControlCode, PIO_STATUS_BLOCK IoStatus, PDEVICE_OBJECT DeviceObject);
	export extern(Windows) BOOLEAN KsDispatchFastReadFailure(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, ULONG LockKey, PVOID Buffer, PIO_STATUS_BLOCK IoStatus, PDEVICE_OBJECT DeviceObject);

	alias KsDispatchFastReadFailure KsDispatchFastWriteFailure;

	//KSDDKAPI DRIVER_CANCEL KsCancelRoutine;
	export extern(Windows) VOID KsCancelIo(PLIST_ENTRY QueueHead, PKSPIN_LOCK SpinLock);
	export extern(Windows) VOID KsReleaseIrpOnCancelableQueue( PIRP Irp, PDRIVER_CANCEL DriverCancel);
	export extern(Windows) PIRP KsRemoveIrpFromCancelableQueue(PLIST_ENTRY QueueHead, PKSPIN_LOCK SpinLock, KSLIST_ENTRY_LOCATION ListLocation, KSIRP_REMOVAL_OPERATION RemovalOperation);
	export extern(Windows) NTSTATUS KsMoveIrpsOnCancelableQueue(PLIST_ENTRY SourceList, PKSPIN_LOCK SourceLock, PLIST_ENTRY DestinationList, PKSPIN_LOCK DestinationLock, KSLIST_ENTRY_LOCATION ListLocation, PFNKSIRPLISTCALLBACK ListCallback, PVOID Context);
	export extern(Windows) VOID KsRemoveSpecificIrpFromCancelableQueue(PIRP Irp);
	export extern(Windows) VOID KsAddIrpToCancelableQueue(PLIST_ENTRY QueueHead, PKSPIN_LOCK SpinLock, PIRP Irp, KSLIST_ENTRY_LOCATION ListLocation, PDRIVER_CANCEL DriverCancel);
	export extern(Windows) NTSTATUS KsAcquireResetValue( PIRP Irp, KSRESET* ResetValue);
	export extern(Windows) NTSTATUS KsTopologyPropertyHandler(PIRP Irp, PKSPROPERTY Property, PVOID Data, const(KSTOPOLOGY)* Topology);
	export extern(Windows) VOID KsAcquireDeviceSecurityLock( KSDEVICE_HEADER Header, BOOLEAN Exclusive);
	export extern(Windows) VOID KsReleaseDeviceSecurityLock(KSDEVICE_HEADER Header);

	//KSDDKAPI DRIVER_DISPATCH KsDefaultDispatchPnp;
	//KSDDKAPI DRIVER_DISPATCH KsDefaultDispatchPower;
	//KSDDKAPI DRIVER_DISPATCH KsDefaultForwardIrp;

	export extern(Windows) VOID KsSetDevicePnpAndBaseObject(KSDEVICE_HEADER Header, PDEVICE_OBJECT PnpDeviceObject, PDEVICE_OBJECT BaseObject);
	export extern(Windows) PDEVICE_OBJECT KsQueryDevicePnpObject(KSDEVICE_HEADER Header);
	export extern(Windows) ACCESS_MASK KsQueryObjectAccessMask(KSOBJECT_HEADER Header);
	export extern(Windows) VOID KsRecalculateStackDepth(KSDEVICE_HEADER Header, BOOLEAN ReuseStackLocation);
	export extern(Windows) VOID KsSetTargetState(KSOBJECT_HEADER Header, KSTARGET_STATE TargetState);
	export extern(Windows) VOID KsSetTargetDeviceObject(KSOBJECT_HEADER Header, PDEVICE_OBJECT TargetDevice);
	export extern(Windows) VOID KsSetPowerDispatch(KSOBJECT_HEADER Header, PFNKSCONTEXT_DISPATCH PowerDispatch, PVOID PowerContext);
	export extern(Windows) PKSOBJECT_CREATE_ITEM KsQueryObjectCreateItem( KSOBJECT_HEADER Header);
	export extern(Windows) NTSTATUS KsAllocateDeviceHeader(KSDEVICE_HEADER* Header, ULONG ItemsCount, PKSOBJECT_CREATE_ITEM ItemsList);
	export extern(Windows) VOID KsFreeDeviceHeader(KSDEVICE_HEADER Header);
	export extern(Windows) NTSTATUS KsAllocateObjectHeader(KSOBJECT_HEADER* Header, ULONG ItemsCount, PKSOBJECT_CREATE_ITEM ItemsList, PIRP Irp, const(KSDISPATCH_TABLE)* Table);
	export extern(Windows) VOID KsFreeObjectHeader(KSOBJECT_HEADER Header);
	export extern(Windows) NTSTATUS KsAddObjectCreateItemToDeviceHeader(KSDEVICE_HEADER Header, PDRIVER_DISPATCH Create, PVOID Context, PWSTR ObjectClass, PSECURITY_DESCRIPTOR SecurityDescriptor);
	export extern(Windows) NTSTATUS KsAddObjectCreateItemToObjectHeader(KSOBJECT_HEADER Header, PDRIVER_DISPATCH Create, PVOID Context, PWSTR ObjectClass, PSECURITY_DESCRIPTOR SecurityDescriptor);
	export extern(Windows) NTSTATUS KsAllocateObjectCreateItem(KSDEVICE_HEADER Header, PKSOBJECT_CREATE_ITEM CreateItem, BOOLEAN AllocateEntry, PFNKSITEMFREECALLBACK ItemFreeCallback);
	export extern(Windows) NTSTATUS KsFreeObjectCreateItem(KSDEVICE_HEADER Header, PUNICODE_STRING CreateItem);
	export extern(Windows) NTSTATUS KsFreeObjectCreateItemsByContext(KSDEVICE_HEADER Header, PVOID Context);
	export extern(Windows) NTSTATUS KsCreateDefaultSecurity(PSECURITY_DESCRIPTOR ParentSecurity, PSECURITY_DESCRIPTOR* DefaultSecurity);
	export extern(Windows) NTSTATUS KsForwardIrp( PIRP Irp, PFILE_OBJECT FileObject, BOOLEAN ReuseStackLocation);
	export extern(Windows) NTSTATUS KsForwardAndCatchIrp(PDEVICE_OBJECT DeviceObject, PIRP Irp, PFILE_OBJECT FileObject, KSSTACK_USE StackUse);
	export extern(Windows) NTSTATUS KsSynchronousIoControlDevice(PFILE_OBJECT FileObject, KPROCESSOR_MODE RequestorMode, ULONG IoControl, PVOID InBuffer, ULONG InSize, PVOID OutBuffer, ULONG OutSize, PULONG BytesReturned);
	export extern(Windows) NTSTATUS KsUnserializeObjectPropertiesFromRegistry(PFILE_OBJECT FileObject, HANDLE ParentKey, PUNICODE_STRING RegistryPath);

	static if(NTDDI_VERSION >= NTDDI_WINXP){
		export extern(Windows) NTSTATUS KsCacheMedium(PUNICODE_STRING SymbolicLink, PKSPIN_MEDIUM Medium, ULONG PinDirection);
	}

	export extern(Windows) NTSTATUS KsRegisterWorker(WORK_QUEUE_TYPE WorkQueueType, PKSWORKER* Worker);
	export extern(Windows) NTSTATUS KsRegisterCountedWorker(WORK_QUEUE_TYPE WorkQueueType, PWORK_QUEUE_ITEM CountedWorkItem, PKSWORKER* Worker);
	export extern(Windows) VOID KsUnregisterWorker(PKSWORKER Worker);
	export extern(Windows) NTSTATUS KsQueueWorkItem(PKSWORKER Worker, PWORK_QUEUE_ITEM WorkItem);
	export extern(Windows) ULONG KsIncrementCountedWorker(PKSWORKER Worker);
	export extern(Windows) ULONG KsDecrementCountedWorker(PKSWORKER Worker);
	export extern(Windows) NTSTATUS KsCreateTopologyNode(HANDLE ParentHandle, PKSNODE_CREATE NodeCreate, ACCESS_MASK DesiredAccess, PHANDLE NodeHandle);
	export extern(Windows) NTSTATUS KsValidateTopologyNodeCreateRequest(PIRP Irp, PKSTOPOLOGY Topology, PKSNODE_CREATE* NodeCreate);

	static if(NTDDI_VERSION >= NTDDI_WINXP){
		export extern(Windows) NTSTATUS KsMergeAutomationTables(PKSAUTOMATION_TABLE* AutomationTableAB, PKSAUTOMATION_TABLE AutomationTableA, PKSAUTOMATION_TABLE AutomationTableB, KSOBJECT_BAG Bag);
		export extern(Windows) NTSTATUS KsInitializeDriver(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPathName, const(KSDEVICE_DESCRIPTOR)* Descriptor);
		export extern(Windows) NTSTATUS KsAddDevice(PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT PhysicalDeviceObject);
		export extern(Windows) NTSTATUS KsCreateDevice(PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT PhysicalDeviceObject, const(KSDEVICE_DESCRIPTOR)* Descriptor, ULONG ExtensionSize, PKSDEVICE* Device);
		export extern(Windows) NTSTATUS KsInitializeDevice(PDEVICE_OBJECT FunctionalDeviceObject, PDEVICE_OBJECT PhysicalDeviceObject, PDEVICE_OBJECT NextDeviceObject, const(KSDEVICE_DESCRIPTOR)* Descriptor);
		export extern(Windows) void KsTerminateDevice(PDEVICE_OBJECT DeviceObject);
		export extern(Windows) PKSDEVICE KsGetDeviceForDeviceObject(PDEVICE_OBJECT FunctionalDeviceObject);
		export extern(Windows) void KsAcquireDevice(PKSDEVICE Device);
		export extern(Windows) void KsReleaseDevice(PKSDEVICE Device);
		export extern(Windows) void KsDeviceRegisterAdapterObject(PKSDEVICE Device,PADAPTER_OBJECT AdapterObject, ULONG MaxMappingsByteCount, ULONG MappingTableStride);
		export extern(Windows) ULONG KsDeviceGetBusData(PKSDEVICE Device, ULONG DataType, PVOID Buffer, ULONG Offset, ULONG Length);
		export extern(Windows) ULONG KsDeviceSetBusData(PKSDEVICE Device, ULONG DataType, PVOID Buffer, ULONG Offset, ULONG Length);
		export extern(Windows) NTSTATUS KsCreateFilterFactory(PDEVICE_OBJECT DeviceObject, const(KSFILTER_DESCRIPTOR)* Descriptor, PWSTR RefString, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG CreateItemFlags, PFNKSFILTERFACTORYPOWER SleepCallback, PFNKSFILTERFACTORYPOWER WakeCallback, PKSFILTERFACTORY* FilterFactory);

		//KsDeleteFilterFactory(FilterFactory)  KsFreeObjectCreateItemsByContext( *(KSDEVICE_HEADER *)( KsFilterFactoryGetParentDevice(FilterFactory).FunctionalDeviceObject. DeviceExtension), FilterFactory)

		export extern(Windows) NTSTATUS KsFilterFactoryUpdateCacheData(PKSFILTERFACTORY FilterFactory, const(KSFILTER_DESCRIPTOR)* FilterDescriptor);
		export extern(Windows) NTSTATUS KsFilterFactoryAddCreateItem(PKSFILTERFACTORY FilterFactory, PWSTR RefString, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG CreateItemFlags);
		export extern(Windows) NTSTATUS KsFilterFactorySetDeviceClassesState(PKSFILTERFACTORY FilterFactory, BOOLEAN NewState);
		export extern(Windows) PUNICODE_STRING KsFilterFactoryGetSymbolicLink(PKSFILTERFACTORY FilterFactory);
		export extern(Windows) void KsAddEvent(PVOID Object, PKSEVENT_ENTRY EventEntry);

		void KsFilterAddEvent(PKSFILTER Filter, PKSEVENT_ENTRY EventEntry)
		{
			KsAddEvent(Filter,EventEntry);
		}

		void KsPinAddEvent(PKSPIN Pin, PKSEVENT_ENTRY EventEntry)
		{
			KsAddEvent(Pin,EventEntry);
		}

		export extern(Windows) NTSTATUS KsDefaultAddEventHandler(PIRP Irp, PKSEVENTDATA EventData, PKSEVENT_ENTRY EventEntry);
		export extern(Windows) void KsGenerateEvents(PVOID Object, const(GUID)* EventSet, ULONG EventId, ULONG DataSize, PVOID Data, PFNKSGENERATEEVENTCALLBACK CallBack, PVOID CallBackContext);

		void KsFilterGenerateEvents(PKSFILTER Filter, const(GUID)* EventSet, ULONG EventId, ULONG DataSize, PVOID Data, PFNKSGENERATEEVENTCALLBACK CallBack, PVOID CallBackContext)
		{
			KsGenerateEvents(Filter, EventSet, EventId, DataSize, Data, CallBack, CallBackContext);
		}

		void KsPinGenerateEvents(PKSPIN Pin, const(GUID)* EventSet, ULONG EventId, ULONG DataSize, PVOID Data, PFNKSGENERATEEVENTCALLBACK CallBack, PVOID CallBackContext)
		{
			KsGenerateEvents(Pin, EventSet, EventId, DataSize, Data, CallBack, CallBackContext);
		}
	}

	//(NTDDI_VERSION >= NTDDI_WINXP){
		enum {
			KSSTREAM_POINTER_STATE_UNLOCKED = 0,
			KSSTREAM_POINTER_STATE_LOCKED
		}
		alias int KSSTREAM_POINTER_STATE;

	static if(NTDDI_VERSION >= NTDDI_WINXP){
		export extern(Windows) NTSTATUS KsPinGetAvailableByteCount(PKSPIN Pin, PLONG InputDataBytes, PLONG OutputBufferBytes);
		export extern(Windows) PKSSTREAM_POINTER  KsPinGetLeadingEdgeStreamPointer(PKSPIN Pin, KSSTREAM_POINTER_STATE State);
		export extern(Windows) PKSSTREAM_POINTER  KsPinGetTrailingEdgeStreamPointer(PKSPIN Pin, KSSTREAM_POINTER_STATE State);
		export extern(Windows) NTSTATUS KsStreamPointerSetStatusCode(PKSSTREAM_POINTER StreamPointer, NTSTATUS Status);
		export extern(Windows) NTSTATUS KsStreamPointerLock(PKSSTREAM_POINTER StreamPointer);
		export extern(Windows) void KsStreamPointerUnlock(PKSSTREAM_POINTER StreamPointer, BOOLEAN Eject);
		export extern(Windows) void KsStreamPointerAdvanceOffsetsAndUnlock(PKSSTREAM_POINTER StreamPointer, ULONG InUsed, ULONG OutUsed, BOOLEAN Eject);
		export extern(Windows) void KsStreamPointerDelete(PKSSTREAM_POINTER StreamPointer);
		export extern(Windows) NTSTATUS KsStreamPointerClone(PKSSTREAM_POINTER StreamPointer, PFNKSSTREAMPOINTER CancelCallback, ULONG ContextSize, PKSSTREAM_POINTER* CloneStreamPointer);
		export extern(Windows) NTSTATUS KsStreamPointerAdvanceOffsets(PKSSTREAM_POINTER StreamPointer, ULONG InUsed, ULONG OutUsed, BOOLEAN Eject);
		export extern(Windows) NTSTATUS KsStreamPointerAdvance(PKSSTREAM_POINTER StreamPointer);
		export extern(Windows) PMDL KsStreamPointerGetMdl(PKSSTREAM_POINTER StreamPointer);
		export extern(Windows) PIRP KsStreamPointerGetIrp(PKSSTREAM_POINTER StreamPointer, PBOOLEAN FirstFrameInIrp, PBOOLEAN LastFrameInIrp);
		export extern(Windows) void KsStreamPointerScheduleTimeout(PKSSTREAM_POINTER StreamPointer, PFNKSSTREAMPOINTER Callback, ULONGLONG Interval);
		export extern(Windows) void KsStreamPointerCancelTimeout(PKSSTREAM_POINTER StreamPointer);
		export extern(Windows) PKSSTREAM_POINTER  KsPinGetFirstCloneStreamPointer(PKSPIN Pin);
		export extern(Windows) PKSSTREAM_POINTER  KsStreamPointerGetNextClone(PKSSTREAM_POINTER StreamPointer);
		export extern(Windows) NTSTATUS KsPinHandshake(PKSPIN Pin, PKSHANDSHAKE In, PKSHANDSHAKE Out);
		export extern(Windows) void KsCompletePendingRequest(PIRP Irp);
		export extern(Windows) KSOBJECTTYPE KsGetObjectTypeFromIrp(PIRP Irp);
		export extern(Windows) PVOID KsGetObjectFromFileObject(PFILE_OBJECT FileObject);
		export extern(Windows) KSOBJECTTYPE KsGetObjectTypeFromFileObject(PFILE_OBJECT FileObject);

		PKSFILTER KsGetFilterFromFileObject(PFILE_OBJECT FileObject)
		{
			return cast(PKSFILTER)KsGetObjectFromFileObject(FileObject);
		}

		PKSPIN KsGetPinFromFileObject(PFILE_OBJECT FileObject)
		{
			return cast(PKSPIN)KsGetObjectFromFileObject(FileObject);
		}

		export extern(Windows) PKSGATE  KsFilterGetAndGate(PKSFILTER Filter);
		export extern(Windows) void KsFilterAcquireProcessingMutex(PKSFILTER Filter);
		export extern(Windows) void KsFilterReleaseProcessingMutex(PKSFILTER Filter);
		export extern(Windows) void KsFilterAttemptProcessing(PKSFILTER Filter, BOOLEAN Asynchronous);
		export extern(Windows) PKSGATE  KsPinGetAndGate(PKSPIN Pin);
		export extern(Windows) void KsPinAttachAndGate(PKSPIN Pin, PKSGATE AndGate);
		export extern(Windows) void KsPinAttachOrGate(PKSPIN Pin, PKSGATE OrGate);
		export extern(Windows) void KsPinAcquireProcessingMutex(PKSPIN Pin);
		export extern(Windows) void KsPinReleaseProcessingMutex(PKSPIN Pin);
		export extern(Windows) BOOLEAN KsProcessPinUpdate(PKSPROCESSPIN ProcessPin);
		export extern(Windows) void KsPinGetCopyRelationships(PKSPIN Pin, PKSPIN* CopySource, PKSPIN* DelegateBranch);
		export extern(Windows) void KsPinAttemptProcessing(PKSPIN Pin, BOOLEAN Asynchronous);
		export extern(Windows) PVOID KsGetParent(PVOID Object);

		PKSDEVICE KsFilterFactoryGetParentDevice(PKSFILTERFACTORY FilterFactory)
		{
			return cast(PKSDEVICE)KsGetParent(cast(PVOID)FilterFactory);
		}

		PKSFILTERFACTORY KsFilterGetParentFilterFactory(PKSFILTER Filter)
		{
			return cast(PKSFILTERFACTORY)KsGetParent(cast(PVOID)Filter);
		}

		export extern(Windows) PKSFILTER KsPinGetParentFilter(PKSPIN Pin);
		export extern(Windows) PVOID KsGetFirstChild(PVOID Object);

		PKSFILTERFACTORY  KsDeviceGetFirstChildFilterFactory(PKSDEVICE Device)
		{
			return cast(PKSFILTERFACTORY)KsGetFirstChild(cast(PVOID)Device);
		}

		PKSFILTER  KsFilterFactoryGetFirstChildFilter(PKSFILTERFACTORY FilterFactory)
		{
			return cast(PKSFILTER)KsGetFirstChild(cast(PVOID)FilterFactory);
		}

		export extern(Windows) ULONG KsFilterGetChildPinCount(PKSFILTER Filter, ULONG PinId);
		export extern(Windows) PKSPIN KsFilterGetFirstChildPin(PKSFILTER Filter, ULONG PinId);
		export extern(Windows) PVOID KsGetNextSibling(PVOID Object);
		export extern(Windows) PKSPIN KsPinGetNextSiblingPin(PKSPIN Pin);
		
		PKSFILTERFACTORY  KsFilterFactoryGetNextSiblingFilterFactory(PKSFILTERFACTORY FilterFactory)
		{
			return cast(PKSFILTERFACTORY)KsGetNextSibling(cast(PVOID)FilterFactory);
		}

		PKSFILTER KsFilterGetNextSiblingFilter(PKSFILTER Filter)
		{
			return cast(PKSFILTER)KsGetNextSibling(cast(PVOID)Filter);
		}

		export extern(Windows) PKSDEVICE KsGetDevice(PVOID Object);

		PKSDEVICE KsFilterFactoryGetDevice(PKSFILTERFACTORY FilterFactory)
		{
			return KsGetDevice(cast(PVOID)FilterFactory);
		}

		PKSDEVICE KsFilterGetDevice(PKSFILTER Filter)
		{
			return KsGetDevice(cast(PVOID)Filter);
		}

		PKSDEVICE KsPinGetDevice(PKSPIN Pin)
		{
			return KsGetDevice(cast(PVOID) Pin);
		}

		export extern(Windows) PKSFILTER KsGetFilterFromIrp(PIRP Irp);
		export extern(Windows) PKSPIN KsGetPinFromIrp(PIRP Irp);
		export extern(Windows) ULONG KsGetNodeIdFromIrp(PIRP Irp);
		export extern(Windows) void KsAcquireControl(PVOID Object);
		export extern(Windows) void KsReleaseControl(PVOID Object);

		void KsFilterAcquireControl(PKSFILTER Filter)
		{
			KsAcquireControl(cast(PVOID)Filter);
		}

		void KsFilterReleaseControl(PKSFILTER Filter)
		{
			KsReleaseControl(cast(PVOID)Filter);
		}

		void KsPinAcquireControl(PKSPIN Pin)
		{
			KsAcquireControl(cast(PVOID)Pin);
		}

		void KsPinReleaseControl(PKSPIN Pin)
		{
			KsReleaseControl(cast(PVOID)Pin);
		}

		export extern(Windows) NTSTATUS KsAddItemToObjectBag(KSOBJECT_BAG ObjectBag, PVOID Item, PFNKSFREE Free);
		export extern(Windows) ULONG KsRemoveItemFromObjectBag(KSOBJECT_BAG ObjectBag, PVOID Item, BOOLEAN Free);

		//KsDiscard(Object,Pointer) KsRemoveItemFromObjectBag( (Object).Bag, (PVOID)(Pointer), TRUE)

		export extern(Windows) NTSTATUS KsAllocateObjectBag(PKSDEVICE Device, KSOBJECT_BAG* ObjectBag);
		export extern(Windows) void KsFreeObjectBag(KSOBJECT_BAG ObjectBag);
		export extern(Windows) NTSTATUS KsCopyObjectBagItems(KSOBJECT_BAG ObjectBagDestination, KSOBJECT_BAG ObjectBagSource);
		export extern(Windows) NTSTATUS _KsEdit(KSOBJECT_BAG ObjectBag, PVOID* PointerToPointerToItem, ULONG NewSize, ULONG OldSize, ULONG Tag);

		//KsEdit(Object,PointerToPointer,Tag) _KsEdit( (Object).Bag, (PVOID*)(PointerToPointer), sizeof(**(PointerToPointer)), sizeof(**(PointerToPointer)), (Tag))
		//KsEditSized(Object,PointerToPointer,NewSize,OldSize,Tag) _KsEdit((Object).Bag,(PVOID*)(PointerToPointer),(NewSize),(OldSize),(Tag))

		export extern(Windows) NTSTATUS KsRegisterFilterWithNoKSPins(PDEVICE_OBJECT DeviceObject, const(GUID)* InterfaceClassGUID, ULONG PinCount, BOOL* PinDirection, KSPIN_MEDIUM* MediumList, GUID* CategoryList);
		export extern(Windows) NTSTATUS KsFilterCreatePinFactory (PKSFILTER Filter, const(KSPIN_DESCRIPTOR_EX)* PinDescriptor, PULONG PinID);
		export extern(Windows) NTSTATUS KsFilterCreateNode(PKSFILTER Filter, const(KSNODE_DESCRIPTOR)* NodeDescriptor, PULONG NodeID);
		export extern(Windows) NTSTATUS KsFilterAddTopologyConnections(PKSFILTER Filter, ULONG NewConnectionsCount, const(KSTOPOLOGY_CONNECTION)* NewTopologyConnections);
		export extern(Windows) NTSTATUS KsPinGetConnectedPinInterface(PKSPIN Pin, const(GUID)* InterfaceId, PVOID* Interface);
		export extern(Windows) PFILE_OBJECT KsPinGetConnectedPinFileObject(PKSPIN Pin);
		export extern(Windows) PDEVICE_OBJECT KsPinGetConnectedPinDeviceObject(PKSPIN Pin);
		export extern(Windows) NTSTATUS KsPinGetConnectedFilterInterface(PKSPIN Pin, const(GUID)* InterfaceId, PVOID* Interface);
		export extern(Windows) NTSTATUS KsPinGetReferenceClockInterface(PKSPIN Pin, PIKSREFERENCECLOCK* Interface);
		export extern(Windows) VOID KsPinSetPinClockTime(PKSPIN Pin, LONGLONG Time);
		export extern(Windows) NTSTATUS KsPinSubmitFrame(PKSPIN Pin, PVOID Data, ULONG Size, PKSSTREAM_HEADER StreamHeader, PVOID Context);
		export extern(Windows) NTSTATUS KsPinSubmitFrameMdl( PKSPIN Pin, PMDL Mdl, PKSSTREAM_HEADER StreamHeader, PVOID Context);
		export extern(Windows) void KsPinRegisterFrameReturnCallback(PKSPIN Pin, PFNKSPINFRAMERETURN FrameReturn);
		export extern(Windows) void KsPinRegisterIrpCompletionCallback(PKSPIN Pin, PFNKSPINIRPCOMPLETION IrpCompletion);
		export extern(Windows) void KsPinRegisterHandshakeCallback(PKSPIN Pin, PFNKSPINHANDSHAKE Handshake);
		export extern(Windows) void KsFilterRegisterPowerCallbacks(PKSFILTER Filter, PFNKSFILTERPOWER Sleep, PFNKSFILTERPOWER Wake);
		export extern(Windows) void KsPinRegisterPowerCallbacks(PKSPIN Pin, PFNKSPINPOWER Sleep, PFNKSPINPOWER Wake);

		export extern(Windows) PUNKNOWN KsRegisterAggregatedClientUnknown(PVOID Object, PUNKNOWN ClientUnknown);
		export extern(Windows) PUNKNOWN KsGetOuterUnknown(PVOID Object);

		PUNKNOWN KsDeviceRegisterAggregatedClientUnknown(PKSDEVICE Device, PUNKNOWN ClientUnknown)
		{
			return KsRegisterAggregatedClientUnknown(cast(PVOID)Device, ClientUnknown);
		}

		PUNKNOWN KsDeviceGetOuterUnknown(PKSDEVICE Device)
		{
			return KsGetOuterUnknown(cast(PVOID)Device);
		}

		PUNKNOWN KsFilterFactoryRegisterAggregatedClientUnknown(PKSFILTERFACTORY FilterFactory, PUNKNOWN ClientUnknown)
		{
			return KsRegisterAggregatedClientUnknown(cast(PVOID)FilterFactory, ClientUnknown);
		}

		PUNKNOWN KsFilterFactoryGetOuterUnknown(PKSFILTERFACTORY FilterFactory)
		{
			return KsGetOuterUnknown(cast(PVOID)FilterFactory);
		}

		PUNKNOWN KsFilterRegisterAggregatedClientUnknown(PKSFILTER Filter, PUNKNOWN ClientUnknown)
		{
			return KsRegisterAggregatedClientUnknown(cast(PVOID)Filter, ClientUnknown);
		}

		PUNKNOWN KsFilterGetOuterUnknown(PKSFILTER Filter)
		{
			return KsGetOuterUnknown(cast(PVOID)Filter);
		}

		PUNKNOWN KsPinRegisterAggregatedClientUnknown(PKSPIN Pin, PUNKNOWN ClientUnknown)
		{
			return KsRegisterAggregatedClientUnknown(cast(PVOID)Pin, ClientUnknown);
		}

		PUNKNOWN KsPinGetOuterUnknown(PKSPIN Pin)
		{
			return KsGetOuterUnknown(cast(PVOID)Pin);
		}
	}
}else{//_NTDDK_
	export extern(Windows) DWORD KsCreateAllocator(HANDLE ConnectionHandle, PKSALLOCATOR_FRAMING AllocatorFraming, PHANDLE AllocatorHandle);
	export extern(Windows) DWORD KsCreateClock(HANDLE ConnectionHandle, PKSCLOCK_CREATE ClockCreate, PHANDLE ClockHandle);
	export extern(Windows) DWORD KsCreatePin(HANDLE FilterHandle, PKSPIN_CONNECT Connect, ACCESS_MASK DesiredAccess, PHANDLE ConnectionHandle);
	export extern(Windows) DWORD KsCreateTopologyNode(HANDLE ParentHandle, PKSNODE_CREATE NodeCreate, ACCESS_MASK DesiredAccess, PHANDLE NodeHandle);
}

}// extern(C)

//DENY_USERMODE_ACCESS( pIrp, CompleteRequest )  if ( pIrp.RequestorMode != KernelMode ) {  pIrp.IoStatus.Information = 0;  pIrp.IoStatus.Status = STATUS_INVALID_DEVICE_REQUEST;  if ( CompleteRequest ) IoCompleteRequest ( pIrp, IO_NO_INCREMENT );  return STATUS_INVALID_DEVICE_REQUEST;  }



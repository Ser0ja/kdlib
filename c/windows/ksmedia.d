/** ksmedia.d

Converted from 'ksmedia.h'.

Version: V7.0
Authors: Koji Kishita
*/
module c.windows.ksmedia;


import c.windows.windef;
import c.windows.guiddef;
import c.windows.ks;
import c.windows.mmsystem;
import c.windows.vptype;


struct KSMULTIPLE_DATA_PROP {
	KSPROPERTY Property;
	KSMULTIPLE_ITEM MultipleItem;
}
alias KSMULTIPLE_DATA_PROP* PKSMULTIPLE_DATA_PROP;

mixin DEFINE_GUID!("KSMEDIUMSETID_MidiBus", "05908040-3246-11D0-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSMEDIUMSETID_VPBus", "A18C15EC-CE43-11D0-ABE7-00A0C9223196");
mixin DEFINE_GUID!("KSINTERFACESETID_Media", "3A13EB40-30A7-11D0-A5D6-28DB04C10000");

enum {
	KSINTERFACE_MEDIA_MUSIC,
	KSINTERFACE_MEDIA_WAVE_BUFFERED,
	KSINTERFACE_MEDIA_WAVE_QUEUED
}
alias int KSINTERFACE_MEDIA;


//(NTDDI_VERSION >= NTDDI_WINXP)
/*	#if !defined(INIT_USBAUDIO_MID)
			INIT_USBAUDIO_MID(guid, id) { (guid)->Data1 = 0x4e1cecd2 + (USHORT)(id); (guid)->Data2 = 0x1679; (guid)->Data3 = 0x463b; (guid)->Data4[0] = 0xa7; (guid)->Data4[1] = 0x2f; (guid)->Data4[2] = 0xa5; (guid)->Data4[3] = 0xbf; (guid)->Data4[4] = 0x64; (guid)->Data4[5] = 0xc8; (guid)->Data4[6] = 0x6e; (guid)->Data4[7] = 0xba; }
			EXTRACT_USBAUDIO_MID(guid) (USHORT)((guid)->Data1 - 0x4e1cecd2)
			DEFINE_USBAUDIO_MID_GUID(id) 0x4e1cecd2+(USHORT)(id), 0x1679, 0x463b, 0xa7, 0x2f, 0xa5, 0xbf, 0x64, 0xc8, 0x6e, 0xba
			INIT_EXBUS_MANUFACTURER_ID INIT_USBAUDIO_MID
			IS_COMPATIBLE_USBAUDIO_MID(guid) (((guid)->Data1 >= 0x4e1cecd2) && ((guid)->Data1 < 0x4e1cecd2 + 0xffff) && ((guid)->Data2 == 0x1679) && ((guid)->Data3 == 0x463b) && ((guid)->Data4[0] == 0xa7) && ((guid)->Data4[1] == 0x2f) && ((guid)->Data4[2] == 0xa5) && ((guid)->Data4[3] == 0xbf) && ((guid)->Data4[4] == 0x64) && ((guid)->Data4[5] == 0xc8) && ((guid)->Data4[6] == 0x6e) && ((guid)->Data4[7] == 0xba))
	#endif

	#if !defined(INIT_USBAUDIO_PID)
			INIT_USBAUDIO_PID(guid, id) { (guid)->Data1 = 0xabcc5a5e + (USHORT)(id); (guid)->Data2 = 0xc263; (guid)->Data3 = 0x463b; (guid)->Data4[0] = 0xa7; (guid)->Data4[1] = 0x2f; (guid)->Data4[2] = 0xa5; (guid)->Data4[3] = 0xbf; (guid)->Data4[4] = 0x64; (guid)->Data4[5] = 0xc8; (guid)->Data4[6] = 0x6e; (guid)->Data4[7] = 0xba; }
			EXTRACT_USBAUDIO_PID(guid) (USHORT)((guid)->Data1 - 0xabcc5a5e)
			DEFINE_USBAUDIO_PID_GUID(id) 0xabcc5a5e+(USHORT)(id), 0xc263, 0x463b, 0xa7, 0x2f, 0xa5, 0xbf, 0x64, 0xc8, 0x6e, 0xba
			INIT_EXBUS_PRODUCT_ID INIT_USBAUDIO_PID
			IS_COMPATIBLE_USBAUDIO_PID(guid) (((guid)->Data1 >= 0xabcc5a5e) && ((guid)->Data1 < 0xabcc5a5e + 0xffff) && ((guid)->Data2 == 0xc263) && ((guid)->Data3 == 0x463b) && ((guid)->Data4[0] == 0xa7) && ((guid)->Data4[1] == 0x2f) && ((guid)->Data4[2] == 0xa5) && ((guid)->Data4[3] == 0xbf) && ((guid)->Data4[4] == 0x64) && ((guid)->Data4[5] == 0xc8) && ((guid)->Data4[6] == 0x6e) && ((guid)->Data4[7] == 0xba))
	#endif

	#if !defined(INIT_USBAUDIO_PRODUCT_NAME)
			INIT_USBAUDIO_PRODUCT_NAME(guid, vid, pid, strIndex) { (guid)->Data1 = 0XFC575048 + (USHORT)(vid); (guid)->Data2 = 0x2E08 + (USHORT)(pid); (guid)->Data3 = 0x463B + (USHORT)(strIndex); (guid)->Data4[0] = 0xA7; (guid)->Data4[1] = 0x2F; (guid)->Data4[2] = 0xA5; (guid)->Data4[3] = 0xBF; (guid)->Data4[4] = 0x64; (guid)->Data4[5] = 0xC8; (guid)->Data4[6] = 0x6E; (guid)->Data4[7] = 0xBA; }
			DEFINE_USBAUDIO_PRODUCT_NAME(vid, pid, strIndex) 0xFC575048+(USHORT)(vid), 0x2E08+(USHORT)(pid), 0x463B+(USHORT)(strIndex), 0xA7, 0x2F, 0xA5, 0xBF, 0x64, 0xC8, 0x6E, 0xBA
	#endif

		INIT_EXBUS_PRODUCT_NAME INIT_USBAUDIO_PRODUCT_NAME
*/
	mixin DEFINE_GUID!("KSCOMPONENTID_USBAUDIO", "8F1275F0-26E9-4264-BA4D-39FFF01D94AA");

/*
	INIT_USB_TERMINAL(guid, id) { (guid)->Data1 = 0xDFF219E0 + (USHORT)(id); (guid)->Data2 = 0xF70F; (guid)->Data3 = 0x11D0; (guid)->Data4[0] = 0xb9; (guid)->Data4[1] = 0x17; (guid)->Data4[2] = 0x00; (guid)->Data4[3] = 0xa0; (guid)->Data4[4] = 0xc9; (guid)->Data4[5] = 0x22; (guid)->Data4[6] = 0x31; (guid)->Data4[7] = 0x96; }
	EXTRACT_USB_TERMINAL(guid) (USHORT)((guid)->Data1 - 0xDFF219E0)
	DEFINE_USB_TERMINAL_GUID(id) 0xDFF219E0+(USHORT)(id), 0xF70F, 0x11D0, 0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
*/

mixin DEFINE_GUID!("KSNODETYPE_INPUT_UNDEFINED", "DFF21BE0-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_MICROPHONE", "DFF21BE1-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_DESKTOP_MICROPHONE", "DFF21BE2-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_PERSONAL_MICROPHONE", "DFF21BE3-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_OMNI_DIRECTIONAL_MICROPHONE", "DFF21BE4-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_MICROPHONE_ARRAY", "DFF21BE5-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_PROCESSING_MICROPHONE_ARRAY", "DFF21BE6-F70F-11D0-B917-00A0C9223196");

//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR", "830a44f2-a32d-476b-be97-42845673b35a");

mixin DEFINE_GUID!("KSNODETYPE_OUTPUT_UNDEFINED", "DFF21CE0-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_SPEAKER", "DFF21CE1-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_HEADPHONES", "DFF21CE2-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_HEAD_MOUNTED_DISPLAY_AUDIO", "DFF21CE3-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_DESKTOP_SPEAKER", "DFF21CE4-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_ROOM_SPEAKER", "DFF21CE5-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_COMMUNICATION_SPEAKER", "DFF21CE6-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_LOW_FREQUENCY_EFFECTS_SPEAKER", "DFF21CE7-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_BIDIRECTIONAL_UNDEFINED", "DFF21DE0-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_HANDSET", "DFF21DE1-F70F-11D0-B917-00A0C9223196");

alias KSNODETYPE_PERSONAL_MICROPHONE KSNODETYPE_HEADSET_MICROPHONE;
alias KSNODETYPE_COMMUNICATION_SPEAKER KSNODETYPE_HEADSET_SPEAKERS;

mixin DEFINE_GUID!("KSNODETYPE_HEADSET", "DFF21DE2-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_SPEAKERPHONE_NO_ECHO_REDUCTION", "DFF21DE3-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_ECHO_SUPPRESSING_SPEAKERPHONE", "DFF21DE4-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_ECHO_CANCELING_SPEAKERPHONE", "DFF21DE5-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_TELEPHONY_UNDEFINED", "DFF21EE0-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_PHONE_LINE", "DFF21EE1-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_TELEPHONE", "DFF21EE2-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_DOWN_LINE_PHONE", "DFF21EE3-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_EXTERNAL_UNDEFINED", "DFF21FE0-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_ANALOG_CONNECTOR", "DFF21FE1-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_DIGITAL_AUDIO_INTERFACE", "DFF21FE2-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_LINE_CONNECTOR", "DFF21FE3-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_LEGACY_AUDIO_CONNECTOR", "DFF21FE4-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_SPDIF_INTERFACE", "DFF21FE5-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_1394_DA_STREAM", "DFF21FE6-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_1394_DV_STREAM_SOUNDTRACK", "DFF21FE7-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_EMBEDDED_UNDEFINED", "DFF220E0-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_LEVEL_CALIBRATION_NOISE_SOURCE", "DFF220E1-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_EQUALIZATION_NOISE", "DFF220E2-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_CD_PLAYER", "DFF220E3-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_DAT_IO_DIGITAL_AUDIO_TAPE", "DFF220E4-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_DCC_IO_DIGITAL_COMPACT_CASSETTE", "DFF220E5-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_MINIDISK", "DFF220E6-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_ANALOG_TAPE", "DFF220E7-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_PHONOGRAPH", "DFF220E8-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_VCR_AUDIO", "DFF220E9-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_VIDEO_DISC_AUDIO", "DFF220EA-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_DVD_AUDIO", "DFF220EB-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_TV_TUNER_AUDIO", "DFF220EC-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_SATELLITE_RECEIVER_AUDIO", "DFF220ED-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_CABLE_TUNER_AUDIO", "DFF220EE-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_DSS_AUDIO", "DFF220EF-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_RADIO_RECEIVER", "DFF220F0-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_RADIO_TRANSMITTER", "DFF220F1-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_MULTITRACK_RECORDER", "DFF220F2-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_SYNTHESIZER", "DFF220F3-F70F-11D0-B917-00A0C9223196");
mixin DEFINE_GUID!("KSNODETYPE_HDMI_INTERFACE", "D1B9CC2A-F519-417f-91C9-55FA65481001");
mixin DEFINE_GUID!("KSNODETYPE_DISPLAYPORT_INTERFACE", "E47E4031-3EA6-418d-8F9B-B73843CCBA97");
mixin DEFINE_GUID!("KSNODETYPE_MIDI_JACK", "265E0C3F-FA39-4df3-AB04-BE01B91E299A");
mixin DEFINE_GUID!("KSNODETYPE_MIDI_ELEMENT", "01C6FE66-6E48-4c65-AC9B-52DB5D656C7E");
mixin DEFINE_GUID!("PINNAME_SPDIF_OUT", "3A264481-E52C-4b82-8E7A-C8E2F91DC380");
mixin DEFINE_GUID!("PINNAME_SPDIF_IN", "15DC9025-22AD-41b3-8875-F4CEB0299E20");
mixin DEFINE_GUID!("PINNAME_HDMI_OUT", "387BFC03-E7EF-4901-86E0-35B7C32B00EF");
mixin DEFINE_GUID!("PINNAME_DISPLAYPORT_OUT", "21FBB329-1A4A-48da-A076-2318A3C59B26");

//(NTDDI_VERSION < NTDDI_VISTA)
	mixin DEFINE_GUID!("KSNODETYPE_SWSYNTH", "423274A0-8B81-11D1-A050-0000F8004788");
	mixin DEFINE_GUID!("KSNODETYPE_SWMIDI", "CB9BEFA0-A251-11D1-A050-0000F8004788");

//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("KSNODETYPE_DRM_DESCRAMBLE", "FFBB6E3F-CCFE-4D84-90D9-421418B03A8E");

mixin DEFINE_GUID!("KSCATEGORY_AUDIO", "6994AD04-93EF-11D0-A3CC-00A0C9223196");
mixin DEFINE_GUID!("KSCATEGORY_VIDEO", "6994AD05-93EF-11D0-A3CC-00A0C9223196");

//(NTDDI_VERSION >= NTDDI_VISTA)
	mixin DEFINE_GUID!("KSCATEGORY_REALTIME", "EB115FFC-10C8-4964-831D-6DCB02E6F23F");

mixin DEFINE_GUID!("KSCATEGORY_TEXT", "6994AD06-93EF-11D0-A3CC-00A0C9223196");
mixin DEFINE_GUID!("KSCATEGORY_NETWORK", "67C9CC3C-69C4-11D2-8759-00A0C9223196");
mixin DEFINE_GUID!("KSCATEGORY_TOPOLOGY", "DDA54A40-1E4C-11D1-A050-405705C10000");
mixin DEFINE_GUID!("KSCATEGORY_VIRTUAL", "3503EAC4-1F26-11D1-8AB0-00A0C9223196");
mixin DEFINE_GUID!("KSCATEGORY_ACOUSTIC_ECHO_CANCEL", "BF963D80-C559-11D0-8A2B-00A0C9255AC1");

//(NTDDI_VERSION < NTDDI_VISTA)
	mixin DEFINE_GUID!("KSCATEGORY_SYSAUDIO", "A7C7A5B1-5AF3-11D1-9CED-00A024BF0407");
	mixin DEFINE_GUID!("KSCATEGORY_WDMAUD", "3E227E76-690D-11D2-8161-0000F8775BF1");

//(NTDDI_VERSION >= NTDDI_WINXP && NTDDI_VERSION < NTDDI_VISTA)
	mixin DEFINE_GUID!("KSCATEGORY_AUDIO_GFX", "9BAF9572-340C-11D3-ABDC-00A0C90AB16F");

//(NTDDI_VERSION >= NTDDI_WINXP && NTDDI_VERSION < NTDDI_VISTA)
	mixin DEFINE_GUID!("KSCATEGORY_AUDIO_SPLITTER", "9EA331FA-B91B-45F8-9285-BD2BC77AFCDE");

alias KSNODETYPE_SYNTHESIZER KSCATEGORY_SYNTHESIZER;

//(NTDDI_VERSION >= NTDDI_WINXP)
	alias KSNODETYPE_DRM_DESCRAMBLE KSCATEGORY_DRM_DESCRAMBLE;

//(NTDDI_VERSION < NTDDI_VISTA)
	mixin DEFINE_GUID!("KSCATEGORY_AUDIO_DEVICE", "FBF6F530-07B9-11D2-A71E-0000F8004788");
	mixin DEFINE_GUID!("KSCATEGORY_PREFERRED_WAVEOUT_DEVICE", "D6C5066E-72C1-11D2-9755-0000F8004788");
	mixin DEFINE_GUID!("KSCATEGORY_PREFERRED_WAVEIN_DEVICE", "D6C50671-72C1-11D2-9755-0000F8004788");
	mixin DEFINE_GUID!("KSCATEGORY_PREFERRED_MIDIOUT_DEVICE", "D6C50674-72C1-11D2-9755-0000F8004788");

mixin DEFINE_GUID!("KSCATEGORY_WDMAUD_USE_PIN_NAME", "47A4FA20-A251-11D1-A050-0000F8004788");
mixin DEFINE_GUID!("KSCATEGORY_ESCALANTE_PLATFORM_DRIVER", "74f3aea8-9768-11d1-8e07-00a0c95ec22e");
mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_VIDEO", "73646976-0000-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_AUDIO", "73647561-0000-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_TEXT", "73747874-0000-0010-8000-00aa00389b71");

//DEFINE_WAVEFORMATEX_GUID(x) (USHORT)(x), 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71


mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_WAVEFORMATEX", "00000000-0000-0010-8000-00aa00389b71");

/*
#if !defined( INIT_WAVEFORMATEX_GUID )
		INIT_WAVEFORMATEX_GUID(Guid, x) { *(Guid) = KSDATAFORMAT_SUBTYPE_WAVEFORMATEX; (Guid)->Data1 = (USHORT)(x); }
#endif

#if !defined( EXTRACT_WAVEFORMATEX_ID )
		EXTRACT_WAVEFORMATEX_ID(Guid) (USHORT)((Guid)->Data1)
#endif

#if !defined( IS_VALID_WAVEFORMATEX_GUID )
		IS_VALID_WAVEFORMATEX_GUID(Guid) (!memcmp(((PUSHORT)&KSDATAFORMAT_SUBTYPE_WAVEFORMATEX) + 1, ((PUSHORT)(Guid)) + 1, sizeof(GUID) - sizeof(USHORT)))
#endif

#if !defined(INIT_MMREG_MID)

		INIT_MMREG_MID(guid, id) { (guid)->Data1 = 0xd5a47fa7 + (USHORT)(id); (guid)->Data2 = 0x6d98; (guid)->Data3 = 0x11d1; (guid)->Data4[0] = 0xa2; (guid)->Data4[1] = 0x1a; (guid)->Data4[2] = 0x00; (guid)->Data4[3] = 0xa0; (guid)->Data4[4] = 0xc9; (guid)->Data4[5] = 0x22; (guid)->Data4[6] = 0x31; (guid)->Data4[7] = 0x96; }
		EXTRACT_MMREG_MID(guid) (USHORT)((guid)->Data1 - 0xd5a47fa7)
		DEFINE_MMREG_MID_GUID(id) 0xd5a47fa7+(USHORT)(id), 0x6d98, 0x11d1, 0xa2, 0x1a, 0x00, 0xa0, 0xc9, 0x22, 0x31, 0x96

		IS_COMPATIBLE_MMREG_MID(guid) (((guid)->Data1 >= 0xd5a47fa7) && ((guid)->Data1 < 0xd5a47fa7 + 0xffff) && ((guid)->Data2 == 0x6d98) && ((guid)->Data3 == 0x11d1) && ((guid)->Data4[0] == 0xa2) && ((guid)->Data4[1] == 0x1a) && ((guid)->Data4[2] == 0x00) && ((guid)->Data4[3] == 0xa0) && ((guid)->Data4[4] == 0xc9) && ((guid)->Data4[5] == 0x22) && ((guid)->Data4[6] == 0x31) && ((guid)->Data4[7] == 0x96))
#endif

#if !defined(INIT_MMREG_PID)

		INIT_MMREG_PID(guid, id) { (guid)->Data1 = 0xe36dc2ac + (USHORT)(id); (guid)->Data2 = 0x6d9a; (guid)->Data3 = 0x11d1; (guid)->Data4[0] = 0xa2; (guid)->Data4[1] = 0x1a; (guid)->Data4[2] = 0x00; (guid)->Data4[3] = 0xa0; (guid)->Data4[4] = 0xc9; (guid)->Data4[5] = 0x22; (guid)->Data4[6] = 0x31; (guid)->Data4[7] = 0x96; }
		EXTRACT_MMREG_PID(guid) (USHORT)((guid)->Data1 - 0xe36dc2ac)
		DEFINE_MMREG_PID_GUID(id) 0xe36dc2ac+(USHORT)(id), 0x6d9a, 0x11d1, 0xa2, 0x1a, 0x00, 0xa0, 0xc9, 0x22, 0x31, 0x96

		IS_COMPATIBLE_MMREG_PID(guid) (((guid)->Data1 >= 0xe36dc2ac) && ((guid)->Data1 < 0xe36dc2ac + 0xffff) && ((guid)->Data2 == 0x6d9a) && ((guid)->Data3 == 0x11d1) && ((guid)->Data4[0] == 0xa2) && ((guid)->Data4[1] == 0x1a) && ((guid)->Data4[2] == 0x00) && ((guid)->Data4[3] == 0xa0) && ((guid)->Data4[4] == 0xc9) && ((guid)->Data4[5] == 0x22) && ((guid)->Data4[6] == 0x31) && ((guid)->Data4[7] == 0x96))
#endif
*/

mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_ANALOG", "6dba3190-67bd-11cf-a0f7-0020afd156e4");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_PCM", "00000001-0000-0010-8000-00aa00389b71");

mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEEE_FLOAT", "00000003-0000-0010-8000-00aa00389b71");

//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_DRM", "00000009-0000-0010-8000-00aa00389b71");

mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_ALAW", "00000006-0000-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_MULAW", "00000007-0000-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_ADPCM", "00000002-0000-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_MPEG", "00000050-0000-0010-8000-00aa00389b71");

mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_VC_ID", "AD98D184-AAC3-11D0-A41C-00A0C9223196");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_WAVEFORMATEX", "05589f81-c356-11ce-bf01-00aa0055595a");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_DSOUND", "518590a2-a184-11d0-8522-00c04fd9baf3");

align(1){
	struct KSDATAFORMAT_WAVEFORMATEX {
		KSDATAFORMAT DataFormat;
		WAVEFORMATEX WaveFormatEx;
	}
	alias KSDATAFORMAT_WAVEFORMATEX* PKSDATAFORMAT_WAVEFORMATEX;

	struct WAVEFORMATEXTENSIBLE {
		WAVEFORMATEX Format;
		union {
			WORD wValidBitsPerSample;
			WORD wSamplesPerBlock;
			WORD wReserved;
		}
		DWORD dwChannelMask;
		GUID SubFormat;
	}
	alias WAVEFORMATEXTENSIBLE* PWAVEFORMATEXTENSIBLE;

	struct WAVEFORMATEXTENSIBLE_IEC61937 {
		WAVEFORMATEXTENSIBLE FormatExt;
		DWORD dwEncodedSamplesPerSec;
		DWORD dwEncodedChannelCount;
		DWORD dwAverageBytesPerSec;
	}
	alias WAVEFORMATEXTENSIBLE_IEC61937* PWAVEFORMATEXTENSIBLE_IEC61937;

	enum WAVE_FORMAT_EXTENSIBLE = 0xFFFE;

	struct KSDSOUND_BUFFERDESC {
		ULONG Flags;
		ULONG Control;
		WAVEFORMATEX WaveFormatEx;
	}
	alias KSDSOUND_BUFFERDESC* PKSDSOUND_BUFFERDESC;

	struct KSDATAFORMAT_DSOUND {
		KSDATAFORMAT DataFormat;
		KSDSOUND_BUFFERDESC BufferDesc;
	}
	alias KSDATAFORMAT_DSOUND* PKSDATAFORMAT_DSOUND;

}// align(1)

enum {
	KSDSOUND_BUFFER_PRIMARY     = 0x00000001,
	KSDSOUND_BUFFER_STATIC      = 0x00000002,
	KSDSOUND_BUFFER_LOCHARDWARE = 0x00000004,
	KSDSOUND_BUFFER_LOCSOFTWARE = 0x00000008,
}

enum {
	KSDSOUND_BUFFER_CTRL_3D             = 0x00000001,
	KSDSOUND_BUFFER_CTRL_FREQUENCY      = 0x00000002,
	KSDSOUND_BUFFER_CTRL_PAN            = 0x00000004,
	KSDSOUND_BUFFER_CTRL_VOLUME         = 0x00000008,
	KSDSOUND_BUFFER_CTRL_POSITIONNOTIFY = 0x00000010,
}

struct KSAUDIO_POSITION {
	DWORDLONG PlayOffset;
	DWORDLONG WriteOffset;
}
alias KSAUDIO_POSITION* PKSAUDIO_POSITION;

//(NTDDI_VERSION >= NTDDI_VISTA)
	enum {
		KSMICARRAY_MICTYPE_OMNIDIRECTIONAL,
		KSMICARRAY_MICTYPE_SUBCARDIOID,
		KSMICARRAY_MICTYPE_CARDIOID,
		KSMICARRAY_MICTYPE_SUPERCARDIOID,
		KSMICARRAY_MICTYPE_HYPERCARDIOID,
		KSMICARRAY_MICTYPE_8SHAPED,
		KSMICARRAY_MICTYPE_VENDORDEFINED = 0x0F
	}
	alias int KSMICARRAY_MICTYPE;

	struct KSAUDIO_MICROPHONE_COORDINATES {
		USHORT usType;
		SHORT wXCoord;
		SHORT wYCoord;
		SHORT wZCoord;
		SHORT wVerticalAngle;
		SHORT wHorizontalAngle;
	}
	alias KSAUDIO_MICROPHONE_COORDINATES* PKSAUDIO_MICROPHONE_COORDINATES;

	enum {
		KSMICARRAY_MICARRAYTYPE_LINEAR,
		KSMICARRAY_MICARRAYTYPE_PLANAR,
		KSMICARRAY_MICARRAYTYPE_3D
	}
	alias int KSMICARRAY_MICARRAYTYPE;

	struct KSAUDIO_MIC_ARRAY_GEOMETRY {
		USHORT usVersion;
		USHORT usMicArrayType;
		SHORT wVerticalAngleBegin;
		SHORT wVerticalAngleEnd;
		SHORT wHorizontalAngleBegin;
		SHORT wHorizontalAngleEnd;
		USHORT usFrequencyBandLo;
		USHORT usFrequencyBandHi;
		USHORT usNumberOfMicrophones;
		KSAUDIO_MICROPHONE_COORDINATES KsMicCoord[1];
	}
	alias KSAUDIO_MIC_ARRAY_GEOMETRY* PKSAUDIO_MIC_ARRAY_GEOMETRY;

struct DS3DVECTOR {
	union {
		FLOAT x;
		FLOAT dvX;
	}
	union {
		FLOAT y;
		FLOAT dvY;
	}
	union {
		FLOAT z;
		FLOAT dvZ;
	}
}
alias DS3DVECTOR* PDS3DVECTOR;

mixin DEFINE_GUID!("KSPROPSETID_DirectSound3DListener", "437b3414-d060-11d0-8583-00c04fd9baf3");

enum {
	KSPROPERTY_DIRECTSOUND3DLISTENER_ALL,
	KSPROPERTY_DIRECTSOUND3DLISTENER_POSITION,
	KSPROPERTY_DIRECTSOUND3DLISTENER_VELOCITY,
	KSPROPERTY_DIRECTSOUND3DLISTENER_ORIENTATION,
	KSPROPERTY_DIRECTSOUND3DLISTENER_DISTANCEFACTOR,
	KSPROPERTY_DIRECTSOUND3DLISTENER_ROLLOFFFACTOR,
	KSPROPERTY_DIRECTSOUND3DLISTENER_DOPPLERFACTOR,
	KSPROPERTY_DIRECTSOUND3DLISTENER_BATCH,
	KSPROPERTY_DIRECTSOUND3DLISTENER_ALLOCATION
}
alias int KSPROPERTY_DIRECTSOUND3DLISTENER;

struct KSDS3D_LISTENER_ALL {
	DS3DVECTOR Position;
	DS3DVECTOR Velocity;
	DS3DVECTOR OrientFront;
	DS3DVECTOR OrientTop;
	FLOAT DistanceFactor;
	FLOAT RolloffFactor;
	FLOAT DopplerFactor;
}
alias KSDS3D_LISTENER_ALL* PKSDS3D_LISTENER_ALL;

struct KSDS3D_LISTENER_ORIENTATION {
	DS3DVECTOR Front;
	DS3DVECTOR Top;
}
alias KSDS3D_LISTENER_ORIENTATION* PKSDS3D_LISTENER_ORIENTATION;

mixin DEFINE_GUID!("KSPROPSETID_DirectSound3DBuffer", "437b3411-d060-11d0-8583-00c04fd9baf3");

enum {
	KSPROPERTY_DIRECTSOUND3DBUFFER_ALL,
	KSPROPERTY_DIRECTSOUND3DBUFFER_POSITION,
	KSPROPERTY_DIRECTSOUND3DBUFFER_VELOCITY,
	KSPROPERTY_DIRECTSOUND3DBUFFER_CONEANGLES,
	KSPROPERTY_DIRECTSOUND3DBUFFER_CONEORIENTATION,
	KSPROPERTY_DIRECTSOUND3DBUFFER_CONEOUTSIDEVOLUME,
	KSPROPERTY_DIRECTSOUND3DBUFFER_MINDISTANCE,
	KSPROPERTY_DIRECTSOUND3DBUFFER_MAXDISTANCE,
	KSPROPERTY_DIRECTSOUND3DBUFFER_MODE
}
alias int KSPROPERTY_DIRECTSOUND3DBUFFER;

struct KSDS3D_BUFFER_ALL {
	DS3DVECTOR Position;
	DS3DVECTOR Velocity;
	ULONG InsideConeAngle;
	ULONG OutsideConeAngle;
	DS3DVECTOR ConeOrientation;
	LONG ConeOutsideVolume;
	FLOAT MinDistance;
	FLOAT MaxDistance;
	ULONG Mode;
}
alias KSDS3D_BUFFER_ALL* PKSDS3D_BUFFER_ALL;

struct KSDS3D_BUFFER_CONE_ANGLES {
	ULONG InsideConeAngle;
	ULONG OutsideConeAngle;
}
alias KSDS3D_BUFFER_CONE_ANGLES* PKSDS3D_BUFFER_CONE_ANGLES;

enum {
	KSAUDIO_STEREO_SPEAKER_GEOMETRY_HEADPHONE = -1,
	KSAUDIO_STEREO_SPEAKER_GEOMETRY_MIN       = 5,
	KSAUDIO_STEREO_SPEAKER_GEOMETRY_NARROW    = 10,
	KSAUDIO_STEREO_SPEAKER_GEOMETRY_WIDE      = 20,
	KSAUDIO_STEREO_SPEAKER_GEOMETRY_MAX       = 180,
}

enum {
	KSDSOUND_3D_MODE_NORMAL       = 0x00000000,
	KSDSOUND_3D_MODE_HEADRELATIVE = 0x00000001,
	KSDSOUND_3D_MODE_DISABLE      = 0x00000002,
	KSDSOUND_BUFFER_CTRL_HRTF_3D  = 0x40000000,
}

struct KSDS3D_HRTF_PARAMS_MSG {
	ULONG Size;
	ULONG Enabled;
	BOOL SwapChannels;
	BOOL ZeroAzimuth;
	BOOL CrossFadeOutput;
	ULONG FilterSize;
}
alias KSDS3D_HRTF_PARAMS_MSG* PKSDS3D_HRTF_PARAMS_MSG;

enum {
	FULL_FILTER,
	LIGHT_FILTER,
	KSDS3D_FILTER_QUALITY_COUNT
}
alias int KSDS3D_HRTF_FILTER_QUALITY;

struct KSDS3D_HRTF_INIT_MSG {
	ULONG Size;
	KSDS3D_HRTF_FILTER_QUALITY Quality;
	FLOAT SampleRate;
	ULONG MaxFilterSize;
	ULONG FilterTransientMuteLength;
	ULONG FilterOverlapBufferLength;
	ULONG OutputOverlapBufferLength;
	ULONG Reserved;
}
alias KSDS3D_HRTF_INIT_MSG* PKSDS3D_HRTF_INIT_MSG;

enum {
	FLOAT_COEFF,
	SHORT_COEFF,
	KSDS3D_COEFF_COUNT
}
alias int  KSDS3D_HRTF_COEFF_FORMAT;

enum {
	DIRECT_FORM,
	CASCADE_FORM,
	KSDS3D_FILTER_METHOD_COUNT
}
alias int  KSDS3D_HRTF_FILTER_METHOD;

enum {
	DS3D_HRTF_VERSION_1
}
alias int KSDS3D_HRTF_FILTER_VERSION;

struct KSDS3D_HRTF_FILTER_FORMAT_MSG {
	KSDS3D_HRTF_FILTER_METHOD FilterMethod;
	KSDS3D_HRTF_COEFF_FORMAT CoeffFormat;
	KSDS3D_HRTF_FILTER_VERSION Version;
	ULONG Reserved;
}
alias KSDS3D_HRTF_FILTER_FORMAT_MSG* PKSDS3D_HRTF_FILTER_FORMAT_MSG;

mixin DEFINE_GUID!("KSPROPSETID_Hrtf3d", "b66decb0-a083-11d0-851e-00c04fd9baf3");

enum {
	KSPROPERTY_HRTF3D_PARAMS = 0,
	KSPROPERTY_HRTF3D_INITIALIZE,
	KSPROPERTY_HRTF3D_FILTER_FORMAT
}
alias int  KSPROPERTY_HRTF3D;

struct KSDS3D_ITD_PARAMS {
	LONG Channel;
	FLOAT VolSmoothScale;
	FLOAT TotalDryAttenuation;
	FLOAT TotalWetAttenuation;
	LONG SmoothFrequency;
	LONG Delay;
}
alias KSDS3D_ITD_PARAMS* PKSDS3D_ITD_PARAMS;

struct KSDS3D_ITD_PARAMS_MSG {
	ULONG Enabled;
	KSDS3D_ITD_PARAMS LeftParams;
	KSDS3D_ITD_PARAMS RightParams;
	ULONG Reserved;
}
alias KSDS3D_ITD_PARAMS_MSG* PKSDS3D_ITD_PARAMS_MSG;

mixin DEFINE_GUID!("KSPROPSETID_Itd3d", "6429f090-9fd9-11d0-a75b-00a0c90365e3");

enum {
	KSPROPERTY_ITD3D_PARAMS = 0
}
alias int KSPROPERTY_ITD3D;

struct KSDATARANGE_AUDIO {
	KSDATARANGE DataRange;
	ULONG MaximumChannels;
	ULONG MinimumBitsPerSample;
	ULONG MaximumBitsPerSample;
	ULONG MinimumSampleFrequency;
	ULONG MaximumSampleFrequency;
}
alias KSDATARANGE_AUDIO* PKSDATARANGE_AUDIO;

mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_RIFF", "4995DAEE-9EE6-11D0-A40E-00A0C9223196");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_RIFFWAVE", "e436eb8b-524f-11ce-9f53-0020af0ba770");
mixin DEFINE_GUID!("KSPROPSETID_Bibliographic", "07BA150E-E2B1-11D0-AC17-00A0C9223196");

enum {
	KSPROPERTY_BIBLIOGRAPHIC_LEADER                      = ('R' << 24) | ('D' << 16) | ('L' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_LCCN                        = ('0' << 24) | ('1' << 16) | ('0' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_ISBN                        = ('0' << 24) | ('2' << 16) | ('0' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_ISSN                        = ('2' << 24) | ('2' << 16) | ('0' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_CATALOGINGSOURCE            = ('0' << 24) | ('4' << 16) | ('0' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_MAINPERSONALNAME            = ('0' << 24) | ('0' << 16) | ('1' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_MAINCORPORATEBODY           = ('0' << 24) | ('1' << 16) | ('1' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_MAINMEETINGNAME             = ('1' << 24) | ('1' << 16) | ('1' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_MAINUNIFORMTITLE            = ('0' << 24) | ('3' << 16) | ('1' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_UNIFORMTITLE                = ('0' << 24) | ('4' << 16) | ('2' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_TITLESTATEMENT              = ('5' << 24) | ('4' << 16) | ('2' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_VARYINGFORMTITLE            = ('6' << 24) | ('4' << 16) | ('2' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_PUBLICATION                 = ('0' << 24) | ('6' << 16) | ('2' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_PHYSICALDESCRIPTION         = ('0' << 24) | ('0' << 16) | ('3' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTITLE             = ('0' << 24) | ('4' << 16) | ('4' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENT             = ('0' << 24) | ('9' << 16) | ('4' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_GENERALNOTE                 = ('0' << 24) | ('0' << 16) | ('5' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_BIBLIOGRAPHYNOTE            = ('4' << 24) | ('0' << 16) | ('5' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_CONTENTSNOTE                = ('5' << 24) | ('0' << 16) | ('5' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_CREATIONCREDIT              = ('8' << 24) | ('0' << 16) | ('5' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_CITATION                    = ('0' << 24) | ('1' << 16) | ('5' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_PARTICIPANT                 = ('1' << 24) | ('1' << 16) | ('5' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_SUMMARY                     = ('0' << 24) | ('2' << 16) | ('5' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_TARGETAUDIENCE              = ('1' << 24) | ('2' << 16) | ('5' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_ADDEDFORMAVAILABLE          = ('0' << 24) | ('3' << 16) | ('5' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_SYSTEMDETAILS               = ('8' << 24) | ('3' << 16) | ('5' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_AWARDS                      = ('6' << 24) | ('8' << 16) | ('5' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYPERSONALNAME      = ('0' << 24) | ('0' << 16) | ('6' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTOPICALTERM       = ('0' << 24) | ('5' << 16) | ('6' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYGEOGRAPHIC        = ('1' << 24) | ('5' << 16) | ('6' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMGENRE              = ('5' << 24) | ('5' << 16) | ('6' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMCURRICULUM         = ('8' << 24) | ('5' << 16) | ('6' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYUNIFORMTITLE      = ('0' << 24) | ('3' << 16) | ('7' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYRELATED           = ('0' << 24) | ('4' << 16) | ('7' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTPERSONALNAME = ('0' << 24) | ('0' << 16) | ('8' << 8) | ' ',
	KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTUNIFORMTITLE = ('0' << 24) | ('3' << 16) | ('8' << 8) | ' '
}
alias int KSPROPERTY_BIBLIOGRAPHIC;

mixin DEFINE_GUID!("KSPROPSETID_TopologyNode", "45FFAAA1-6E1B-11D0-BCF2-444553540000");

enum {
	KSPROPERTY_TOPOLOGYNODE_ENABLE = 1,
	//(NTDDI_VERSION >= NTDDI_WINXP)
		KSPROPERTY_TOPOLOGYNODE_RESET
}
alias int KSPROPERTY_TOPOLOGYNODE;

//(NTDDI_VERSION >= NTDDI_WINXP)
	version(none){//_NTDDK_
		alias extern(Windows) NTSTATUS function(PFILE_OBJECT PinFileObject, PUCHAR* ppPlayPosition, PLONG plOffset) PRTAUDIOGETPOSITION;
	}
	mixin DEFINE_GUID!("KSPROPSETID_RtAudio", "A855A48C-2F78-4729-9051-1968746B9EEF");

	enum {
		KSPROPERTY_RTAUDIO_GETPOSITIONFUNCTION,
		//(NTDDI_VERSION >= NTDDI_VISTA)
			KSPROPERTY_RTAUDIO_BUFFER,
			KSPROPERTY_RTAUDIO_HWLATENCY,
			KSPROPERTY_RTAUDIO_POSITIONREGISTER,
			KSPROPERTY_RTAUDIO_CLOCKREGISTER,
			KSPROPERTY_RTAUDIO_BUFFER_WITH_NOTIFICATION,
			KSPROPERTY_RTAUDIO_REGISTER_NOTIFICATION_EVENT,
			KSPROPERTY_RTAUDIO_UNREGISTER_NOTIFICATION_EVENT,
		//(NTDDI_VERSION >= NTDDI_WIN7)
			KSPROPERTY_RTAUDIO_QUERY_NOTIFICATION_SUPPORT
	}
	alias int KSPROPERTY_RTAUDIO;

	//(NTDDI_VERSION >= NTDDI_VISTA)
		struct KSRTAUDIO_BUFFER_PROPERTY {
			KSPROPERTY Property;
			PVOID BaseAddress;
			ULONG RequestedBufferSize;
		}
		alias KSRTAUDIO_BUFFER_PROPERTY* PKSRTAUDIO_BUFFER_PROPERTY;

		struct KSRTAUDIO_BUFFER_PROPERTY32 {
			KSPROPERTY Property;
			ULONG BaseAddress;
			ULONG RequestedBufferSize;
		}
		alias KSRTAUDIO_BUFFER_PROPERTY32* PKSRTAUDIO_BUFFER_PROPERTY32;

		struct KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION {
			KSPROPERTY Property;
			PVOID BaseAddress;
			ULONG RequestedBufferSize;
			ULONG NotificationCount;
		}
		alias KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION* PKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION;

		struct KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32 {
			KSPROPERTY Property;
			ULONG BaseAddress;
			ULONG RequestedBufferSize;
			ULONG NotificationCount;
		}
		alias KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32* PKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32;

		struct KSRTAUDIO_BUFFER {
			PVOID BufferAddress;
			ULONG ActualBufferSize;
			BOOL CallMemoryBarrier;
		}
		alias KSRTAUDIO_BUFFER* PKSRTAUDIO_BUFFER;

		struct KSRTAUDIO_BUFFER32 {
			ULONG BufferAddress;
			ULONG ActualBufferSize;
			BOOL CallMemoryBarrier;
		}
		alias KSRTAUDIO_BUFFER32* PKSRTAUDIO_BUFFER32;

		struct KSRTAUDIO_HWLATENCY {
			ULONG FifoSize;
			ULONG ChipsetDelay;
			ULONG CodecDelay;
		}
		alias KSRTAUDIO_HWLATENCY* PKSRTAUDIO_HWLATENCY;

		struct KSRTAUDIO_HWREGISTER_PROPERTY {
			KSPROPERTY Property;
			PVOID BaseAddress;
		}
		alias KSRTAUDIO_HWREGISTER_PROPERTY* PKSRTAUDIO_HWREGISTER_PROPERTY;

		struct KSRTAUDIO_HWREGISTER_PROPERTY32 {
			KSPROPERTY Property;
			ULONG BaseAddress;
		}
		alias KSRTAUDIO_HWREGISTER_PROPERTY32* PKSRTAUDIO_HWREGISTER_PROPERTY32;

		struct KSRTAUDIO_HWREGISTER {
			PVOID Register;
			ULONG Width;
			ULONGLONG Numerator;
			ULONGLONG Denominator;
			ULONG Accuracy;
		}
		alias KSRTAUDIO_HWREGISTER* PKSRTAUDIO_HWREGISTER;

		struct KSRTAUDIO_HWREGISTER32 {
			ULONG Register;
			ULONG Width;
			ULONGLONG Numerator;
			ULONGLONG Denominator;
			ULONG Accuracy;
		}
		alias KSRTAUDIO_HWREGISTER32* PKSRTAUDIO_HWREGISTER32;

		struct KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY {
			KSPROPERTY Property;
			HANDLE NotificationEvent;
		}
		alias KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY* PKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY;

		struct KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32 {
			KSPROPERTY Property;
			ULONG NotificationEvent;
		}
		alias KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32* PKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32;

		//(NTDDI_VERSION >= NTDDI_WIN7)
			mixin DEFINE_GUID!("KSPROPSETID_BtAudio", "7FA06C40-B8F6-4C7E-8556-E8C33A12E54D");
			enum {
				KSPROPERTY_ONESHOT_RECONNECT
			}

		mixin DEFINE_GUID!("KSPROPSETID_DrmAudioStream", "2F2C8DDD-4198-4fac-BA29-61BB05B7DE06");

		enum {
			KSPROPERTY_DRMAUDIOSTREAM_CONTENTID
		}
		alias int KSPROPERTY_DRMAUDIOSTREAM;

mixin DEFINE_GUID!("KSPROPSETID_Audio", "45FFAAA0-6E1B-11D0-BCF2-444553540000");

enum {
	KSPROPERTY_AUDIO_LATENCY = 1,
	KSPROPERTY_AUDIO_COPY_PROTECTION,
	KSPROPERTY_AUDIO_CHANNEL_CONFIG,
	KSPROPERTY_AUDIO_VOLUMELEVEL,
	KSPROPERTY_AUDIO_POSITION,
	KSPROPERTY_AUDIO_DYNAMIC_RANGE,
	KSPROPERTY_AUDIO_QUALITY,
	KSPROPERTY_AUDIO_SAMPLING_RATE,
	KSPROPERTY_AUDIO_DYNAMIC_SAMPLING_RATE,
	KSPROPERTY_AUDIO_MIX_LEVEL_TABLE,
	KSPROPERTY_AUDIO_MIX_LEVEL_CAPS,
	KSPROPERTY_AUDIO_MUX_SOURCE,
	KSPROPERTY_AUDIO_MUTE,
	KSPROPERTY_AUDIO_BASS,
	KSPROPERTY_AUDIO_MID,
	KSPROPERTY_AUDIO_TREBLE,
	KSPROPERTY_AUDIO_BASS_BOOST,
	KSPROPERTY_AUDIO_EQ_LEVEL,
	KSPROPERTY_AUDIO_NUM_EQ_BANDS,
	KSPROPERTY_AUDIO_EQ_BANDS,
	KSPROPERTY_AUDIO_AGC,
	KSPROPERTY_AUDIO_DELAY,
	KSPROPERTY_AUDIO_LOUDNESS,
	KSPROPERTY_AUDIO_WIDE_MODE,
	KSPROPERTY_AUDIO_WIDENESS,
	KSPROPERTY_AUDIO_REVERB_LEVEL,
	KSPROPERTY_AUDIO_CHORUS_LEVEL,
	KSPROPERTY_AUDIO_DEV_SPECIFIC,
	KSPROPERTY_AUDIO_DEMUX_DEST,
	KSPROPERTY_AUDIO_STEREO_ENHANCE,
	KSPROPERTY_AUDIO_MANUFACTURE_GUID,
	KSPROPERTY_AUDIO_PRODUCT_GUID,
	KSPROPERTY_AUDIO_CPU_RESOURCES,
	KSPROPERTY_AUDIO_STEREO_SPEAKER_GEOMETRY,
	KSPROPERTY_AUDIO_SURROUND_ENCODE,
	KSPROPERTY_AUDIO_3D_INTERFACE,
	//(NTDDI_VERSION >= NTDDI_WINXP)
		KSPROPERTY_AUDIO_PEAKMETER,
		KSPROPERTY_AUDIO_ALGORITHM_INSTANCE,
		KSPROPERTY_AUDIO_FILTER_STATE,
		KSPROPERTY_AUDIO_PREFERRED_STATUS,
	//(NTDDI_VERSION >= NTDDI_VISTA)
		KSPROPERTY_AUDIO_PEQ_MAX_BANDS,
		KSPROPERTY_AUDIO_PEQ_NUM_BANDS,
		KSPROPERTY_AUDIO_PEQ_BAND_CENTER_FREQ,
		KSPROPERTY_AUDIO_PEQ_BAND_Q_FACTOR,
		KSPROPERTY_AUDIO_PEQ_BAND_LEVEL,
		KSPROPERTY_AUDIO_CHORUS_MODULATION_RATE,
		KSPROPERTY_AUDIO_CHORUS_MODULATION_DEPTH,
		KSPROPERTY_AUDIO_REVERB_TIME,
		KSPROPERTY_AUDIO_REVERB_DELAY_FEEDBACK,
		KSPROPERTY_AUDIO_POSITIONEX,
		KSPROPERTY_AUDIO_MIC_ARRAY_GEOMETRY,
}
alias int KSPROPERTY_AUDIO;

enum {
	KSAUDIO_QUALITY_WORST    = 0x0,
	KSAUDIO_QUALITY_PC       = 0x1,
	KSAUDIO_QUALITY_BASIC    = 0x2,
	KSAUDIO_QUALITY_ADVANCED = 0x3,
}

enum {
	KSAUDIO_CPU_RESOURCES_NOT_HOST_CPU = 0x00000000,
	KSAUDIO_CPU_RESOURCES_HOST_CPU     = 0x7FFFFFFF,
}

struct KSAUDIO_COPY_PROTECTION {
	BOOL fCopyrighted;
	BOOL fOriginal;
}
alias KSAUDIO_COPY_PROTECTION* PKSAUDIO_COPY_PROTECTION;

struct KSAUDIO_CHANNEL_CONFIG {
	LONG ActiveSpeakerPositions;
}
alias KSAUDIO_CHANNEL_CONFIG* PKSAUDIO_CHANNEL_CONFIG;

enum {
	SPEAKER_FRONT_LEFT            = 0x1,
	SPEAKER_FRONT_RIGHT           = 0x2,
	SPEAKER_FRONT_CENTER          = 0x4,
	SPEAKER_LOW_FREQUENCY         = 0x8,
	SPEAKER_BACK_LEFT             = 0x10,
	SPEAKER_BACK_RIGHT            = 0x20,
	SPEAKER_FRONT_LEFT_OF_CENTER  = 0x40,
	SPEAKER_FRONT_RIGHT_OF_CENTER = 0x80,
	SPEAKER_BACK_CENTER           = 0x100,
	SPEAKER_SIDE_LEFT             = 0x200,
	SPEAKER_SIDE_RIGHT            = 0x400,
	SPEAKER_TOP_CENTER            = 0x800,
	SPEAKER_TOP_FRONT_LEFT        = 0x1000,
	SPEAKER_TOP_FRONT_CENTER      = 0x2000,
	SPEAKER_TOP_FRONT_RIGHT       = 0x4000,
	SPEAKER_TOP_BACK_LEFT         = 0x8000,
	SPEAKER_TOP_BACK_CENTER       = 0x10000,
	SPEAKER_TOP_BACK_RIGHT        = 0x20000,
	SPEAKER_RESERVED              = 0x7FFC0000,
	SPEAKER_ALL                   = 0x80000000,
//(NTDDI_VERSION >= NTDDI_WINXP)
		KSAUDIO_SPEAKER_DIRECTOUT = 0,
	KSAUDIO_SPEAKER_MONO     = SPEAKER_FRONT_CENTER,
	KSAUDIO_SPEAKER_STEREO   = SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT,
	KSAUDIO_SPEAKER_QUAD     = SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT |  SPEAKER_BACK_LEFT | SPEAKER_BACK_RIGHT,
	KSAUDIO_SPEAKER_SURROUND = SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT |  SPEAKER_FRONT_CENTER | SPEAKER_BACK_CENTER,
	KSAUDIO_SPEAKER_5POINT1  = SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT |  SPEAKER_FRONT_CENTER | SPEAKER_LOW_FREQUENCY |  SPEAKER_BACK_LEFT | SPEAKER_BACK_RIGHT,
	KSAUDIO_SPEAKER_7POINT1  = SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT |  SPEAKER_FRONT_CENTER | SPEAKER_LOW_FREQUENCY |  SPEAKER_BACK_LEFT | SPEAKER_BACK_RIGHT |  SPEAKER_FRONT_LEFT_OF_CENTER | SPEAKER_FRONT_RIGHT_OF_CENTER,
//( (NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
		KSAUDIO_SPEAKER_5POINT1_SURROUND = SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT |  SPEAKER_FRONT_CENTER | SPEAKER_LOW_FREQUENCY |  SPEAKER_SIDE_LEFT | SPEAKER_SIDE_RIGHT,
		KSAUDIO_SPEAKER_7POINT1_SURROUND = SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT |  SPEAKER_FRONT_CENTER | SPEAKER_LOW_FREQUENCY |  SPEAKER_BACK_LEFT | SPEAKER_BACK_RIGHT |  SPEAKER_SIDE_LEFT | SPEAKER_SIDE_RIGHT,
		KSAUDIO_SPEAKER_5POINT1_BACK     = KSAUDIO_SPEAKER_5POINT1,
		KSAUDIO_SPEAKER_7POINT1_WIDE     = KSAUDIO_SPEAKER_7POINT1,
	KSAUDIO_SPEAKER_GROUND_FRONT_LEFT   = SPEAKER_FRONT_LEFT,
	KSAUDIO_SPEAKER_GROUND_FRONT_CENTER = SPEAKER_FRONT_CENTER,
	KSAUDIO_SPEAKER_GROUND_FRONT_RIGHT  = SPEAKER_FRONT_RIGHT,
	KSAUDIO_SPEAKER_GROUND_REAR_LEFT    = SPEAKER_BACK_LEFT,
	KSAUDIO_SPEAKER_GROUND_REAR_RIGHT   = SPEAKER_BACK_RIGHT,
	KSAUDIO_SPEAKER_TOP_MIDDLE          = SPEAKER_TOP_CENTER,
	KSAUDIO_SPEAKER_SUPER_WOOFER        = SPEAKER_LOW_FREQUENCY,
}

struct KSAUDIO_DYNAMIC_RANGE {
	ULONG QuietCompression;
	ULONG LoudCompression;
}
alias KSAUDIO_DYNAMIC_RANGE* PKSAUDIO_DYNAMIC_RANGE;

struct KSAUDIO_MIXLEVEL {
	BOOL Mute;
	LONG Level;
}
alias KSAUDIO_MIXLEVEL* PKSAUDIO_MIXLEVEL;

struct KSAUDIO_MIX_CAPS {
	BOOL Mute;
	LONG Minimum;
	LONG Maximum;
	union {
		LONG Reset;
		LONG Resolution;
	}
}
alias KSAUDIO_MIX_CAPS* PKSAUDIO_MIX_CAPS;

struct KSAUDIO_MIXCAP_TABLE {
	ULONG InputChannels;
	ULONG OutputChannels;
	KSAUDIO_MIX_CAPS Capabilities[1];
}
alias KSAUDIO_MIXCAP_TABLE* PKSAUDIO_MIXCAP_TABLE;

//(NTDDI_VERSION < NTDDI_VISTA)
	enum {
		KSPROPERTY_SYSAUDIO_NORMAL_DEFAULT = 0,
		KSPROPERTY_SYSAUDIO_PLAYBACK_DEFAULT,
		KSPROPERTY_SYSAUDIO_RECORD_DEFAULT,
		KSPROPERTY_SYSAUDIO_MIDI_DEFAULT,
		KSPROPERTY_SYSAUDIO_MIXER_DEFAULT
	}
	alias int KSPROPERTY_SYSAUDIO_DEFAULT_TYPE;

//(NTDDI_VERSION >= NTDDI_WINXP && NTDDI_VERSION < NTDDI_VISTA)
	struct KSAUDIO_PREFERRED_STATUS {
		BOOL Enable;
		KSPROPERTY_SYSAUDIO_DEFAULT_TYPE DeviceType;
		ULONG Flags;
		ULONG Reserved;
	}
	alias KSAUDIO_PREFERRED_STATUS* PKSAUDIO_PREFERRED_STATUS;

//(NTDDI_VERSION >= NTDDI_VISTA)
	struct KSAUDIO_POSITIONEX {
		LARGE_INTEGER TimerFrequency;
		LARGE_INTEGER TimeStamp1;
		KSAUDIO_POSITION Position;
		LARGE_INTEGER TimeStamp2;
	}
	alias KSAUDIO_POSITIONEX* PKSAUDIO_POSITIONEX;

mixin DEFINE_GUID!("KSNODETYPE_DAC", "507AE360-C554-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_ADC", "4D837FE0-C555-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_SRC", "9DB7B9E0-C555-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_SUPERMIX", "E573ADC0-C555-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_MUX", "2CEAF780-C556-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_DEMUX", "C0EB67D4-E807-11D0-958A-00C04FB925D3");
mixin DEFINE_GUID!("KSNODETYPE_SUM", "DA441A60-C556-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_MUTE", "02B223C0-C557-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_VOLUME", "3A5ACC00-C557-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_TONE", "7607E580-C557-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_EQUALIZER", "9D41B4A0-C557-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_AGC", "E88C9BA0-C557-11D0-8A2B-00A0C9255AC1");
//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("KSNODETYPE_NOISE_SUPPRESS", "E07F903F-62FD-4e60-8CDD-DEA7236665B5");
mixin DEFINE_GUID!("KSNODETYPE_DELAY", "144981E0-C558-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_LOUDNESS", "41887440-C558-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_PROLOGIC_DECODER", "831C2C80-C558-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_STEREO_WIDE", "A9E69800-C558-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_REVERB", "EF0328E0-C558-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_CHORUS", "20173F20-C559-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_3D_EFFECTS", "55515860-C559-11D0-8A2B-00A0C9255AC1");
mixin DEFINE_GUID!("KSNODETYPE_PARAMETRIC_EQUALIZER", "19BB3A6A-CE2B-4442-87EC-6727C3CAB477");
mixin DEFINE_GUID!("KSNODETYPE_UPDOWN_MIX", "B7EDC5CF-7B63-4ee2-A100-29EE2CB6B2DE");
mixin DEFINE_GUID!("KSNODETYPE_DYN_RANGE_COMPRESSOR", "08C8A6A8-601F-4af8-8793-D905FF4CA97D");

alias KSCATEGORY_ACOUSTIC_ECHO_CANCEL KSNODETYPE_ACOUSTIC_ECHO_CANCEL;

//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("KSALGORITHMINSTANCE_SYSTEM_ACOUSTIC_ECHO_CANCEL", "1C22C56D-9879-4f5b-A389-27996DDC2810");
	mixin DEFINE_GUID!("KSALGORITHMINSTANCE_SYSTEM_NOISE_SUPPRESS", "5AB0882E-7274-4516-877D-4EEE99BA4FD0");
	mixin DEFINE_GUID!("KSALGORITHMINSTANCE_SYSTEM_AGC", "950E55B9-877C-4c67-BE08-E47B5611130A");
	mixin DEFINE_GUID!("KSALGORITHMINSTANCE_SYSTEM_MICROPHONE_ARRAY_PROCESSOR", "B6F5A0A0-9E61-4f8c-91E3-76CF0F3C471F");
	alias KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR KSNODETYPE_MICROPHONE_ARRAY_PROCESSOR;

mixin DEFINE_GUID!("KSNODETYPE_DEV_SPECIFIC", "941C7AC0-C559-11D0-8A2B-00A0C9255AC1");

//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("KSNODETYPE_PROLOGIC_ENCODER", "8074C5B2-3C66-11D2-B45A-3078302C2030");
	alias KSNODETYPE_PROLOGIC_ENCODER KSNODETYPE_SURROUND_ENCODER;
	mixin DEFINE_GUID!("KSNODETYPE_PEAKMETER", "A085651E-5F0D-4b36-A869-D195D6AB4B9E");

//(NTDDI_VERSION < NTDDI_WINXP)
	mixin DEFINE_GUID!("KSNODETYPE_SURROUND_ENCODER", "8074C5B2-3C66-11D2-B45A-3078302C2030");

mixin DEFINE_GUID!("KSAUDFNAME_BASS", "185FEDE0-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_TREBLE", "185FEDE1-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_MIDRANGE", "A2CBE478-AE84-49A1-8B72-4AD09B78ED34");
mixin DEFINE_GUID!("KSAUDFNAME_3D_STEREO", "185FEDE2-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_MASTER_VOLUME", "185FEDE3-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_MASTER_MUTE", "185FEDE4-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_WAVE_VOLUME", "185FEDE5-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_WAVE_MUTE", "185FEDE6-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_MIDI_VOLUME", "185FEDE7-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_MIDI_MUTE", "185FEDE8-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_CD_VOLUME", "185FEDE9-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_CD_MUTE", "185FEDEA-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_LINE_VOLUME", "185FEDEB-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_LINE_MUTE", "185FEDEC-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_MIC_VOLUME", "185FEDED-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_MIC_MUTE", "185FEDEE-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_RECORDING_SOURCE", "185FEDEF-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_PC_SPEAKER_VOLUME", "185FEDF0-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_PC_SPEAKER_MUTE", "185FEDF1-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_MIDI_IN_VOLUME", "185FEDF2-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_CD_IN_VOLUME", "185FEDF3-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_LINE_IN_VOLUME", "185FEDF4-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_MIC_IN_VOLUME", "185FEDF5-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_WAVE_IN_VOLUME", "185FEDF6-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_VOLUME_CONTROL", "185FEDF7-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_MIDI", "185FEDF8-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_LINE_IN", "185FEDF9-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_RECORDING_CONTROL", "185FEDFA-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_CD_AUDIO", "185FEDFB-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_AUX_VOLUME", "185FEDFC-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_AUX_MUTE", "185FEDFD-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_AUX", "185FEDFE-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_PC_SPEAKER", "185FEDFF-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_WAVE_OUT_MIX", "185FEE00-9905-11D1-95A9-00C04FB925D3");
mixin DEFINE_GUID!("KSAUDFNAME_MONO_OUT", "F9B41DC3-96E2-11d2-AC4C-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_STEREO_MIX", "00DFF077-96E3-11d2-AC4C-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_MONO_MIX", "00DFF078-96E3-11d2-AC4C-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_MONO_OUT_VOLUME", "1AD247EB-96E3-11d2-AC4C-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_MONO_OUT_MUTE", "1AD247EC-96E3-11d2-AC4C-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_STEREO_MIX_VOLUME", "1AD247ED-96E3-11d2-AC4C-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_STEREO_MIX_MUTE", "22B0EAFD-96E3-11d2-AC4C-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_MONO_MIX_VOLUME", "22B0EAFE-96E3-11d2-AC4C-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_MONO_MIX_MUTE", "2BC31D69-96E3-11d2-AC4C-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_MICROPHONE_BOOST", "2BC31D6A-96E3-11d2-AC4C-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_ALTERNATE_MICROPHONE", "2BC31D6B-96E3-11d2-AC4C-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_3D_DEPTH", "63FF5747-991F-11d2-AC4D-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_3D_CENTER", "9F0670B4-991F-11d2-AC4D-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_VIDEO_VOLUME", "9B46E708-992A-11d2-AC4D-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_VIDEO_MUTE", "9B46E709-992A-11d2-AC4D-00C04F8EFB68");
mixin DEFINE_GUID!("KSAUDFNAME_VIDEO", "915DAEC4-A434-11d2-AC52-00C04F8EFB68");

//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("KSAUDFNAME_PEAKMETER", "57E24340-FC5B-4612-A562-72B11A29DFAE");

enum {
	KSNODEPIN_STANDARD_IN  = 1,
	KSNODEPIN_STANDARD_OUT = 0,
	KSNODEPIN_SUM_MUX_IN   = 1,
	KSNODEPIN_SUM_MUX_OUT  = 0,
	KSNODEPIN_DEMUX_IN     = 0,
	KSNODEPIN_DEMUX_OUT    = 1,
//(NTDDI_VERSION < NTDDI_VISTA)
		KSNODEPIN_AEC_RENDER_IN   = 1,
		KSNODEPIN_AEC_RENDER_OUT  = 0,
		KSNODEPIN_AEC_CAPTURE_IN  = 2,
		KSNODEPIN_AEC_CAPTURE_OUT = 3,
}

mixin DEFINE_GUID!("KSMETHODSETID_Wavetable", "DCEF31EB-D907-11D0-9583-00C04FB925D3");

enum {
	KSMETHOD_WAVETABLE_WAVE_ALLOC,
	KSMETHOD_WAVETABLE_WAVE_FREE,
	KSMETHOD_WAVETABLE_WAVE_FIND,
	KSMETHOD_WAVETABLE_WAVE_WRITE
}
alias int KSMETHOD_WAVETABLE;

struct KSWAVETABLE_WAVE_DESC {
	KSIDENTIFIER Identifier;
	ULONG Size;
	BOOL Looped;
	ULONG LoopPoint;
	BOOL InROM;
	KSDATAFORMAT Format;
}
alias KSWAVETABLE_WAVE_DESC* PKSWAVETABLE_WAVE_DESC;

//(NTDDI_VERSION >= NTDDI_WINXP && NTDDI_VERSION < NTDDI_VISTA)
	mixin DEFINE_GUID!("KSPROPSETID_Acoustic_Echo_Cancel", "D7A4AF8B-3DC1-4902-91EA-8A15C90E05B2");

	enum {
		KSPROPERTY_AEC_NOISE_FILL_ENABLE = 0,
		KSPROPERTY_AEC_STATUS,
		KSPROPERTY_AEC_MODE
	}
	alias int KSPROPERTY_AEC;

	enum {
		AEC_STATUS_FD_HISTORY_UNINITIALIZED          = 0x0,
		AEC_STATUS_FD_HISTORY_CONTINUOUSLY_CONVERGED = 0x1,
		AEC_STATUS_FD_HISTORY_PREVIOUSLY_DIVERGED    = 0x2,
		AEC_STATUS_FD_CURRENTLY_CONVERGED            = 0x8,
		AEC_MODE_PASS_THROUGH                        = 0x0,
		AEC_MODE_HALF_DUPLEX                         = 0x1,
		AEC_MODE_FULL_DUPLEX                         = 0x2,
	}

//(NTDDI_VERSION < NTDDI_WS03)
	mixin DEFINE_GUID!("KSPROPSETID_Wave_Queued", "16a15b10-16f0-11d0-a195-0020afd156e4");
	enum KSPROPERTY_WAVE_QUEUED_POSITION = 0x00000001;
	mixin DEFINE_GUID!("KSMETHODSETID_Wave_Queued", "7432c160-8827-11cf-a102-0020afd156e4");
	enum KSMETHOD_WAVE_QUEUED_BREAKLOOP = 0x00000001;

mixin DEFINE_GUID!("KSPROPSETID_Wave", "924e54b0-630f-11cf-ada7-08003e30494a");

enum {
	KSPROPERTY_WAVE_COMPATIBLE_CAPABILITIES,
	KSPROPERTY_WAVE_INPUT_CAPABILITIES,
	KSPROPERTY_WAVE_OUTPUT_CAPABILITIES,
	KSPROPERTY_WAVE_BUFFER,
	KSPROPERTY_WAVE_FREQUENCY,
	KSPROPERTY_WAVE_VOLUME,
	KSPROPERTY_WAVE_PAN
}
alias int KSPROPERTY_WAVE;

struct KSWAVE_COMPATCAPS {
	ULONG ulDeviceType;
}
alias KSWAVE_COMPATCAPS* PKSWAVE_COMPATCAPS;

enum {
	KSWAVE_COMPATCAPS_INPUT  = 0x00000000,
	KSWAVE_COMPATCAPS_OUTPUT = 0x00000001,
}

struct KSWAVE_INPUT_CAPABILITIES {
	ULONG MaximumChannelsPerConnection;
	ULONG MinimumBitsPerSample;
	ULONG MaximumBitsPerSample;
	ULONG MinimumSampleFrequency;
	ULONG MaximumSampleFrequency;
	ULONG TotalConnections;
	ULONG ActiveConnections;
}
alias KSWAVE_INPUT_CAPABILITIES* PKSWAVE_INPUT_CAPABILITIES;

struct KSWAVE_OUTPUT_CAPABILITIES {
	ULONG MaximumChannelsPerConnection;
	ULONG MinimumBitsPerSample;
	ULONG MaximumBitsPerSample;
	ULONG MinimumSampleFrequency;
	ULONG MaximumSampleFrequency;
	ULONG TotalConnections;
	ULONG StaticConnections;
	ULONG StreamingConnections;
	ULONG ActiveConnections;
	ULONG ActiveStaticConnections;
	ULONG ActiveStreamingConnections;
	ULONG Total3DConnections;
	ULONG Static3DConnections;
	ULONG Streaming3DConnections;
	ULONG Active3DConnections;
	ULONG ActiveStatic3DConnections;
	ULONG ActiveStreaming3DConnections;
	ULONG TotalSampleMemory;
	ULONG FreeSampleMemory;
	ULONG LargestFreeContiguousSampleMemory;
}
alias KSWAVE_OUTPUT_CAPABILITIES* PKSWAVE_OUTPUT_CAPABILITIES;

struct KSWAVE_VOLUME {
	LONG LeftAttenuation;
	LONG RightAttenuation;
}
alias KSWAVE_VOLUME* PKSWAVE_VOLUME;

enum {
	KSWAVE_BUFFER_ATTRIBUTEF_LOOPING = 0x00000001,
	KSWAVE_BUFFER_ATTRIBUTEF_STATIC  = 0x00000002,
}

struct KSWAVE_BUFFER {
	ULONG Attributes;
	ULONG BufferSize;
	PVOID BufferAddress;
}
alias KSWAVE_BUFFER* PKSWAVE_BUFFER;

mixin DEFINE_GUID!("KSMUSIC_TECHNOLOGY_PORT", "86C92E60-62E8-11CF-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSMUSIC_TECHNOLOGY_SQSYNTH", "0ECF4380-62E9-11CF-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSMUSIC_TECHNOLOGY_FMSYNTH", "252C5C80-62E9-11CF-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSMUSIC_TECHNOLOGY_WAVETABLE", "394EC7C0-62E9-11CF-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSMUSIC_TECHNOLOGY_SWSYNTH", "37407736-3620-11D1-85D3-0000F8754380");

//(NTDDI_VERSION < NTDDI_WS03)
	mixin DEFINE_GUID!("KSPROPSETID_WaveTable", "8539E660-62E9-11CF-A5D6-28DB04C10000");
	enum {
		KSPROPERTY_WAVETABLE_LOAD_SAMPLE,
		KSPROPERTY_WAVETABLE_UNLOAD_SAMPLE,
		KSPROPERTY_WAVETABLE_MEMORY,
		KSPROPERTY_WAVETABLE_VERSION
	}
	alias int KSPROPERTY_WAVETABLE;

struct KSDATARANGE_MUSIC {
	KSDATARANGE DataRange;
	GUID Technology;
	ULONG Channels;
	ULONG Notes;
	ULONG ChannelMask;
}
alias KSDATARANGE_MUSIC* PKSDATARANGE_MUSIC;

//(NTDDI_VERSION < NTDDI_WS03)
	mixin DEFINE_GUID!("KSEVENTSETID_Cyclic", "142C1AC0-072A-11D0-A5D6-28DB04C10000");
	enum {
		KSEVENT_CYCLIC_TIME_INTERVAL,
	}
	alias int KSEVENT_CYCLIC_TIME;

mixin DEFINE_GUID!("KSPROPSETID_Cyclic", "3FFEAEA0-2BEE-11CF-A5D6-28DB04C10000");

enum {
	KSPROPERTY_CYCLIC_POSITION,
}
alias int KSPROPERTY_CYCLIC;

mixin DEFINE_GUID!("KSEVENTSETID_AudioControlChange", "E85E9698-FA2F-11D1-95BD-00C04FB925D3");

enum {
	KSEVENT_CONTROL_CHANGE,
}
alias int KSEVENT_AUDIO_CONTROL_CHANGE;

mixin DEFINE_GUID!("KSEVENTSETID_LoopedStreaming", "4682B940-C6EF-11D0-96D8-00AA0051E51D");

enum {
	KSEVENT_LOOPEDSTREAMING_POSITION,
}
alias int KSEVENT_LOOPEDSTREAMING;

struct LOOPEDSTREAMING_POSITION_EVENT_DATA {
	KSEVENTDATA KsEventData;
	DWORDLONG Position;
}
alias LOOPEDSTREAMING_POSITION_EVENT_DATA* PLOOPEDSTREAMING_POSITION_EVENT_DATA ;

//(NTDDI_VERSION <= NTDDI_WINXP)
	mixin DEFINE_GUID!("KSEVENTSETID_Sysaudio", "04800320-4491-11D1-A050-405705C10000");
	enum {
		KSEVENT_SYSAUDIO_ADDREMOVE_DEVICE,
		KSEVENT_SYSAUDIO_CHANGE_DEVICE
	}
	alias int KSEVENT_SYSAUDIO;

//(NTDDI_VERSION < NTDDI_VISTA)
	mixin DEFINE_GUID!("KSPROPSETID_Sysaudio", "CBE3FAA0-CC75-11D0-B465-00001A1818E6");

//(NTDDI_VERSION >= NTDDI_WINXP && NTDDI_VERSION < NTDDI_VISTA)
	enum {
		KSPROPERTY_SYSAUDIO_DEVICE_COUNT          = 1,
		KSPROPERTY_SYSAUDIO_DEVICE_FRIENDLY_NAME  = 2,
		KSPROPERTY_SYSAUDIO_DEVICE_INSTANCE       = 3,
		KSPROPERTY_SYSAUDIO_DEVICE_INTERFACE_NAME = 4,
		KSPROPERTY_SYSAUDIO_SELECT_GRAPH          = 5,
		KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE = 6,
		KSPROPERTY_SYSAUDIO_DEVICE_DEFAULT        = 7,
		KSPROPERTY_SYSAUDIO_INSTANCE_INFO         = 14,
		KSPROPERTY_SYSAUDIO_COMPONENT_ID          = 16,
	}
	alias int KSPROPERTY_SYSAUDIO;

// (NTDDI_VERSION < NTDDI_WINXP)
/*
	enum {
		KSPROPERTY_SYSAUDIO_DEVICE_COUNT = 1,
		KSPROPERTY_SYSAUDIO_DEVICE_FRIENDLY_NAME,
		KSPROPERTY_SYSAUDIO_DEVICE_INSTANCE,
		KSPROPERTY_SYSAUDIO_DEVICE_INTERFACE_NAME,
		KSPROPERTY_SYSAUDIO_SELECT_GRAPH,
		KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE,
		KSPROPERTY_SYSAUDIO_DEVICE_DEFAULT,
		KSPROPERTY_SYSAUDIO_ALWAYS_CREATE_VIRTUAL_SOURCE,
		KSPROPERTY_SYSAUDIO_ADDREMOVE_LOCK,
		KSPROPERTY_SYSAUDIO_ADDREMOVE_UNLOCK,
		KSPROPERTY_SYSAUDIO_RENDER_PIN_INSTANCES,
		KSPROPERTY_SYSAUDIO_RENDER_CONNECTION_INDEX,
		KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE_ONLY,
		KSPROPERTY_SYSAUDIO_INSTANCE_INFO,
		KSPROPERTY_SYSAUDIO_PREFERRED_DEVICE
	}
	alias int KSPROPERTY_SYSAUDIO;
*/

//(NTDDI_VERSION < NTDDI_VISTA)
	struct SYSAUDIO_CREATE_VIRTUAL_SOURCE {
		KSPROPERTY Property;
		GUID PinCategory;
		GUID PinName;
	}
	alias SYSAUDIO_CREATE_VIRTUAL_SOURCE* PSYSAUDIO_CREATE_VIRTUAL_SOURCE;

//(NTDDI_VERSION < NTDDI_VISTA)
	struct SYSAUDIO_SELECT_GRAPH {
		KSPROPERTY Property;
		ULONG PinId;
		ULONG NodeId;
		ULONG Flags;
		ULONG Reserved;
	}
	alias SYSAUDIO_SELECT_GRAPH* PSYSAUDIO_SELECT_GRAPH;

	struct SYSAUDIO_INSTANCE_INFO {
		KSPROPERTY Property;
		ULONG Flags;
		ULONG DeviceNumber;
	}
	alias SYSAUDIO_INSTANCE_INFO* PSYSAUDIO_INSTANCE_INFO;

	enum SYSAUDIO_FLAGS_DONT_COMBINE_PINS = 0x00000001;


//(NTDDI_VERSION < NTDDI_WINXP)
	struct SYSAUDIO_PREFERRED_DEVICE {
		KSPROPERTY Property;
		ULONG Flags;
		ULONG Index;
	}
	alias SYSAUDIO_PREFERRED_DEVICE* PSYSAUDIO_PREFERRED_DEVICE;
	enum SYSAUDIO_FLAGS_CLEAR_PREFERRED = 0x00000002;

//(NTDDI_VERSION < NTDDI_VISTA)
	mixin DEFINE_GUID!("KSPROPSETID_Sysaudio_Pin", "A3A53220-C6E4-11D0-B465-00001A1818E6");

//(NTDDI_VERSION >= NTDDI_WINXP && NTDDI_VERSION < NTDDI_VISTA)
	enum {
		KSPROPERTY_SYSAUDIO_ATTACH_VIRTUAL_SOURCE = 1,
	}
	alias int KSPROPERTY_SYSAUDIO_PIN;

//(NTDDI_VERSION < NTDDI_WINXP)
/*	enum {
		KSPROPERTY_SYSAUDIO_TOPOLOGY_CONNECTION_INDEX,
		KSPROPERTY_SYSAUDIO_ATTACH_VIRTUAL_SOURCE,
		KSPROPERTY_SYSAUDIO_PIN_VOLUME_NODE
	}
	alias int KSPROPERTY_SYSAUDIO_PIN;*/

//(NTDDI_VERSION < NTDDI_VISTA)
	struct SYSAUDIO_ATTACH_VIRTUAL_SOURCE {
		KSPROPERTY Property;
		ULONG MixerPinId;
		ULONG Reserved;
	}
	alias SYSAUDIO_ATTACH_VIRTUAL_SOURCE* PSYSAUDIO_ATTACH_VIRTUAL_SOURCE;

struct KSNODEPROPERTY {
	KSPROPERTY Property;
	ULONG NodeId;
	ULONG Reserved;
}
alias KSNODEPROPERTY* PKSNODEPROPERTY;

struct KSNODEPROPERTY_AUDIO_CHANNEL {
	KSNODEPROPERTY NodeProperty;
	LONG Channel;
	ULONG Reserved;
}
alias KSNODEPROPERTY_AUDIO_CHANNEL* PKSNODEPROPERTY_AUDIO_CHANNEL;

struct KSNODEPROPERTY_AUDIO_DEV_SPECIFIC {
	KSNODEPROPERTY NodeProperty;
	ULONG DevSpecificId;
	ULONG DeviceInfo;
	ULONG Length;
}
alias KSNODEPROPERTY_AUDIO_DEV_SPECIFIC* PKSNODEPROPERTY_AUDIO_DEV_SPECIFIC;

struct KSNODEPROPERTY_AUDIO_3D_LISTENER {
	KSNODEPROPERTY NodeProperty;
	PVOID ListenerId;
	version(Win32){
		ULONG Reserved;
	}
}
alias KSNODEPROPERTY_AUDIO_3D_LISTENER* PKSNODEPROPERTY_AUDIO_3D_LISTENER;

struct KSNODEPROPERTY_AUDIO_PROPERTY {
	KSNODEPROPERTY NodeProperty;
	PVOID AppContext;
	ULONG Length;
	version(Win32){
		ULONG Reserved;
	}
}
alias KSNODEPROPERTY_AUDIO_PROPERTY* PKSNODEPROPERTY_AUDIO_PROPERTY;

//(NTDDI_VERSION >= NTDDI_WINXP && NTDDI_VERSION < NTDDI_VISTA)
	mixin DEFINE_GUID!("KSPROPSETID_AudioGfx", "79A9312E-59AE-43b0-A350-8B05284CAB24");

	enum {
		KSPROPERTY_AUDIOGFX_RENDERTARGETDEVICEID,
		KSPROPERTY_AUDIOGFX_CAPTURETARGETDEVICEID
	}
	alias int KSPROPERTY_AUDIOGFX;

//(NTDDI_VERSION < NTDDI_WS03)
	mixin DEFINE_GUID!("KSPROPSETID_Linear", "5A2FFE80-16B9-11D0-A5D6-28DB04C10000");
	enum {
		KSPROPERTY_LINEAR_POSITION,
	}
	alias int KSPROPERTY_LINEAR;

mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_MUSIC", "E725D360-62CC-11CF-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_MIDI", "7364696D-0000-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_MIDI", "1D262760-E957-11CF-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_MIDI_BUS", "2CA15FA0-6CFE-11CF-A5D6-28DB04C10000");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_RIFFMIDI", "4995DAF0-9EE6-11D0-A40E-00A0C9223196");

struct KSMUSICFORMAT {
	ULONG TimeDeltaMs;
	ULONG ByteCount;
}
alias KSMUSICFORMAT* PKSMUSICFORMAT;


mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM ", "36523B11-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_STANDARD_PES_PACKET ", "36523B12-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER ", "36523B13-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO ", "36523B21-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO ", "36523B22-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO ", "36523B23-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO ", "36523B24-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO ", "36523B25-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO ", "36523B31-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO ", "36523B32-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO ", "36523B33-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO ", "36523B34-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO ", "36523B35-8EE5-11d1-8CA3-0060B057664A");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_DSS_VIDEO", "a0af4f81-e163-11d0-bad9-00609744111a");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_DSS_AUDIO", "a0af4f82-e163-11d0-bad9-00609744111a");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_MPEG1Packet", "e436eb80-524f-11ce-9F53-0020af0ba770");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_MPEG1Payload", "e436eb81-524f-11ce-9F53-0020af0ba770");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_MPEG1Video", "e436eb86-524f-11ce-9f53-0020af0ba770");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_MPEG1_VIDEO", "05589f82-c356-11ce-bf01-00aa0055595a");
mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_MPEG2_PES", "e06d8020-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_MPEG2_PROGRAM", "e06d8022-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_MPEG2_TRANSPORT", "e06d8023-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO", "e06d8026-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO", "e06d80e3-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSPROPSETID_Mpeg2Vid", "C8E11B60-0CC9-11D0-BD69-003505C103A9");

enum {
	KSPROPERTY_MPEG2VID_MODES,
	KSPROPERTY_MPEG2VID_CUR_MODE,
	KSPROPERTY_MPEG2VID_4_3_RECT,
	KSPROPERTY_MPEG2VID_16_9_RECT,
	KSPROPERTY_MPEG2VID_16_9_PANSCAN,
}
alias int KSPROPERTY_MPEG2VID;

enum {
	KSMPEGVIDMODE_PANSCAN = 0x0001,
	KSMPEGVIDMODE_LTRBOX  = 0x0002,
	KSMPEGVIDMODE_SCALE   = 0x0004,
}

struct KSMPEGVID_RECT {
	ULONG StartX;
	ULONG StartY;
	ULONG EndX;
	ULONG EndY;
}
alias KSMPEGVID_RECT* PKSMPEGVID_RECT;

mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO", "e06d802b-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_MPEG2_AUDIO", "e06d80e5-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_LPCM_AUDIO", "e06d8032-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_LPCM_AUDIO", "e06d80e6-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_AC3_AUDIO", "e06d802c-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_AC3_AUDIO", "e06d80e4-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSPROPSETID_AC3", "BFABE720-6E1F-11D0-BCF2-444553540000");

enum {
	KSPROPERTY_AC3_ERROR_CONCEALMENT = 1,
	KSPROPERTY_AC3_ALTERNATE_AUDIO,
	KSPROPERTY_AC3_DOWNMIX,
	KSPROPERTY_AC3_BIT_STREAM_MODE,
	KSPROPERTY_AC3_DIALOGUE_LEVEL,
	KSPROPERTY_AC3_LANGUAGE_CODE,
	KSPROPERTY_AC3_ROOM_TYPE
}
alias int KSPROPERTY_AC3;

struct KSAC3_ERROR_CONCEALMENT {
	BOOL fRepeatPreviousBlock;
	BOOL fErrorInCurrentBlock;
}
alias KSAC3_ERROR_CONCEALMENT* PKSAC3_ERROR_CONCEALMENT;

struct KSAC3_ALTERNATE_AUDIO {
	BOOL fStereo;
	ULONG DualMode;
}
alias KSAC3_ALTERNATE_AUDIO* PKSAC3_ALTERNATE_AUDIO;

enum {
	KSAC3_ALTERNATE_AUDIO_1    = 1,
	KSAC3_ALTERNATE_AUDIO_2    = 2,
	KSAC3_ALTERNATE_AUDIO_BOTH = 3,
}

struct KSAC3_DOWNMIX {
	BOOL fDownMix;
	BOOL fDolbySurround;
}
alias KSAC3_DOWNMIX* PKSAC3_DOWNMIX;

struct KSAC3_BIT_STREAM_MODE {
	LONG BitStreamMode;
}
alias KSAC3_BIT_STREAM_MODE* PKSAC3_BIT_STREAM_MODE;

enum {
	KSAC3_SERVICE_MAIN_AUDIO        = 0,
	KSAC3_SERVICE_NO_DIALOG         = 1,
	KSAC3_SERVICE_VISUALLY_IMPAIRED = 2,
	KSAC3_SERVICE_HEARING_IMPAIRED  = 3,
	KSAC3_SERVICE_DIALOG_ONLY       = 4,
	KSAC3_SERVICE_COMMENTARY        = 5,
	KSAC3_SERVICE_EMERGENCY_FLASH   = 6,
	KSAC3_SERVICE_VOICE_OVER        = 7,
}

struct KSAC3_DIALOGUE_LEVEL {
	ULONG DialogueLevel;
}
alias KSAC3_DIALOGUE_LEVEL* PKSAC3_DIALOGUE_LEVEL;

struct KSAC3_ROOM_TYPE {
	BOOL fLargeRoom;
}
alias KSAC3_ROOM_TYPE* PKSAC3_ROOM_TYPE;


mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL", "00000092-0000-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_WMA_PRO", "00000164-0000-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_DTS", "00000008-0000-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_MPEG1", "00000003-0cea-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_MPEG2", "00000004-0cea-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_MPEG3", "00000005-0cea-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_AAC", "00000006-0cea-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_ATRAC", "00000008-0cea-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_ONE_BIT_AUDIO", "00000009-0cea-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS", "0000000a-0cea-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD", "0000000b-0cea-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP", "0000000c-0cea-0010-8000-00aa00389b71");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_IEC61937_DST", "0000000d-0cea-0010-8000-00aa00389b71");

//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_DTS_AUDIO", "e06d8033-db46-11cf-b4d1-00805f6cbbea");
	mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_SDDS_AUDIO", "e06d8034-db46-11cf-b4d1-00805f6cbbea");

mixin DEFINE_GUID!("KSPROPSETID_AudioDecoderOut", "6ca6e020-43bd-11d0-bd6a-003505c103a9");

enum {
	KSPROPERTY_AUDDECOUT_MODES,
	KSPROPERTY_AUDDECOUT_CUR_MODE,
}
alias int KSPROPERTY_AUDDECOUT;

enum {
	KSAUDDECOUTMODE_STEREO_ANALOG = 0x0001,
	KSAUDDECOUTMODE_PCM_51        = 0x0002,
	KSAUDDECOUTMODE_SPDIFF        = 0x0004,
}

mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_SUBPICTURE", "e06d802d-db46-11cf-b4d1-00805f6cbbea");
mixin DEFINE_GUID!("KSPROPSETID_DvdSubPic", "ac390460-43af-11d0-bd6a-003505c103a9");

enum {
	KSPROPERTY_DVDSUBPIC_PALETTE,
	KSPROPERTY_DVDSUBPIC_HLI,
	KSPROPERTY_DVDSUBPIC_COMPOSIT_ON,
}
alias int KSPROPERTY_DVDSUBPIC;

struct KS_DVD_YCrCb {
	UCHAR Reserved;
	UCHAR Y;
	UCHAR Cr;
	UCHAR Cb;
}
alias KS_DVD_YCrCb* PKS_DVD_YCrCb;

struct KS_DVD_YUV {
	UCHAR Reserved;
	UCHAR Y;
	UCHAR V;
	UCHAR U;
}
alias KS_DVD_YUV* PKS_DVD_YUV;

struct KSPROPERTY_SPPAL {
	KS_DVD_YUV sppal[16];
}
alias KSPROPERTY_SPPAL* PKSPROPERTY_SPPAL;

struct KS_COLCON {
	DWORD flags_;
	/*
	UCHAR emph1col:4;
	UCHAR emph2col:4;
	UCHAR backcol:4;
	UCHAR patcol:4;
	UCHAR emph1con:4;
	UCHAR emph2con:4;
	UCHAR backcon:4;
	UCHAR patcon:4;
	*/
}
alias KS_COLCON* PKS_COLCON;

struct KSPROPERTY_SPHLI {
	USHORT HLISS;
	USHORT Reserved;
	ULONG StartPTM;
	ULONG EndPTM;
	USHORT StartX;
	USHORT StartY;
	USHORT StopX;
	USHORT StopY;
	KS_COLCON ColCon;
}
alias KSPROPERTY_SPHLI* PKSPROPERTY_SPHLI;

alias BOOL KSPROPERTY_COMPOSIT_ON;
alias KSPROPERTY_COMPOSIT_ON* PKSPROPERTY_COMPOSIT_ON;

mixin DEFINE_GUID!("KSPROPSETID_CopyProt", "0E8A0A40-6AEF-11D0-9ED0-00A024CA19B3");

enum {
	KSPROPERTY_DVDCOPY_CHLG_KEY = 0x01,
	KSPROPERTY_DVDCOPY_DVD_KEY1,
	KSPROPERTY_DVDCOPY_DEC_KEY2,
	KSPROPERTY_DVDCOPY_TITLE_KEY,
	KSPROPERTY_COPY_MACROVISION,
	KSPROPERTY_DVDCOPY_REGION,
	KSPROPERTY_DVDCOPY_SET_COPY_STATE,
	KSPROPERTY_DVDCOPY_DISC_KEY = 0x80
}
alias int KSPROPERTY_COPYPROT;

struct KS_DVDCOPY_CHLGKEY {
	BYTE[10] ChlgKey;
	BYTE[2] Reserved;
}
alias KS_DVDCOPY_CHLGKEY* PKS_DVDCOPY_CHLGKEY;

struct KS_DVDCOPY_BUSKEY {
	BYTE[5] BusKey;
	BYTE[1] Reserved;
}
alias KS_DVDCOPY_BUSKEY* PKS_DVDCOPY_BUSKEY;

struct KS_DVDCOPY_DISCKEY {
	BYTE[2048]  DiscKey;
}
alias KS_DVDCOPY_DISCKEY* PKS_DVDCOPY_DISCKEY;

struct KS_DVDCOPY_REGION {
	UCHAR Reserved;
	UCHAR RegionData;
	UCHAR[2] Reserved2;
}
alias KS_DVDCOPY_REGION* PKS_DVDCOPY_REGION;

struct KS_DVDCOPY_TITLEKEY {
	ULONG KeyFlags;
	ULONG[2] ReservedNT;
	UCHAR[6] TitleKey;
	UCHAR[2] Reserved;
}
alias KS_DVDCOPY_TITLEKEY* PKS_DVDCOPY_TITLEKEY;

struct KS_COPY_MACROVISION {
	ULONG MACROVISIONLevel;
}
alias KS_COPY_MACROVISION* PKS_COPY_MACROVISION;

struct KS_DVDCOPY_SET_COPY_STATE {
	ULONG DVDCopyState;
}
alias KS_DVDCOPY_SET_COPY_STATE* PKS_DVDCOPY_SET_COPY_STATE;

enum {
	KS_DVDCOPYSTATE_INITIALIZE,
	KS_DVDCOPYSTATE_INITIALIZE_TITLE,
	KS_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED,
	KS_DVDCOPYSTATE_AUTHENTICATION_REQUIRED,
	KS_DVDCOPYSTATE_DONE,
}
alias int KS_DVDCOPYSTATE;

enum {
	KS_MACROVISION_DISABLED,
	KS_MACROVISION_LEVEL1,
	KS_MACROVISION_LEVEL2,
	KS_MACROVISION_LEVEL3
}
alias int KS_COPY_MACROVISION_LEVEL;
alias KS_COPY_MACROVISION_LEVEL* PKS_COPY_MACROVISION_LEVEL;

enum {
	KS_DVD_CGMS_RESERVED_MASK     = 0x00000078,
	KS_DVD_CGMS_COPY_PROTECT_MASK = 0x00000018,
	KS_DVD_CGMS_COPY_PERMITTED    = 0x00000000,
	KS_DVD_CGMS_COPY_ONCE         = 0x00000010,
	KS_DVD_CGMS_NO_COPY           = 0x00000018,
	KS_DVD_COPYRIGHT_MASK         = 0x00000040,
	KS_DVD_NOT_COPYRIGHTED        = 0x00000000,
	KS_DVD_COPYRIGHTED            = 0x00000040,
	KS_DVD_SECTOR_PROTECT_MASK    = 0x00000020,
	KS_DVD_SECTOR_NOT_PROTECTED   = 0x00000000,
	KS_DVD_SECTOR_PROTECTED       = 0x00000020,
}

mixin DEFINE_GUID!("KSCATEGORY_TVTUNER", "a799a800-a46d-11d0-a18c-00a02401dcd4");
mixin DEFINE_GUID!("KSCATEGORY_CROSSBAR", "a799a801-a46d-11d0-a18c-00a02401dcd4");
mixin DEFINE_GUID!("KSCATEGORY_TVAUDIO", "a799a802-a46d-11d0-a18c-00a02401dcd4");
mixin DEFINE_GUID!("KSCATEGORY_VPMUX", "a799a803-a46d-11d0-a18c-00a02401dcd4");
mixin DEFINE_GUID!("KSCATEGORY_VBICODEC", "07dad660-22f1-11d1-a9f4-00c04fbbde8f");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_VPVideo", "5a9b6a40-1a22-11d1-bad9-00609744111a");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_VPVBI", "5a9b6a41-1a22-11d1-bad9-00609744111a");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_VIDEOINFO", "05589f80-c356-11ce-bf01-00aa0055595a");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_VIDEOINFO2", "f72a76A0-eb0a-11d0-ace4-0000c0cc16ba");
mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_ANALOGVIDEO", "0482dde1-7817-11cf-8a03-00aa006ecb65");
mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_ANALOGVIDEO", "0482dde0-7817-11cf-8a03-00aa006ecb65");

//( (NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
	mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_ANALOGAUDIO", "0482DEE1-7817-11cf-8a03-00aa006ecb65");

mixin DEFINE_GUID!("KSDATAFORMAT_SPECIFIER_VBI", "f72a76e0-eb0a-11d0-ace4-0000c0cc16ba");
mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_VBI", "f72a76e1-eb0a-11d0-ace4-0000c0cc16ba");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_RAW8", "ca20d9a0-3e3e-11d1-9bf9-00c04fbbdebf");

//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_CC", "33214CC1-011F-11D2-B4B1-00A0D102CFBE");

mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_NABTS", "f72a76e2-eb0a-11d0-ace4-0000c0cc16ba");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_TELETEXT", "f72a76e3-eb0a-11d0-ace4-0000c0cc16ba");

enum {
	KS_BI_RGB       = 0,
	KS_BI_RLE8      = 1,
	KS_BI_RLE4      = 2,
	KS_BI_BITFIELDS = 3,
}

struct KS_RGBQUAD {
	BYTE rgbBlue;
	BYTE rgbGreen;
	BYTE rgbRed;
	BYTE rgbReserved;
}
alias KS_RGBQUAD* PKS_RGBQUAD;

enum {
	KS_iPALETTE_COLORS  = 256,
	KS_iEGA_COLORS      = 16,
	KS_iMASK_COLORS     = 3,
	KS_iTRUECOLOR       = 16,
	KS_iRED             = 0,
	KS_iGREEN           = 1,
	KS_iBLUE            = 2,
	KS_iPALETTE         = 8,
	KS_iMAXBITS         = 8,
	KS_SIZE_EGA_PALETTE = KS_iEGA_COLORS * KS_RGBQUAD.sizeof,
	KS_SIZE_PALETTE     = KS_iPALETTE_COLORS * KS_RGBQUAD.sizeof,
}

struct KS_BITMAPINFOHEADER {
	DWORD biSize;
	LONG biWidth;
	LONG biHeight;
	WORD biPlanes;
	WORD biBitCount;
	DWORD biCompression;
	DWORD biSizeImage;
	LONG biXPelsPerMeter;
	LONG biYPelsPerMeter;
	DWORD biClrUsed;
	DWORD biClrImportant;
}
alias KS_BITMAPINFOHEADER* PKS_BITMAPINFOHEADER;

struct KS_TRUECOLORINFO {
	DWORD[KS_iMASK_COLORS] dwBitMasks;
	KS_RGBQUAD[KS_iPALETTE_COLORS] bmiColors;
}
alias KS_TRUECOLORINFO* PKS_TRUECOLORINFO;

//KS_WIDTHBYTES(bits) ((DWORD)(((bits)+31) & (~31)) / 8)
//KS_DIBWIDTHBYTES(bi) (DWORD)KS_WIDTHBYTES((DWORD)(bi).biWidth * (DWORD)(bi).biBitCount)
//KS__DIBSIZE(bi) (KS_DIBWIDTHBYTES(bi) * (DWORD)(bi).biHeight)
//KS_DIBSIZE(bi) ((bi).biHeight < 0 ? (-1)*(KS__DIBSIZE(bi)) : KS__DIBSIZE(bi))

alias LONGLONG REFERENCE_TIME;

struct KS_VIDEOINFOHEADER {
	RECT rcSource;
	RECT rcTarget;
	DWORD dwBitRate;
	DWORD dwBitErrorRate;
	REFERENCE_TIME AvgTimePerFrame;
	KS_BITMAPINFOHEADER bmiHeader;
}
alias KS_VIDEOINFOHEADER* PKS_VIDEOINFOHEADER;

struct KS_VIDEOINFO {
	RECT rcSource;
	RECT rcTarget;
	DWORD dwBitRate;
	DWORD dwBitErrorRate;
	REFERENCE_TIME AvgTimePerFrame;
	KS_BITMAPINFOHEADER bmiHeader;
	union {
		KS_RGBQUAD[KS_iPALETTE_COLORS] bmiColors;
		DWORD[KS_iMASK_COLORS] dwBitMasks;
		KS_TRUECOLORINFO TrueColorInfo;
	}
}
alias KS_VIDEOINFO* PKS_VIDEOINFO;

enum {
	KS_SIZE_MASKS             = KS_iMASK_COLORS * DWORD.sizeof,
	KS_SIZE_PREHEADER         = KS_VIDEOINFOHEADER.bmiHeader.offsetof,
}
//	KS_SIZE_VIDEOHEADER(pbmi) (pbmi)->bmiHeader.biSize + KS_SIZE_PREHEADER,

struct KS_VBIINFOHEADER {
	ULONG StartLine;
	ULONG EndLine;
	ULONG SamplingFrequency;
	ULONG MinLineStartTime;
	ULONG MaxLineStartTime;
	ULONG ActualLineStartTime;
	ULONG ActualLineEndTime;
	ULONG VideoStandard;
	ULONG SamplesPerLine;
	ULONG StrideInBytes;
	ULONG BufferSize;
}
alias KS_VBIINFOHEADER* PKS_VBIINFOHEADER;

//(NTDDI_VERSION >= NTDDI_WINXP)
	enum KS_VBIDATARATE_NABTS = 5727272;
	enum KS_VBIDATARATE_CC = 503493;
	enum KS_VBISAMPLINGRATE_4X_NABTS = 4 * KS_VBIDATARATE_NABTS;
	enum KS_VBISAMPLINGRATE_47X_NABTS = 27000000;
	enum KS_VBISAMPLINGRATE_5X_NABTS = 5 * KS_VBIDATARATE_NABTS;
	const double KS_47NABTS_SCALER = KS_VBISAMPLINGRATE_47X_NABTS / cast(double)KS_VBIDATARATE_NABTS;

struct KS_ANALOGVIDEOINFO {
	RECT rcSource;
	RECT rcTarget;
	DWORD dwActiveWidth;
	DWORD dwActiveHeight;
	REFERENCE_TIME AvgTimePerFrame;
}
alias KS_ANALOGVIDEOINFO* PKS_ANALOGVIDEOINFO;

enum {
	KS_TVTUNER_CHANGE_BEGIN_TUNE = 0x0001,
	KS_TVTUNER_CHANGE_END_TUNE   = 0x0002,
}

struct KS_TVTUNER_CHANGE_INFO {
	DWORD dwFlags;
	DWORD dwCountryCode;
	DWORD dwAnalogVideoStandard;
	DWORD dwChannel;
}
alias KS_TVTUNER_CHANGE_INFO* PKS_TVTUNER_CHANGE_INFO;

enum {
	KS_MPEG2Level_Low,
	KS_MPEG2Level_Main,
	KS_MPEG2Level_High1440,
	KS_MPEG2Level_High
}
alias int KS_MPEG2Level;

enum {
	KS_MPEG2Profile_Simple,
	KS_MPEG2Profile_Main,
	KS_MPEG2Profile_SNRScalable,
	KS_MPEG2Profile_SpatiallyScalable,
	KS_MPEG2Profile_High
}
alias int KS_MPEG2Profile;

enum {
	KS_INTERLACE_IsInterlaced          = 0x00000001,
	KS_INTERLACE_1FieldPerSample       = 0x00000002,
	KS_INTERLACE_Field1First           = 0x00000004,
	KS_INTERLACE_UNUSED                = 0x00000008,
	KS_INTERLACE_FieldPatternMask      = 0x00000030,
	KS_INTERLACE_FieldPatField1Only    = 0x00000000,
	KS_INTERLACE_FieldPatField2Only    = 0x00000010,
	KS_INTERLACE_FieldPatBothRegular   = 0x00000020,
	KS_INTERLACE_FieldPatBothIrregular = 0x00000030,
	KS_INTERLACE_DisplayModeMask       = 0x000000c0,
	KS_INTERLACE_DisplayModeBobOnly    = 0x00000000,
	KS_INTERLACE_DisplayModeWeaveOnly  = 0x00000040,
	KS_INTERLACE_DisplayModeBobOrWeave = 0x00000080,
	KS_COPYPROTECT_RestrictDuplication = 0x00000001,
	KS_MPEG2_DoPanScan                 = 0x00000001,
	KS_MPEG2_DVDLine21Field1           = 0x00000002,
	KS_MPEG2_DVDLine21Field2           = 0x00000004,
	KS_MPEG2_SourceIsLetterboxed       = 0x00000008,
	KS_MPEG2_FilmCameraMode            = 0x00000010,
	KS_MPEG2_LetterboxAnalogOut        = 0x00000020,
	KS_MPEG2_DSS_UserData              = 0x00000040,
	KS_MPEG2_DVB_UserData              = 0x00000080,
	KS_MPEG2_27MhzTimebase             = 0x00000100,
//(NTDDI_VERSION >= NTDDI_WINXP)
		KS_MPEG2_WidescreenAnalogOut   = 0x00000200,
		KS_AMCONTROL_USED              = 0x00000001,
		KS_AMCONTROL_PAD_TO_4x3        = 0x00000002,
		KS_AMCONTROL_PAD_TO_16x9       = 0x00000004,
		KS_AMCONTROL_COLORINFO_PRESENT = 0x00000080,
}

struct KS_VIDEOINFOHEADER2 {
	RECT rcSource;
	RECT rcTarget;
	DWORD dwBitRate;
	DWORD dwBitErrorRate;
	REFERENCE_TIME AvgTimePerFrame;
	DWORD dwInterlaceFlags;
	DWORD dwCopyProtectFlags;
	DWORD dwPictAspectRatioX;
	DWORD dwPictAspectRatioY;
	union {
		DWORD dwControlFlags;
		DWORD dwReserved1;
	}
	DWORD dwReserved2;
	KS_BITMAPINFOHEADER bmiHeader;
}
alias KS_VIDEOINFOHEADER2* PKS_VIDEOINFOHEADER2;

struct KS_MPEG1VIDEOINFO {
	KS_VIDEOINFOHEADER hdr;
	DWORD dwStartTimeCode;
	DWORD cbSequenceHeader;
	BYTE[1] bSequenceHeader;
}
alias KS_MPEG1VIDEOINFO* PKS_MPEG1VIDEOINFO;

enum {
	KS_MAX_SIZE_MPEG1_SEQUENCE_INFO = 140
}
//KS_SIZE_MPEG1VIDEOINFO(pv) (FIELD_OFFSET(KS_MPEG1VIDEOINFO, bSequenceHeader[0]) + (pv)->cbSequenceHeader)
//KS_MPEG1_SEQUENCE_INFO(pv) ((const BYTE *)(pv)->bSequenceHeader)


struct KS_MPEGVIDEOINFO2 {
	KS_VIDEOINFOHEADER2 hdr;
	DWORD dwStartTimeCode;
	DWORD cbSequenceHeader;
	DWORD dwProfile;
	DWORD dwLevel;
	DWORD dwFlags;
	DWORD[1] bSequenceHeader;
}
alias KS_MPEGVIDEOINFO2* PKS_MPEGVIDEOINFO2;

//KS_SIZE_MPEGVIDEOINFO2(pv) (FIELD_OFFSET(KS_MPEGVIDEOINFO2, bSequenceHeader[0]) + (pv)->cbSequenceHeader)
//KS_MPEG1_SEQUENCE_INFO(pv) ((const BYTE *)(pv)->bSequenceHeader)

enum KS_MPEGAUDIOINFO_27MhzTimebase = 0x00000001;

struct KS_MPEGAUDIOINFO {
	DWORD dwFlags;
	DWORD dwReserved1;
	DWORD dwReserved2;
	DWORD dwReserved3;
}
alias KS_MPEGAUDIOINFO* PKS_MPEGAUDIOINFO;

struct KS_DATAFORMAT_VIDEOINFOHEADER {
	KSDATAFORMAT DataFormat;
	KS_VIDEOINFOHEADER VideoInfoHeader;
}
alias KS_DATAFORMAT_VIDEOINFOHEADER* PKS_DATAFORMAT_VIDEOINFOHEADER;

struct KS_DATAFORMAT_VIDEOINFOHEADER2 {
	KSDATAFORMAT DataFormat;
	KS_VIDEOINFOHEADER2 VideoInfoHeader2;
}
alias KS_DATAFORMAT_VIDEOINFOHEADER2* PKS_DATAFORMAT_VIDEOINFOHEADER2;

struct KS_DATAFORMAT_MPEGVIDEOINFO2 {
	KSDATAFORMAT DataFormat;
	KS_MPEGVIDEOINFO2 MpegVideoInfoHeader2;
}
alias KS_DATAFORMAT_MPEGVIDEOINFO2* PKS_DATAFORMAT_MPEGVIDEOINFO2;

struct KS_DATAFORMAT_VIDEOINFO_PALETTE {
	KSDATAFORMAT DataFormat;
	KS_VIDEOINFO VideoInfo;
}
alias KS_DATAFORMAT_VIDEOINFO_PALETTE* PKS_DATAFORMAT_VIDEOINFO_PALETTE;

struct KS_DATAFORMAT_VBIINFOHEADER {
	KSDATAFORMAT DataFormat;
	KS_VBIINFOHEADER VBIInfoHeader;
}
alias KS_DATAFORMAT_VBIINFOHEADER* PKS_DATAFORMAT_VBIINFOHEADER;

struct KS_VIDEO_STREAM_CONFIG_CAPS {
	GUID guid;
	ULONG VideoStandard;
	SIZE InputSize;
	SIZE MinCroppingSize;
	SIZE MaxCroppingSize;
	int CropGranularityX;
	int CropGranularityY;
	int CropAlignX;
	int CropAlignY;
	SIZE MinOutputSize;
	SIZE MaxOutputSize;
	int OutputGranularityX;
	int OutputGranularityY;
	int StretchTapsX;
	int StretchTapsY;
	int ShrinkTapsX;
	int ShrinkTapsY;
	LONGLONG MinFrameInterval;
	LONGLONG MaxFrameInterval;
	LONG MinBitsPerSecond;
	LONG MaxBitsPerSecond;
}
alias KS_VIDEO_STREAM_CONFIG_CAPS* PKS_VIDEO_STREAM_CONFIG_CAPS;

struct KS_DATARANGE_VIDEO {
	KSDATARANGE DataRange;
	BOOL bFixedSizeSamples;
	BOOL bTemporalCompression;
	DWORD StreamDescriptionFlags;
	DWORD MemoryAllocationFlags;
	KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
	KS_VIDEOINFOHEADER VideoInfoHeader;
}
alias KS_DATARANGE_VIDEO* PKS_DATARANGE_VIDEO;

struct KS_DATARANGE_VIDEO2 {
	KSDATARANGE DataRange;
	BOOL bFixedSizeSamples;
	BOOL bTemporalCompression;
	DWORD StreamDescriptionFlags;
	DWORD MemoryAllocationFlags;
	KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
	KS_VIDEOINFOHEADER2 VideoInfoHeader;
}
alias KS_DATARANGE_VIDEO2* PKS_DATARANGE_VIDEO2;

struct KS_DATARANGE_MPEG1_VIDEO {
	KSDATARANGE DataRange;
	BOOL bFixedSizeSamples;
	BOOL bTemporalCompression;
	DWORD StreamDescriptionFlags;
	DWORD MemoryAllocationFlags;
	KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
	KS_MPEG1VIDEOINFO VideoInfoHeader;
}
alias KS_DATARANGE_MPEG1_VIDEO* PKS_DATARANGE_MPEG1_VIDEO;

struct KS_DATARANGE_MPEG2_VIDEO {
	KSDATARANGE DataRange;
	BOOL bFixedSizeSamples;
	BOOL bTemporalCompression;
	DWORD StreamDescriptionFlags;
	DWORD MemoryAllocationFlags;
	KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
	KS_MPEGVIDEOINFO2 VideoInfoHeader;
}
alias KS_DATARANGE_MPEG2_VIDEO* PKS_DATARANGE_MPEG2_VIDEO;

struct KS_DATARANGE_VIDEO_PALETTE {
	KSDATARANGE DataRange;
	BOOL bFixedSizeSamples;
	BOOL bTemporalCompression;
	DWORD StreamDescriptionFlags;
	DWORD MemoryAllocationFlags;
	KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
	KS_VIDEOINFO VideoInfo;
}
alias KS_DATARANGE_VIDEO_PALETTE* PKS_DATARANGE_VIDEO_PALETTE;

struct KS_DATARANGE_VIDEO_VBI {
	KSDATARANGE DataRange;
	BOOL bFixedSizeSamples;
	BOOL bTemporalCompression;
	DWORD StreamDescriptionFlags;
	DWORD MemoryAllocationFlags;
	KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
	KS_VBIINFOHEADER VBIInfoHeader;
}
alias KS_DATARANGE_VIDEO_VBI* PKS_DATARANGE_VIDEO_VBI;

struct KS_DATARANGE_ANALOGVIDEO {
	KSDATARANGE DataRange;
	KS_ANALOGVIDEOINFO AnalogVideoInfo;
}
alias KS_DATARANGE_ANALOGVIDEO* PKS_DATARANGE_ANALOGVIDEO;

enum {
	KS_VIDEOSTREAM_PREVIEW  = 0x0001,
	KS_VIDEOSTREAM_CAPTURE  = 0x0002,
	KS_VIDEOSTREAM_VBI      = 0x0010,
	KS_VIDEOSTREAM_NABTS    = 0x0020,
	KS_VIDEOSTREAM_CC       = 0x0100,
	KS_VIDEOSTREAM_EDS      = 0x0200,
	KS_VIDEOSTREAM_TELETEXT = 0x0400,
	KS_VIDEOSTREAM_STILL    = 0x1000,
	KS_VIDEOSTREAM_IS_VPE   = 0x8000,
}

enum {
	KS_VIDEO_ALLOC_VPE_SYSTEM  = 0x0001,
	KS_VIDEO_ALLOC_VPE_DISPLAY = 0x0002,
	KS_VIDEO_ALLOC_VPE_AGP     = 0x0004,
}

//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("KSPROPSETID_VBICAP_PROPERTIES", "F162C607-7B35-496f-AD7F-2DCA3B46B718");

	enum {
		KSPROPERTY_VBICAP_PROPERTIES_PROTECTION = 0x01,
	}
	alias int KSPROPERTY_VBICAP;

	struct VBICAP_PROPERTIES_PROTECTION_S {
		KSPROPERTY Property;
		ULONG StreamIndex;
		ULONG Status;
	}
	alias VBICAP_PROPERTIES_PROTECTION_S* PVBICAP_PROPERTIES_PROTECTION_S;
	enum {
		KS_VBICAP_PROTECTION_MV_PRESENT  = 0x0001,
		KS_VBICAP_PROTECTION_MV_HARDWARE = 0x0002,
		KS_VBICAP_PROTECTION_MV_DETECTED = 0x0004,
	}

enum {
	KS_NABTS_GROUPID_ORIGINAL_CONTENT_BASE              = 0x800,
	KS_NABTS_GROUPID_ORIGINAL_CONTENT_ADVERTISER_BASE   = 0x810,
	KS_NABTS_GROUPID_PRODUCTION_COMPANY_CONTENT_BASE    = 0x820,
	KS_NABTS_GROUPID_PRODUCTION_COMPANY_ADVERTISER_BASE = 0x830,
	KS_NABTS_GROUPID_SYNDICATED_SHOW_CONTENT_BASE       = 0x840,
	KS_NABTS_GROUPID_SYNDICATED_SHOW_ADVERTISER_BASE    = 0x850,
	KS_NABTS_GROUPID_NETWORK_WIDE_CONTENT_BASE          = 0x860,
	KS_NABTS_GROUPID_NETWORK_WIDE_ADVERTISER_BASE       = 0x870,
	KS_NABTS_GROUPID_TELEVISION_STATION_CONTENT_BASE    = 0x880,
	KS_NABTS_GROUPID_TELEVISION_STATION_ADVERTISER_BASE = 0x890,
	KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_CONTENT_BASE    = 0x8A0,
	KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_ADVERTISER_BASE = 0x8B0,
	KS_NABTS_GROUPID_MICROSOFT_RESERVED_TEST_DATA_BASE  = 0x8F0,
}

mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_NABTS", "E757BCA0-39AC-11d1-A9F5-00C04FBBDE8F");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_NABTS_FEC", "E757BCA1-39AC-11d1-A9F5-00C04FBBDE8F");

enum {
	MAX_NABTS_VBI_LINES_PER_FIELD = 11,
	NABTS_LINES_PER_BUNDLE        = 16,
	NABTS_PAYLOAD_PER_LINE        = 28,
	NABTS_BYTES_PER_LINE          = 36,
}

struct NABTSFEC_BUFFER {
	ULONG dataSize;
	USHORT groupID;
	USHORT Reserved;
	UCHAR data[NABTS_LINES_PER_BUNDLE * NABTS_PAYLOAD_PER_LINE];
}
alias NABTSFEC_BUFFER* PNABTSFEC_BUFFER;

mixin DEFINE_GUID!("KSPROPSETID_VBICodecFiltering", "cafeb0ca-8715-11d0-bd6a-0035c0edbabe");

enum {
	KSPROPERTY_VBICODECFILTERING_SCANLINES_REQUESTED_BIT_ARRAY = 0x01,
	KSPROPERTY_VBICODECFILTERING_SCANLINES_DISCOVERED_BIT_ARRAY,
	KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_REQUESTED_BIT_ARRAY,
	KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_DISCOVERED_BIT_ARRAY,
	KSPROPERTY_VBICODECFILTERING_STATISTICS,
}
alias int KSPROPERTY_VBICODECFILTERING;

struct VBICODECFILTERING_SCANLINES {
	DWORD[32] DwordBitArray;
}
alias VBICODECFILTERING_SCANLINES* PVBICODECFILTERING_SCANLINES;

struct VBICODECFILTERING_NABTS_SUBSTREAMS {
	DWORD[128] SubstreamMask;
}
alias VBICODECFILTERING_NABTS_SUBSTREAMS* PVBICODECFILTERING_NABTS_SUBSTREAMS;

struct VBICODECFILTERING_CC_SUBSTREAMS {
	DWORD SubstreamMask;
}
alias VBICODECFILTERING_CC_SUBSTREAMS* PVBICODECFILTERING_CC_SUBSTREAMS;

enum {
	KS_CC_SUBSTREAM_ODD  = 0x0001,
	KS_CC_SUBSTREAM_EVEN = 0x0002,
}

//(NTDDI_VERSION >= NTDDI_WINXP)
	enum {
		KS_CC_SUBSTREAM_FIELD1_MASK = 0x00F0,
		KS_CC_SUBSTREAM_SERVICE_CC1 = 0x0010,
		KS_CC_SUBSTREAM_SERVICE_CC2 = 0x0020,
		KS_CC_SUBSTREAM_SERVICE_T1  = 0x0040,
		KS_CC_SUBSTREAM_SERVICE_T2  = 0x0080,
		KS_CC_SUBSTREAM_FIELD2_MASK = 0x1F00,
		KS_CC_SUBSTREAM_SERVICE_CC3 = 0x0100,
		KS_CC_SUBSTREAM_SERVICE_CC4 = 0x0200,
		KS_CC_SUBSTREAM_SERVICE_T3  = 0x0400,
		KS_CC_SUBSTREAM_SERVICE_T4  = 0x0800,
		KS_CC_SUBSTREAM_SERVICE_XDS = 0x1000,
	}

	enum CC_MAX_HW_DECODE_LINES = 12;
	struct CC_BYTE_PAIR {
		BYTE[2] Decoded;
		USHORT Reserved;
	}
	alias CC_BYTE_PAIR* PCC_BYTE_PAIR;

	struct CC_HW_FIELD {
		VBICODECFILTERING_SCANLINES ScanlinesRequested;
		ULONG fieldFlags;
		LONGLONG PictureNumber;
		CC_BYTE_PAIR[CC_MAX_HW_DECODE_LINES] Lines;
	}
	alias CC_HW_FIELD* PCC_HW_FIELD;


align(1){
	struct NABTS_BUFFER_LINE {
		BYTE Confidence;
		BYTE[NABTS_BYTES_PER_LINE] Bytes;
	}
	alias NABTS_BUFFER_LINE* PNABTS_BUFFER_LINE;

	enum NABTS_BUFFER_PICTURENUMBER_SUPPORT = 1;

	struct NABTS_BUFFER {
		VBICODECFILTERING_SCANLINES ScanlinesRequested;
		LONGLONG PictureNumber;
		NABTS_BUFFER_LINE[MAX_NABTS_VBI_LINES_PER_FIELD] NabtsLines;
	}
	alias NABTS_BUFFER* PNABTS_BUFFER;
}

//(NTDDI_VERSION >= NTDDI_WINXP)
	enum {
		WST_TVTUNER_CHANGE_BEGIN_TUNE = 0x1000,
		WST_TVTUNER_CHANGE_END_TUNE   = 0x2000,
		MAX_WST_VBI_LINES_PER_FIELD   = 17,
		WST_BYTES_PER_LINE            = 42,
	}

	struct WST_BUFFER_LINE {
		BYTE Confidence;
		BYTE[WST_BYTES_PER_LINE] Bytes;
	}
	alias WST_BUFFER_LINE* PWST_BUFFER_LINE;

	struct WST_BUFFER {
		VBICODECFILTERING_SCANLINES ScanlinesRequested;
		WST_BUFFER_LINE[MAX_WST_VBI_LINES_PER_FIELD] WstLines;
	}
	alias WST_BUFFER* PWST_BUFFER;

struct VBICODECFILTERING_STATISTICS_COMMON {
	DWORD InputSRBsProcessed;
	DWORD OutputSRBsProcessed;
	DWORD SRBsIgnored;
	DWORD InputSRBsMissing;
	DWORD OutputSRBsMissing;
	DWORD OutputFailures;
	DWORD InternalErrors;
	DWORD ExternalErrors;
	DWORD InputDiscontinuities;
	DWORD DSPFailures;
	DWORD TvTunerChanges;
	DWORD VBIHeaderChanges;
	DWORD LineConfidenceAvg;
	DWORD BytesOutput;
}
alias VBICODECFILTERING_STATISTICS_COMMON* PVBICODECFILTERING_STATISTICS_COMMON;

struct VBICODECFILTERING_STATISTICS_COMMON_PIN {
	DWORD SRBsProcessed;
	DWORD SRBsIgnored;
	DWORD SRBsMissing;
	DWORD InternalErrors;
	DWORD ExternalErrors;
	DWORD Discontinuities;
	DWORD LineConfidenceAvg;
	DWORD BytesOutput;
}
alias VBICODECFILTERING_STATISTICS_COMMON_PIN* PVBICODECFILTERING_STATISTICS_COMMON_PIN;

struct VBICODECFILTERING_STATISTICS_NABTS {
	VBICODECFILTERING_STATISTICS_COMMON Common;
	DWORD FECBundleBadLines;
	DWORD FECQueueOverflows;
	DWORD FECCorrectedLines;
	DWORD FECUncorrectableLines;
	DWORD BundlesProcessed;
	DWORD BundlesSent2IP;
	DWORD FilteredLines;
}
alias VBICODECFILTERING_STATISTICS_NABTS* PVBICODECFILTERING_STATISTICS_NABTS;

struct VBICODECFILTERING_STATISTICS_NABTS_PIN {
	VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
}
alias VBICODECFILTERING_STATISTICS_NABTS_PIN* PVBICODECFILTERING_STATISTICS_NABTS_PIN;

struct VBICODECFILTERING_STATISTICS_CC {
	VBICODECFILTERING_STATISTICS_COMMON Common;
}
alias VBICODECFILTERING_STATISTICS_CC* PVBICODECFILTERING_STATISTICS_CC;

struct VBICODECFILTERING_STATISTICS_CC_PIN {
	VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
}
alias VBICODECFILTERING_STATISTICS_CC_PIN* PVBICODECFILTERING_STATISTICS_CC_PIN;

//(NTDDI_VERSION >= NTDDI_WINXP)
	struct VBICODECFILTERING_STATISTICS_TELETEXT {
		VBICODECFILTERING_STATISTICS_COMMON Common;
	}
	alias VBICODECFILTERING_STATISTICS_TELETEXT* PVBICODECFILTERING_STATISTICS_TELETEXT;

	struct VBICODECFILTERING_STATISTICS_TELETEXT_PIN {
		VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
	}
	alias VBICODECFILTERING_STATISTICS_TELETEXT_PIN* PVBICODECFILTERING_STATISTICS_TELETEXT_PIN;

struct KSPROPERTY_VBICODECFILTERING_SCANLINES_S {
	KSPROPERTY Property;
	VBICODECFILTERING_SCANLINES Scanlines;
}
alias KSPROPERTY_VBICODECFILTERING_SCANLINES_S* PKSPROPERTY_VBICODECFILTERING_SCANLINES_S;

struct KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S {
	KSPROPERTY Property;
	VBICODECFILTERING_NABTS_SUBSTREAMS Substreams;
}
alias KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S* PKSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S;

struct KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S {
	KSPROPERTY Property;
	VBICODECFILTERING_CC_SUBSTREAMS Substreams;
}
alias KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S* PKSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S;

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S {
	KSPROPERTY Property;
	VBICODECFILTERING_STATISTICS_COMMON Statistics;
}
alias KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S* PKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S;

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S {
	KSPROPERTY Property;
	VBICODECFILTERING_STATISTICS_COMMON_PIN Statistics;
}
alias KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S* PKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S;

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S {
	KSPROPERTY Property;
	VBICODECFILTERING_STATISTICS_NABTS Statistics;
}
alias KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S* PKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S;

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S {
	KSPROPERTY Property;
	VBICODECFILTERING_STATISTICS_NABTS_PIN Statistics;
}
alias KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S* PKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S;

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S {
	KSPROPERTY Property;
	VBICODECFILTERING_STATISTICS_CC Statistics;
}
alias KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S* PKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S;

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S {
	KSPROPERTY Property;
	VBICODECFILTERING_STATISTICS_CC_PIN Statistics;
}
alias KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S* PKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S;

mixin DEFINE_GUID!("PINNAME_VIDEO_CAPTURE", "FB6C4281-0353-11d1-905F-0000C0CC16BA");
alias PINNAME_VIDEO_CAPTURE PINNAME_CAPTURE;

//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("PINNAME_VIDEO_CC_CAPTURE", "1AAD8061-012D-11d2-B4B1-00A0D102CFBE");
	mixin DEFINE_GUID!("PINNAME_VIDEO_NABTS_CAPTURE", "29703660-498A-11d2-B4B1-00A0D102CFBE");

mixin DEFINE_GUID!("PINNAME_VIDEO_PREVIEW", "FB6C4282-0353-11d1-905F-0000C0CC16BA");
mixin DEFINE_GUID!("PINNAME_VIDEO_ANALOGVIDEOIN", "FB6C4283-0353-11d1-905F-0000C0CC16BA");
mixin DEFINE_GUID!("PINNAME_VIDEO_VBI", "FB6C4284-0353-11d1-905F-0000C0CC16BA");
mixin DEFINE_GUID!("PINNAME_VIDEO_VIDEOPORT", "FB6C4285-0353-11d1-905F-0000C0CC16BA");
mixin DEFINE_GUID!("PINNAME_VIDEO_NABTS", "FB6C4286-0353-11d1-905F-0000C0CC16BA");
mixin DEFINE_GUID!("PINNAME_VIDEO_EDS", "FB6C4287-0353-11d1-905F-0000C0CC16BA");
mixin DEFINE_GUID!("PINNAME_VIDEO_TELETEXT", "FB6C4288-0353-11d1-905F-0000C0CC16BA");
mixin DEFINE_GUID!("PINNAME_VIDEO_CC", "FB6C4289-0353-11d1-905F-0000C0CC16BA");
mixin DEFINE_GUID!("PINNAME_VIDEO_STILL", "FB6C428A-0353-11d1-905F-0000C0CC16BA");
mixin DEFINE_GUID!("PINNAME_VIDEO_TIMECODE", "FB6C428B-0353-11d1-905F-0000C0CC16BA");
mixin DEFINE_GUID!("PINNAME_VIDEO_VIDEOPORT_VBI", "FB6C428C-0353-11d1-905F-0000C0CC16BA");

enum {
	KS_CAPTURE_ALLOC_INVALID     = 0,
	KS_CAPTURE_ALLOC_SYSTEM      = 0x0001,
	KS_CAPTURE_ALLOC_VRAM        = 0x0002,
	KS_CAPTURE_ALLOC_SYSTEM_AGP  = 0x0004,
	KS_CAPTURE_ALLOC_VRAM_MAPPED = 0x0008
}
alias int CAPTURE_MEMORY_ALLOCATION_FLAGS;
alias CAPTURE_MEMORY_ALLOCATION_FLAGS* PCAPTURE_MEMORY_ALLOCATION_FLAGS;

mixin DEFINE_GUID!("KSPROPSETID_VramCapture", "E73FACE3-2880-4902-B799-88D0CD634E0F");

enum {
	KSPROPERTY_DISPLAY_ADAPTER_GUID = 1,
	KSPROPERTY_PREFERRED_CAPTURE_SURFACE,
	KSPROPERTY_CURRENT_CAPTURE_SURFACE,
	KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS
}
alias int KSPROPERTY_VIDMEM_TRANSPORT;

/*
DEFINE_KSPROPERTY_ITEM_DISPLAY_ADAPTER_GUID(GetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_DISPLAY_ADAPTER_GUID, (GetHandler), sizeof(KSPROPERTY), sizeof(GUID), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_PREFERRED_CAPTURE_SURFACE(GetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_PREFERRED_CAPTURE_SURFACE, (GetHandler), sizeof(KSPROPERTY), sizeof(CAPTURE_MEMORY_ALLOCATION_FLAGS), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_CURRENT_CAPTURE_SURFACE(GetHandler, SetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_CURRENT_CAPTURE_SURFACE, (GetHandler), sizeof(KSPROPERTY), sizeof(CAPTURE_MEMORY_ALLOCATION_FLAGS), (SetHandler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS(GetHandler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS, (GetHandler), sizeof(VRAM_SURFACE_INFO_PROPERTY_S), sizeof(DWORD), NULL, NULL, 0, NULL, NULL, 0)
*/

struct VRAM_SURFACE_INFO {
	UINT_PTR hSurface;
	LONGLONG VramPhysicalAddress;
	DWORD cbCaptured;
	DWORD dwWidth;
	DWORD dwHeight;
	DWORD dwLinearSize;
	LONG lPitch;
	ULONGLONG[16] ullReserved;
}
alias VRAM_SURFACE_INFO* PVRAM_SURFACE_INFO;

struct VRAM_SURFACE_INFO_PROPERTY_S {
	KSPROPERTY Property;
	PVRAM_SURFACE_INFO pVramSurfaceInfo;
}
alias VRAM_SURFACE_INFO_PROPERTY_S* PVRAM_SURFACE_INFO_PROPERTY_S;

mixin DEFINE_GUID!("KSPROPSETID_MPEG4_MediaType_Attributes", "FF6C4BFA-07A9-4c7b-A237-672F9D68065F");

enum {
	KSPROPERTY_MPEG4_MEDIATYPE_SD_BOX = 1
}
alias int KSPROPERTY_MPEG4_MEDIATYPE_ATTRIBUTES;

mixin DEFINE_GUID!("KSEVENTSETID_DynamicFormatChange", "162AC456-83D7-4239-96DF-C75FFA138BC6");

enum {
	KSEVENT_DYNAMIC_FORMAT_CHANGE = 0
}

enum {
	KS_VIDEO_FLAG_FIELD_MASK   = 0x0003,
	KS_VIDEO_FLAG_FRAME        = 0x0000,
	KS_VIDEO_FLAG_FIELD1       = 0x0001,
	KS_VIDEO_FLAG_FIELD2       = 0x0002,
	KS_VIDEO_FLAG_FIELD1FIRST  = 0x0004,
	KS_VIDEO_FLAG_WEAVE        = 0x0008,
	KS_VIDEO_FLAG_IPB_MASK     = 0x0030,
	KS_VIDEO_FLAG_I_FRAME      = 0x0000,
	KS_VIDEO_FLAG_P_FRAME      = 0x0010,
	KS_VIDEO_FLAG_B_FRAME      = 0x0020,
	KS_VIDEO_FLAG_REPEAT_FIELD = 0x0040,
}

struct KS_FRAME_INFO {
	ULONG ExtendedHeaderSize;
	DWORD dwFrameFlags;
	LONGLONG PictureNumber;
	LONGLONG DropCount;
	HANDLE hDirectDraw;
	HANDLE hSurfaceHandle;
	RECT DirectDrawRect;
	union {
		LONG lSurfacePitch;
		DWORD Reserved1;
	}
	DWORD Reserved2;
	DWORD Reserved3;
	DWORD Reserved4;
}
alias KS_FRAME_INFO* PKS_FRAME_INFO;

enum {
//(NTDDI_VERSION < NTDDI_WINXP)
		KS_VBI_FLAG_FRAME = 0x0000,
	KS_VBI_FLAG_FIELD1 = 0x0001,
	KS_VBI_FLAG_FIELD2 = 0x0002,
//(NTDDI_VERSION >= NTDDI_WINXP)
		KS_VBI_FLAG_MV_PRESENT  = 0x0100,
		KS_VBI_FLAG_MV_HARDWARE = 0x0200,
		KS_VBI_FLAG_MV_DETECTED = 0x0400,
	KS_VBI_FLAG_TVTUNER_CHANGE       = 0x0010,
	KS_VBI_FLAG_VBIINFOHEADER_CHANGE = 0x0020,
}

struct KS_VBI_FRAME_INFO {
	ULONG ExtendedHeaderSize;
	DWORD dwFrameFlags;
	LONGLONG PictureNumber;
	LONGLONG DropCount;
	DWORD dwSamplingFrequency;
	KS_TVTUNER_CHANGE_INFO TvTunerChangeInfo;
	KS_VBIINFOHEADER VBIInfoHeader;
}
alias KS_VBI_FRAME_INFO* PKS_VBI_FRAME_INFO;

enum {
	KS_AnalogVideo_None     = 0x00000000,
	KS_AnalogVideo_NTSC_M   = 0x00000001,
	KS_AnalogVideo_NTSC_M_J = 0x00000002,
	KS_AnalogVideo_NTSC_433 = 0x00000004,
	KS_AnalogVideo_PAL_B    = 0x00000010,
	KS_AnalogVideo_PAL_D    = 0x00000020,
	KS_AnalogVideo_PAL_G    = 0x00000040,
	KS_AnalogVideo_PAL_H    = 0x00000080,
	KS_AnalogVideo_PAL_I    = 0x00000100,
	KS_AnalogVideo_PAL_M    = 0x00000200,
	KS_AnalogVideo_PAL_N    = 0x00000400,
	KS_AnalogVideo_PAL_60   = 0x00000800,
	KS_AnalogVideo_SECAM_B  = 0x00001000,
	KS_AnalogVideo_SECAM_D  = 0x00002000,
	KS_AnalogVideo_SECAM_G  = 0x00004000,
	KS_AnalogVideo_SECAM_H  = 0x00008000,
	KS_AnalogVideo_SECAM_K  = 0x00010000,
	KS_AnalogVideo_SECAM_K1 = 0x00020000,
	KS_AnalogVideo_SECAM_L  = 0x00040000,
	KS_AnalogVideo_SECAM_L1 = 0x00080000,
	//(NTDDI_VERSION >= NTDDI_WINXP)
		KS_AnalogVideo_PAL_N_COMBO = 0x00100000
}
alias int KS_AnalogVideoStandard;
enum {
	KS_AnalogVideo_NTSC_Mask = 0x00000007,
//(NTDDI_VERSION >= NTDDI_WINXP)
		KS_AnalogVideo_PAL_Mask = 0x00100FF0,
	//KS_AnalogVideo_PAL_Mask 0x00000FF0
	KS_AnalogVideo_SECAM_Mask = 0x000FF000
}

mixin DEFINE_GUID!("PROPSETID_ALLOCATOR_CONTROL", "53171960-148E-11d2-9979-0000C0CC16BA");

enum {
	KSPROPERTY_ALLOCATOR_CONTROL_HONOR_COUNT,
	KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE,
	//(NTDDI_VERSION >= NTDDI_WINXP)
		KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS,
		KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE,
}
alias int KSPROPERTY_ALLOCATOR_CONTROL;

//(NTDDI_VERSION >= NTDDI_WINXP)
	struct KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S {
		ULONG CX;
		ULONG CY;
	}
	alias KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S* PKSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S;

	struct KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S {
		ULONG InterleavedCapSupported;
	}
	alias KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S* PKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S;

	struct KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S {
		ULONG InterleavedCapPossible;
	}
	alias KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S* PKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S;

mixin DEFINE_GUID!("PROPSETID_VIDCAP_VIDEOPROCAMP", "C6E13360-30AC-11d0-A18C-00A0C9118956");

enum {
	KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS,
	KSPROPERTY_VIDEOPROCAMP_CONTRAST,
	KSPROPERTY_VIDEOPROCAMP_HUE,
	KSPROPERTY_VIDEOPROCAMP_SATURATION,
	KSPROPERTY_VIDEOPROCAMP_SHARPNESS,
	KSPROPERTY_VIDEOPROCAMP_GAMMA,
	KSPROPERTY_VIDEOPROCAMP_COLORENABLE,
	KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE,
	KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION,
	//(NTDDI_VERSION >= NTDDI_WINXP)
		KSPROPERTY_VIDEOPROCAMP_GAIN,
	//((NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
		KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER,
		KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER_LIMIT,
		KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE_COMPONENT,
		KSPROPERTY_VIDEOPROCAMP_POWERLINE_FREQUENCY,
}
alias int KSPROPERTY_VIDCAP_VIDEOPROCAMP;

struct KSPROPERTY_VIDEOPROCAMP_S {
	KSPROPERTY Property;
	LONG Value;
	ULONG Flags;
	ULONG Capabilities;
}
alias KSPROPERTY_VIDEOPROCAMP_S* PKSPROPERTY_VIDEOPROCAMP_S;

//((NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
	struct KSPROPERTY_VIDEOPROCAMP_NODE_S {
		KSP_NODE NodeProperty;
		LONG Value;
		ULONG Flags;
		ULONG Capabilities;
	}
	alias KSPROPERTY_VIDEOPROCAMP_NODE_S* PKSPROPERTY_VIDEOPROCAMP_NODE_S;

	struct KSPROPERTY_VIDEOPROCAMP_S2 {
		KSPROPERTY Property;
		LONG Value1;
		ULONG Flags;
		ULONG Capabilities;
		LONG Value2;
	}
	alias KSPROPERTY_VIDEOPROCAMP_S2* PKSPROPERTY_VIDEOPROCAMP_S2;

	struct KSPROPERTY_VIDEOPROCAMP_NODE_S2 {
		KSP_NODE NodeProperty;
		LONG Value1;
		ULONG Flags;
		ULONG Capabilities;
		LONG Value2;
	}
	alias KSPROPERTY_VIDEOPROCAMP_NODE_S2* PKSPROPERTY_VIDEOPROCAMP_NODE_S2;

enum {
	KSPROPERTY_VIDEOPROCAMP_FLAGS_AUTO   = 0x0001,
	KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL = 0x0002,
}

//((NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
	mixin DEFINE_GUID!("PROPSETID_VIDCAP_SELECTOR", "1ABDAECA-68B6-4F83-9371-B413907C7B9F");

	enum {
		KSPROPERTY_SELECTOR_SOURCE_NODE_ID,
		KSPROPERTY_SELECTOR_NUM_SOURCES
	}
	alias int KSPROPERTY_VIDCAP_SELECTOR;
	alias KSPROPERTY_VIDCAP_SELECTOR* PKSPROPERTY_VIDCAP_SELECTOR;

	struct KSPROPERTY_SELECTOR_S {
		KSPROPERTY Property;
		LONG Value;
		ULONG Flags;
		ULONG Capabilities;
	}
	alias KSPROPERTY_SELECTOR_S* PKSPROPERTY_SELECTOR_S;

	struct KSPROPERTY_SELECTOR_NODE_S {
		KSP_NODE NodeProperty;
		LONG Value;
		ULONG Flags;
		ULONG Capabilities;
	}
	alias KSPROPERTY_SELECTOR_NODE_S* PKSPROPERTY_SELECTOR_NODE_S;


mixin DEFINE_GUID!("PROPSETID_TUNER", "6a2e0605-28e4-11d0-a18c-00a0c9118956");

enum {
	KSPROPERTY_TUNER_CAPS,
	KSPROPERTY_TUNER_MODE_CAPS,
	KSPROPERTY_TUNER_MODE,
	KSPROPERTY_TUNER_STANDARD,
	KSPROPERTY_TUNER_FREQUENCY,
	KSPROPERTY_TUNER_INPUT,
	KSPROPERTY_TUNER_STATUS,
	KSPROPERTY_TUNER_IF_MEDIUM,
	KSPROPERTY_TUNER_SCAN_CAPS,
	KSPROPERTY_TUNER_SCAN_STATUS,
	KSPROPERTY_TUNER_STANDARD_MODE,
	KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS
}
alias int KSPROPERTY_TUNER;

enum {
	KSPROPERTY_TUNER_MODE_TV       = 0x0001,
	KSPROPERTY_TUNER_MODE_FM_RADIO = 0x0002,
	KSPROPERTY_TUNER_MODE_AM_RADIO = 0x0004,
	KSPROPERTY_TUNER_MODE_DSS      = 0x0008,
	KSPROPERTY_TUNER_MODE_ATSC     = 0x0010,
}
alias int KSPROPERTY_TUNER_MODES;

enum {
	KS_TUNER_TUNING_EXACT = 1,
	KS_TUNER_TUNING_FINE,
	KS_TUNER_TUNING_COARSE,
}
alias int KS_TUNER_TUNING_FLAGS;

enum {
	KS_TUNER_STRATEGY_PLL             = 0x01,
	KS_TUNER_STRATEGY_SIGNAL_STRENGTH = 0x02,
	KS_TUNER_STRATEGY_DRIVER_TUNES    = 0x04,
}
alias int KS_TUNER_STRATEGY;

struct KSPROPERTY_TUNER_CAPS_S {
	KSPROPERTY Property;
	ULONG ModesSupported;
	KSPIN_MEDIUM VideoMedium;
	KSPIN_MEDIUM TVAudioMedium;
	KSPIN_MEDIUM RadioAudioMedium;
}
alias KSPROPERTY_TUNER_CAPS_S* PKSPROPERTY_TUNER_CAPS_S;

struct KSPROPERTY_TUNER_IF_MEDIUM_S {
	KSPROPERTY Property;
	KSPIN_MEDIUM IFMedium;
}
alias KSPROPERTY_TUNER_IF_MEDIUM_S* PKSPROPERTY_TUNER_IF_MEDIUM_S;

struct KSPROPERTY_TUNER_MODE_CAPS_S {
	KSPROPERTY Property;
	ULONG Mode;
	ULONG StandardsSupported;
	ULONG MinFrequency;
	ULONG MaxFrequency;
	ULONG TuningGranularity;
	ULONG NumberOfInputs;
	ULONG SettlingTime;
	ULONG Strategy;
}
alias KSPROPERTY_TUNER_MODE_CAPS_S* PKSPROPERTY_TUNER_MODE_CAPS_S;

struct KSPROPERTY_TUNER_MODE_S {
	KSPROPERTY Property;
	ULONG Mode;
}
alias KSPROPERTY_TUNER_MODE_S* PKSPROPERTY_TUNER_MODE_S;

struct KSPROPERTY_TUNER_FREQUENCY_S {
	KSPROPERTY Property;
	ULONG Frequency;
	ULONG LastFrequency;
	ULONG TuningFlags;
	ULONG VideoSubChannel;
	ULONG AudioSubChannel;
	ULONG Channel;
	ULONG Country;
}
alias KSPROPERTY_TUNER_FREQUENCY_S* PKSPROPERTY_TUNER_FREQUENCY_S;

struct KSPROPERTY_TUNER_STANDARD_S {
	KSPROPERTY Property;
	ULONG Standard;
}
alias KSPROPERTY_TUNER_STANDARD_S* PKSPROPERTY_TUNER_STANDARD_S;

struct KSPROPERTY_TUNER_STANDARD_MODE_S {
	KSPROPERTY Property;
	BOOL AutoDetect;
}
alias KSPROPERTY_TUNER_STANDARD_MODE_S* PKSPROPERTY_TUNER_STANDARD_MODE_S;

struct KSPROPERTY_TUNER_INPUT_S {
	KSPROPERTY Property;
	ULONG InputIndex;
}
alias KSPROPERTY_TUNER_INPUT_S* PKSPROPERTY_TUNER_INPUT_S;

struct KSPROPERTY_TUNER_STATUS_S {
	KSPROPERTY Property;
	ULONG CurrentFrequency;
	ULONG PLLOffset;
	ULONG SignalStrength;
	ULONG Busy;
}
alias KSPROPERTY_TUNER_STATUS_S* PKSPROPERTY_TUNER_STATUS_S;

enum {
	Tuner_LockType_None                      = 0x00,
	Tuner_LockType_Within_Scan_Sensing_Range = 0x01,
	Tuner_LockType_Locked                    = 0x02
}
alias int TunerLockType;

struct TUNER_ANALOG_CAPS_S {
	ULONG Mode;
	ULONG StandardsSupported;
	ULONG MinFrequency;
	ULONG MaxFrequency;
	ULONG TuningGranularity;
	ULONG SettlingTime;
	ULONG ScanSensingRange;
	ULONG FineTuneSensingRange;
}
alias TUNER_ANALOG_CAPS_S* PTUNER_ANALOG_CAPS_S;

mixin DEFINE_GUID!("EVENTSETID_TUNER", "6a2e0606-28e4-11d0-a18c-00a0c9118956");

enum {
	KSEVENT_TUNER_CHANGED,
	KSEVENT_TUNER_INITIATE_SCAN
}
alias int KSEVENT_TUNER;

struct KSPROPERTY_TUNER_SCAN_CAPS_S {
	KSPROPERTY Property;
	BOOL fSupportsHardwareAssistedScanning;
	ULONG SupportedBroadcastStandards;
	PVOID GUIDBucket;
	ULONG lengthofBucket;
}
alias KSPROPERTY_TUNER_SCAN_CAPS_S* PKSPROPERTY_TUNER_SCAN_CAPS_S;

struct KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S {
	KSPROPERTY Property;
	GUID NetworkType;
	ULONG BufferSize;
	PVOID NetworkTunerCapabilities;
}
alias KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S* PKSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S;

struct KSPROPERTY_TUNER_SCAN_STATUS_S {
	KSPROPERTY Property;
	TunerLockType LockStatus;
	ULONG CurrentFrequency;
}
alias KSPROPERTY_TUNER_SCAN_STATUS_S* PKSPROPERTY_TUNER_SCAN_STATUS_S;

struct KSEVENT_TUNER_INITIATE_SCAN_S {
	KSEVENTDATA EventData;
	ULONG StartFrequency;
	ULONG EndFrequency;
}
alias KSEVENT_TUNER_INITIATE_SCAN_S* PKSEVENT_TUNER_INITIATE_SCAN_S;

//( (NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
	mixin DEFINE_GUID!("KSNODETYPE_VIDEO_STREAMING", "DFF229E1-F70F-11D0-B917-00A0C9223196");
	mixin DEFINE_GUID!("KSNODETYPE_VIDEO_INPUT_TERMINAL", "DFF229E2-F70F-11D0-B917-00A0C9223196");
	mixin DEFINE_GUID!("KSNODETYPE_VIDEO_OUTPUT_TERMINAL", "DFF229E3-F70F-11D0-B917-00A0C9223196");
	mixin DEFINE_GUID!("KSNODETYPE_VIDEO_SELECTOR", "DFF229E4-F70F-11D0-B917-00A0C9223196");
	mixin DEFINE_GUID!("KSNODETYPE_VIDEO_PROCESSING", "DFF229E5-F70F-11D0-B917-00A0C9223196");
	mixin DEFINE_GUID!("KSNODETYPE_VIDEO_CAMERA_TERMINAL", "DFF229E6-F70F-11D0-B917-00A0C9223196");
	mixin DEFINE_GUID!("KSNODETYPE_VIDEO_INPUT_MTT", "DFF229E7-F70F-11D0-B917-00A0C9223196");
	mixin DEFINE_GUID!("KSNODETYPE_VIDEO_OUTPUT_MTT", "DFF229E8-F70F-11D0-B917-00A0C9223196");

mixin DEFINE_GUID!("PROPSETID_VIDCAP_VIDEOENCODER", "6a2e0610-28e4-11d0-a18c-00a0c9118956");

enum {
	KSPROPERTY_VIDEOENCODER_CAPS,
	KSPROPERTY_VIDEOENCODER_STANDARD,
	KSPROPERTY_VIDEOENCODER_COPYPROTECTION,
	KSPROPERTY_VIDEOENCODER_CC_ENABLE,
}
alias int KSPROPERTY_VIDCAP_VIDEOENCODER;

struct KSPROPERTY_VIDEOENCODER_S {
	KSPROPERTY Property;
	LONG Value;
	ULONG Flags;
	ULONG Capabilities;
}
alias KSPROPERTY_VIDEOENCODER_S* PKSPROPERTY_VIDEOENCODER_S;

mixin DEFINE_GUID!("PROPSETID_VIDCAP_VIDEODECODER", "C6E13350-30AC-11d0-A18C-00A0C9118956");

enum {
	KSPROPERTY_VIDEODECODER_CAPS,
	KSPROPERTY_VIDEODECODER_STANDARD,
	KSPROPERTY_VIDEODECODER_STATUS,
	KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE,
	KSPROPERTY_VIDEODECODER_VCR_TIMING,
	KSPROPERTY_VIDEODECODER_STATUS2
}
alias int KSPROPERTY_VIDCAP_VIDEODECODER;

enum {
	KS_VIDEODECODER_FLAGS_CAN_DISABLE_OUTPUT  = 0X0001,
	KS_VIDEODECODER_FLAGS_CAN_USE_VCR_LOCKING = 0X0002,
	KS_VIDEODECODER_FLAGS_CAN_INDICATE_LOCKED = 0X0004,
}
alias int KS_VIDEODECODER_FLAGS;

struct KSPROPERTY_VIDEODECODER_CAPS_S {
	KSPROPERTY Property;
	ULONG StandardsSupported;
	ULONG Capabilities;
	ULONG SettlingTime;
	ULONG HSyncPerVSync;
}
alias KSPROPERTY_VIDEODECODER_CAPS_S* PKSPROPERTY_VIDEODECODER_CAPS_S;

struct KSPROPERTY_VIDEODECODER_STATUS_S {
	KSPROPERTY Property;
	ULONG NumberOfLines;
	ULONG SignalLocked;
}
alias KSPROPERTY_VIDEODECODER_STATUS_S* PKSPROPERTY_VIDEODECODER_STATUS_S;

struct KSPROPERTY_VIDEODECODER_STATUS2_S {
	KSPROPERTY Property;
	ULONG NumberOfLines;
	ULONG SignalLocked;
	ULONG ChromaLock;
}
alias KSPROPERTY_VIDEODECODER_STATUS2_S* PKSPROPERTY_VIDEODECODER_STATUS2_S;

struct KSPROPERTY_VIDEODECODER_S {
	KSPROPERTY Property;
	ULONG Value;
}
alias KSPROPERTY_VIDEODECODER_S* PKSPROPERTY_VIDEODECODER_S;

mixin DEFINE_GUID!("EVENTSETID_VIDEODECODER", "6a2e0621-28e4-11d0-a18c-00a0c9118956");

enum {
	KSEVENT_VIDEODECODER_CHANGED
}
alias int KSEVENT_VIDEODECODER;

mixin DEFINE_GUID!("PROPSETID_VIDCAP_CAMERACONTROL", "C6E13370-30AC-11d0-A18C-00A0C9118956");

enum {
	KSPROPERTY_CAMERACONTROL_PAN,
	KSPROPERTY_CAMERACONTROL_TILT,
	KSPROPERTY_CAMERACONTROL_ROLL,
	KSPROPERTY_CAMERACONTROL_ZOOM,
	KSPROPERTY_CAMERACONTROL_EXPOSURE,
	KSPROPERTY_CAMERACONTROL_IRIS,
	KSPROPERTY_CAMERACONTROL_FOCUS,
	//( (NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
		KSPROPERTY_CAMERACONTROL_SCANMODE,
		KSPROPERTY_CAMERACONTROL_PRIVACY,
		KSPROPERTY_CAMERACONTROL_PANTILT,
		KSPROPERTY_CAMERACONTROL_PAN_RELATIVE,
		KSPROPERTY_CAMERACONTROL_TILT_RELATIVE,
		KSPROPERTY_CAMERACONTROL_ROLL_RELATIVE,
		KSPROPERTY_CAMERACONTROL_ZOOM_RELATIVE,
		KSPROPERTY_CAMERACONTROL_EXPOSURE_RELATIVE,
		KSPROPERTY_CAMERACONTROL_IRIS_RELATIVE,
		KSPROPERTY_CAMERACONTROL_FOCUS_RELATIVE,
		KSPROPERTY_CAMERACONTROL_PANTILT_RELATIVE,
		KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH,
		KSPROPERTY_CAMERACONTROL_AUTO_EXPOSURE_PRIORITY,
}
alias int KSPROPERTY_VIDCAP_CAMERACONTROL;

struct KSPROPERTY_CAMERACONTROL_S {
	KSPROPERTY Property;
	LONG Value;
	ULONG Flags;
	ULONG Capabilities;
}
alias KSPROPERTY_CAMERACONTROL_S* PKSPROPERTY_CAMERACONTROL_S;

enum {
	KSPROPERTY_CAMERACONTROL_FLAGS_AUTO     = 0x0001,
	KSPROPERTY_CAMERACONTROL_FLAGS_MANUAL   = 0x0002,
	KSPROPERTY_CAMERACONTROL_FLAGS_ABSOLUTE = 0x0000,
	KSPROPERTY_CAMERACONTROL_FLAGS_RELATIVE = 0x0010,
}

//( (NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
	struct KSPROPERTY_CAMERACONTROL_NODE_S {
		KSP_NODE NodeProperty;
		LONG Value;
		ULONG Flags;
		ULONG Capabilities;
	}
	alias KSPROPERTY_CAMERACONTROL_NODE_S* PKSPROPERTY_CAMERACONTROL_NODE_S;

	struct KSPROPERTY_CAMERACONTROL_S2 {
		KSPROPERTY Property;
		LONG Value1;
		ULONG Flags;
		ULONG Capabilities;
		LONG Value2;
	}
	alias KSPROPERTY_CAMERACONTROL_S2* PKSPROPERTY_CAMERACONTROL_S2;

	struct KSPROPERTY_CAMERACONTROL_NODE_S2 {
		KSP_NODE NodeProperty;
		LONG Value1;
		ULONG Flags;
		ULONG Capabilities;
		LONG Value2;
	}
	alias KSPROPERTY_CAMERACONTROL_NODE_S2* PKSPROPERTY_CAMERACONTROL_NODE_S2;

	struct KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S {
		KSPROPERTY Property;
		LONG lOcularFocalLength;
		LONG lObjectiveFocalLengthMin;
		LONG lObjectiveFocalLengthMax;
	}
	alias KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S* PKSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S;

	struct KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S {
		KSNODEPROPERTY NodeProperty;
		LONG lOcularFocalLength;
		LONG lObjectiveFocalLengthMin;
		LONG lObjectiveFocalLengthMax;
	}
	alias KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S* PKSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S;

	mixin DEFINE_GUID!("PROPSETID_EXT_DEVICE", "B5730A90-1A2C-11cf-8C23-00AA006B6814");

	enum {
		KSPROPERTY_EXTDEVICE_ID,
		KSPROPERTY_EXTDEVICE_VERSION,
		KSPROPERTY_EXTDEVICE_POWER_STATE,
		KSPROPERTY_EXTDEVICE_PORT,
		KSPROPERTY_EXTDEVICE_CAPABILITIES
	}
	alias int KSPROPERTY_EXTDEVICE;

	struct DEVCAPS {
		LONG CanRecord;
		LONG CanRecordStrobe;
		LONG HasAudio;
		LONG HasVideo;
		LONG UsesFiles;
		LONG CanSave;
		LONG DeviceType;
		LONG TCRead;
		LONG TCWrite;
		LONG CTLRead;
		LONG IndexRead;
		LONG Preroll;
		LONG Postroll;
		LONG SyncAcc;
		LONG NormRate;
		LONG CanPreview;
		LONG CanMonitorSrc;
		LONG CanTest;
		LONG VideoIn;
		LONG AudioIn;
		LONG Calibrate;
		LONG SeekType;
		LONG SimulatedHardware;
	}
	alias DEVCAPS* PDEVCAPS;

	struct KSPROPERTY_EXTDEVICE_S {
		KSPROPERTY Property;
		union {
			DEVCAPS Capabilities;
			ULONG DevPort;
			ULONG PowerState;
			WCHAR[MAX_PATH] pawchString;
			DWORD[2] NodeUniqueID;
		}
	}
	alias KSPROPERTY_EXTDEVICE_S* PKSPROPERTY_EXTDEVICE_S;

	mixin DEFINE_GUID!("PROPSETID_EXT_TRANSPORT", "A03CD5F0-3045-11cf-8C44-00AA006B6814");

	enum {
		KSPROPERTY_EXTXPORT_CAPABILITIES,
		KSPROPERTY_EXTXPORT_INPUT_SIGNAL_MODE,
		KSPROPERTY_EXTXPORT_OUTPUT_SIGNAL_MODE,
		KSPROPERTY_EXTXPORT_LOAD_MEDIUM,
		KSPROPERTY_EXTXPORT_MEDIUM_INFO,
		KSPROPERTY_EXTXPORT_STATE,
		KSPROPERTY_EXTXPORT_STATE_NOTIFY,
		KSPROPERTY_EXTXPORT_TIMECODE_SEARCH,
		KSPROPERTY_EXTXPORT_ATN_SEARCH,
		KSPROPERTY_EXTXPORT_RTC_SEARCH,
		KSPROPERTY_RAW_AVC_CMD
	}
	alias int KSPROPERTY_EXTXPORT;

	struct TRANSPORTSTATUS {
		LONG Mode;
		LONG LastError;
		LONG RecordInhibit;
		LONG ServoLock;
		LONG MediaPresent;
		LONG MediaLength;
		LONG MediaSize;
		LONG MediaTrackCount;
		LONG MediaTrackLength;
		LONG MediaTrackSide;
		LONG MediaType;
		LONG LinkMode;
		LONG NotifyOn;
	}
	alias TRANSPORTSTATUS* PTRANSPORTSTATUS;

	struct TRANSPORTBASICPARMS {
		LONG TimeFormat;
		LONG TimeReference;
		LONG Superimpose;
		LONG EndStopAction;
		LONG RecordFormat;
		LONG StepFrames;
		LONG SetpField;
		LONG Preroll;
		LONG RecPreroll;
		LONG Postroll;
		LONG EditDelay;
		LONG PlayTCDelay;
		LONG RecTCDelay;
		LONG EditField;
		LONG FrameServo;
		LONG ColorFrameServo;
		LONG ServoRef;
		LONG WarnGenlock;
		LONG SetTracking;
		TCHAR[40] VolumeName;
		LONG[20] Ballistic;
		LONG Speed;
		LONG CounterFormat;
		LONG TunerChannel;
		LONG TunerNumber;
		LONG TimerEvent;
		LONG TimerStartDay;
		LONG TimerStartTime;
		LONG TimerStopDay;
		LONG TimerStopTime;
	}
	alias TRANSPORTBASICPARMS* PTRANSPORTBASICPARMS;

	struct TRANSPORTVIDEOPARMS {
		LONG OutputMode;
		LONG Input;
	}
	alias TRANSPORTVIDEOPARMS* PTRANSPORTVIDEOPARMS;

	struct TRANSPORTAUDIOPARMS {
		LONG EnableOutput;
		LONG EnableRecord;
		LONG EnableSelsync;
		LONG Input;
		LONG MonitorSource;
	}
	alias TRANSPORTAUDIOPARMS* PTRANSPORTAUDIOPARMS;

	struct MEDIUM_INFO {
		BOOL MediaPresent;
		ULONG MediaType;
		BOOL RecordInhibit;
	}
	alias MEDIUM_INFO* PMEDIUM_INFO;

	struct TRANSPORT_STATE {
		ULONG Mode;
		ULONG State;
	}
	alias TRANSPORT_STATE* PTRANSPORT_STATE;

	struct KSPROPERTY_EXTXPORT_S {
		KSPROPERTY Property;
		union {
			ULONG Capabilities;
			ULONG SignalMode;
			ULONG LoadMedium;
			MEDIUM_INFO MediumInfo;
			TRANSPORT_STATE XPrtState;
			struct {
				BYTE frame;
				BYTE second;
				BYTE minute;
				BYTE hour;
			}
			DWORD dwTimecode;
			DWORD dwAbsTrackNumber;
			struct {
				ULONG PayloadSize;
				BYTE[512] Payload;
			}
		}
	}
	alias KSPROPERTY_EXTXPORT_S* PKSPROPERTY_EXTXPORT_S;

	struct KSPROPERTY_EXTXPORT_NODE_S {
		KSP_NODE NodeProperty;
		union {
			ULONG Capabilities;
			ULONG SignalMode;
			ULONG LoadMedium;
			MEDIUM_INFO MediumInfo;
			TRANSPORT_STATE XPrtState;
			struct {
				BYTE frame;
				BYTE second;
				BYTE minute;
				BYTE hour;
			}
			DWORD dwTimecode;
			DWORD dwAbsTrackNumber;
			struct {
				ULONG PayloadSize;
				BYTE[512] Payload;
			}
		}
	}
	alias KSPROPERTY_EXTXPORT_NODE_S* PKSPROPERTY_EXTXPORT_NODE_S;

	mixin DEFINE_GUID!("PROPSETID_TIMECODE_READER", "9B496CE1-811B-11cf-8C77-00AA006B6814");

	enum {
		KSPROPERTY_TIMECODE_READER,
		KSPROPERTY_ATN_READER,
		KSPROPERTY_RTC_READER
	}
	alias int KSPROPERTY_TIMECODE;

	union TIMECODE {
		struct {
			WORD wFrameRate;
			WORD wFrameFract;
			DWORD dwFrames;
		}
		DWORDLONG qw;
	}
	alias TIMECODE* PTIMECODE;

	struct TIMECODE_SAMPLE {
		LONGLONG qwTick;
		TIMECODE timecode;
		DWORD dwUser;
		DWORD dwFlags;
	}
	alias TIMECODE_SAMPLE* PTIMECODE_SAMPLE;

	struct KSPROPERTY_TIMECODE_S {
		KSPROPERTY Property;
		TIMECODE_SAMPLE TimecodeSamp;
	}
	alias KSPROPERTY_TIMECODE_S* PKSPROPERTY_TIMECODE_S;

	struct KSPROPERTY_TIMECODE_NODE_S {
		KSP_NODE NodeProperty;
		TIMECODE_SAMPLE TimecodeSamp;
	}
	alias KSPROPERTY_TIMECODE_NODE_S* PKSPROPERTY_TIMECODE_NODE_S;

	mixin DEFINE_GUID!("KSEVENTSETID_EXTDEV_Command", "109c7988-b3cb-11d2-b48e-006097b3391b");

	enum {
		KSEVENT_EXTDEV_COMMAND_NOTIFY_INTERIM_READY,
		KSEVENT_EXTDEV_COMMAND_CONTROL_INTERIM_READY,
		KSEVENT_EXTDEV_COMMAND_BUSRESET,
		KSEVENT_EXTDEV_TIMECODE_UPDATE,
		KSEVENT_EXTDEV_OPERATION_MODE_UPDATE,
		KSEVENT_EXTDEV_TRANSPORT_STATE_UPDATE,
		KSEVENT_EXTDEV_NOTIFY_REMOVAL,
		KSEVENT_EXTDEV_NOTIFY_MEDIUM_CHANGE
	}
	alias int KSEVENT_DEVCMD;

mixin DEFINE_GUID!("PROPSETID_VIDCAP_CROSSBAR", "6a2e0640-28e4-11d0-a18c-00a0c9118956");

enum {
	KSPROPERTY_CROSSBAR_CAPS,
	KSPROPERTY_CROSSBAR_PININFO,
	KSPROPERTY_CROSSBAR_CAN_ROUTE,
	KSPROPERTY_CROSSBAR_ROUTE,
	KSPROPERTY_CROSSBAR_INPUT_ACTIVE
}
alias int KSPROPERTY_VIDCAP_CROSSBAR;

struct KSPROPERTY_CROSSBAR_CAPS_S {
	KSPROPERTY Property;
	ULONG NumberOfInputs;
	ULONG NumberOfOutputs;
}
alias KSPROPERTY_CROSSBAR_CAPS_S* PKSPROPERTY_CROSSBAR_CAPS_S;

struct KSPROPERTY_CROSSBAR_PININFO_S {
	KSPROPERTY Property;
	KSPIN_DATAFLOW Direction;
	ULONG Index;
	ULONG PinType;
	ULONG RelatedPinIndex;
	KSPIN_MEDIUM Medium;
}
alias KSPROPERTY_CROSSBAR_PININFO_S* PKSPROPERTY_CROSSBAR_PININFO_S;

struct KSPROPERTY_CROSSBAR_ROUTE_S {
	KSPROPERTY Property;
	ULONG IndexInputPin;
	ULONG IndexOutputPin;
	ULONG CanRoute;
}
alias KSPROPERTY_CROSSBAR_ROUTE_S* PKSPROPERTY_CROSSBAR_ROUTE_S;

struct KSPROPERTY_CROSSBAR_ACTIVE_S {
	KSPROPERTY Property;
	ULONG IndexInputPin;
	ULONG Active;
}
alias KSPROPERTY_CROSSBAR_ACTIVE_S* PKSPROPERTY_CROSSBAR_ACTIVE_S;

mixin DEFINE_GUID!("EVENTSETID_CROSSBAR", "6a2e0641-28e4-11d0-a18c-00a0c9118956");

enum {
	KSEVENT_CROSSBAR_CHANGED
}
alias int KSEVENT_CROSSBAR;

enum {
	KS_PhysConn_Video_Tuner = 1,
	KS_PhysConn_Video_Composite,
	KS_PhysConn_Video_SVideo,
	KS_PhysConn_Video_RGB,
	KS_PhysConn_Video_YRYBY,
	KS_PhysConn_Video_SerialDigital,
	KS_PhysConn_Video_ParallelDigital,
	KS_PhysConn_Video_SCSI,
	KS_PhysConn_Video_AUX,
	KS_PhysConn_Video_1394,
	KS_PhysConn_Video_USB,
	KS_PhysConn_Video_VideoDecoder,
	KS_PhysConn_Video_VideoEncoder,
	KS_PhysConn_Video_SCART,
	KS_PhysConn_Audio_Tuner = 4096,
	KS_PhysConn_Audio_Line,
	KS_PhysConn_Audio_Mic,
	KS_PhysConn_Audio_AESDigital,
	KS_PhysConn_Audio_SPDIFDigital,
	KS_PhysConn_Audio_SCSI,
	KS_PhysConn_Audio_AUX,
	KS_PhysConn_Audio_1394,
	KS_PhysConn_Audio_USB,
	KS_PhysConn_Audio_AudioDecoder
}
alias int KS_PhysicalConnectorType;

mixin DEFINE_GUID!("PROPSETID_VIDCAP_TVAUDIO", "6a2e0650-28e4-11d0-a18c-00a0c9118956");

enum {
	KSPROPERTY_TVAUDIO_CAPS,
	KSPROPERTY_TVAUDIO_MODE,
	KSPROPERTY_TVAUDIO_CURRENTLY_AVAILABLE_MODES
}
alias int KSPROPERTY_VIDCAP_TVAUDIO;

enum {
	KS_TVAUDIO_MODE_MONO   = 0x0001,
	KS_TVAUDIO_MODE_STEREO = 0x0002,
	KS_TVAUDIO_MODE_LANG_A = 0x0010,
	KS_TVAUDIO_MODE_LANG_B = 0x0020,
	KS_TVAUDIO_MODE_LANG_C = 0x0040,
//(NTDDI_VERSION >= NTDDI_VISTA)
		KS_TVAUDIO_PRESET_STEREO = 0x0200,
		KS_TVAUDIO_PRESET_LANG_A = 0x1000,
		KS_TVAUDIO_PRESET_LANG_B = 0x2000,
		KS_TVAUDIO_PRESET_LANG_C = 0x4000,
}

struct KSPROPERTY_TVAUDIO_CAPS_S {
	KSPROPERTY Property;
	ULONG Capabilities;
	KSPIN_MEDIUM InputMedium;
	KSPIN_MEDIUM OutputMedium;
}
alias KSPROPERTY_TVAUDIO_CAPS_S* PKSPROPERTY_TVAUDIO_CAPS_S;

struct KSPROPERTY_TVAUDIO_S {
	KSPROPERTY Property;
	ULONG Mode;
}
alias KSPROPERTY_TVAUDIO_S* PKSPROPERTY_TVAUDIO_S;

mixin DEFINE_GUID!("KSEVENTSETID_VIDCAP_TVAUDIO", "6a2e0651-28e4-11d0-a18c-00a0c9118956");

enum {
	KSEVENT_TVAUDIO_CHANGED,
}
alias int KSEVENT_TVAUDIO;

mixin DEFINE_GUID!("PROPSETID_VIDCAP_VIDEOCOMPRESSION", "C6E13343-30AC-11d0-A18C-00A0C9118956");

enum {
	KSPROPERTY_VIDEOCOMPRESSION_GETINFO,
	KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE,
	KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME,
	KSPROPERTY_VIDEOCOMPRESSION_QUALITY,
	KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_KEYFRAME,
	KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_FRAME_SIZE,
	KSPROPERTY_VIDEOCOMPRESSION_WINDOWSIZE
}
alias int KSPROPERTY_VIDCAP_VIDEOCOMPRESSION;

enum {
	KS_CompressionCaps_CanQuality  = 1,
	KS_CompressionCaps_CanCrunch   = 2,
	KS_CompressionCaps_CanKeyFrame = 4,
	KS_CompressionCaps_CanBFrame   = 8,
	KS_CompressionCaps_CanWindow   = 0x10
}
alias int KS_CompressionCaps;

//((NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
	enum {
		KS_StreamingHint_FrameInterval  = 0x0100,
		KS_StreamingHint_KeyFrameRate   = 0x0200,
		KS_StreamingHint_PFrameRate     = 0x0400,
		KS_StreamingHint_CompQuality    = 0x0800,
		KS_StreamingHint_CompWindowSize = 0x1000
	}
	alias int KS_VideoStreamingHints;

struct KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S {
	KSPROPERTY Property;
	ULONG StreamIndex;
	LONG DefaultKeyFrameRate;
	LONG DefaultPFrameRate;
	LONG DefaultQuality;
	LONG NumberOfQualitySettings;
	LONG Capabilities;
}
alias KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S* PKSPROPERTY_VIDEOCOMPRESSION_GETINFO_S;

struct KSPROPERTY_VIDEOCOMPRESSION_S {
	KSPROPERTY Property;
	ULONG StreamIndex;
	LONG Value;
}
alias KSPROPERTY_VIDEOCOMPRESSION_S* PKSPROPERTY_VIDEOCOMPRESSION_S;

//((NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
	struct KSPROPERTY_VIDEOCOMPRESSION_S1 {
		KSPROPERTY Property;
		ULONG StreamIndex;
		LONG Value;
		ULONG Flags;
	}
	alias KSPROPERTY_VIDEOCOMPRESSION_S1* PKSPROPERTY_VIDEOCOMPRESSION_S1;

mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_OVERLAY", "e436eb7f-524f-11ce-9f53-0020af0ba770");
mixin DEFINE_GUID!("KSPROPSETID_OverlayUpdate", "490EA5CF-7681-11D1-A21C-00A0C9223196");

enum {
	KSPROPERTY_OVERLAYUPDATE_INTERESTS,
	KSPROPERTY_OVERLAYUPDATE_CLIPLIST      = 0x1,
	KSPROPERTY_OVERLAYUPDATE_PALETTE       = 0x2,
	KSPROPERTY_OVERLAYUPDATE_COLORKEY      = 0x4,
	KSPROPERTY_OVERLAYUPDATE_VIDEOPOSITION = 0x8,
	KSPROPERTY_OVERLAYUPDATE_DISPLAYCHANGE = 0x10,
	KSPROPERTY_OVERLAYUPDATE_COLORREF      = 0x10000000
}
alias int KSPROPERTY_OVERLAYUPDATE;

struct KSDISPLAYCHANGE {
	ULONG PelsWidth;
	ULONG PelsHeight;
	ULONG BitsPerPel;
	WCHAR[1] DeviceID;
}
alias KSDISPLAYCHANGE* PKSDISPLAYCHANGE;

/*
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_INTERESTS(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_OVERLAYUPDATE_INTERESTS, (Handler), sizeof(KSPROPERTY), sizeof(ULONG), NULL, NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_PALETTE(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_OVERLAYUPDATE_PALETTE, NULL, sizeof(KSPROPERTY), 0, (Handler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_COLORKEY(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_OVERLAYUPDATE_COLORKEY, NULL, sizeof(KSPROPERTY), sizeof(COLORKEY), (Handler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_CLIPLIST(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_OVERLAYUPDATE_CLIPLIST, NULL, sizeof(KSPROPERTY), 2 * sizeof(RECT) + sizeof(RGNDATAHEADER), (Handler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_VIDEOPOSITION(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_OVERLAYUPDATE_VIDEOPOSITION, NULL, sizeof(KSPROPERTY), 2 * sizeof(RECT), (Handler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_DISPLAYCHANGE(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_OVERLAYUPDATE_DISPLAYCHANGE, NULL, sizeof(KSPROPERTY), sizeof(KSDISPLAYCHANGE), (Handler), NULL, 0, NULL, NULL, 0)
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_COLORREF(Handler) DEFINE_KSPROPERTY_ITEM( KSPROPERTY_OVERLAYUPDATE_COLORREF, (Handler), sizeof(KSPROPERTY), sizeof(COLORREF), NULL, NULL, 0, NULL, NULL, 0)
*/

mixin DEFINE_GUID!("PROPSETID_VIDCAP_VIDEOCONTROL", "6a2e0670-28e4-11d0-a18c-00a0c9118956");

enum {
	KSPROPERTY_VIDEOCONTROL_CAPS,
	KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE,
	KSPROPERTY_VIDEOCONTROL_FRAME_RATES,
	KSPROPERTY_VIDEOCONTROL_MODE
}
alias int KSPROPERTY_VIDCAP_VIDEOCONTROL;

enum {
	KS_VideoControlFlag_FlipHorizontal                 = 0x0001,
	KS_VideoControlFlag_FlipVertical                   = 0x0002,
	KS_Obsolete_VideoControlFlag_ExternalTriggerEnable = 0x0010,
	KS_Obsolete_VideoControlFlag_Trigger               = 0x0020,
	KS_VideoControlFlag_ExternalTriggerEnable          = 0x0004,
	KS_VideoControlFlag_Trigger                        = 0x0008
}
alias int KS_VideoControlFlags;

struct KSPROPERTY_VIDEOCONTROL_CAPS_S {
	KSPROPERTY Property;
	ULONG StreamIndex;
	ULONG VideoControlCaps;
}
alias KSPROPERTY_VIDEOCONTROL_CAPS_S* PKSPROPERTY_VIDEOCONTROL_CAPS_S;

struct KSPROPERTY_VIDEOCONTROL_MODE_S {
	KSPROPERTY Property;
	ULONG StreamIndex;
	LONG Mode;
}
alias KSPROPERTY_VIDEOCONTROL_MODE_S* PKSPROPERTY_VIDEOCONTROL_MODE_S;

struct KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S {
	KSPROPERTY Property;
	ULONG StreamIndex;
	ULONG RangeIndex;
	SIZE Dimensions;
	LONGLONG CurrentActualFrameRate;
	LONGLONG CurrentMaxAvailableFrameRate;
}
alias KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S* PKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S;

struct KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S {
	KSPROPERTY Property;
	ULONG StreamIndex;
	ULONG RangeIndex;
	SIZE Dimensions;
}
alias KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S* PKSPROPERTY_VIDEOCONTROL_FRAME_RATES_S;

mixin DEFINE_GUID!("PROPSETID_VIDCAP_DROPPEDFRAMES", "C6E13344-30AC-11d0-A18C-00A0C9118956");

enum {
	KSPROPERTY_DROPPEDFRAMES_CURRENT
}
alias int KSPROPERTY_VIDCAP_DROPPEDFRAMES;

struct KSPROPERTY_DROPPEDFRAMES_CURRENT_S {
	KSPROPERTY Property;
	LONGLONG PictureNumber;
	LONGLONG DropCount;
	ULONG AverageFrameSize;
}
alias KSPROPERTY_DROPPEDFRAMES_CURRENT_S* PKSPROPERTY_DROPPEDFRAMES_CURRENT_S;

mixin DEFINE_GUID!("KSPROPSETID_VPConfig", "bc29a660-30e3-11d0-9e69-00c04fd7c15b");
mixin DEFINE_GUID!("KSPROPSETID_VPVBIConfig", "ec529b00-1a1f-11d1-bad9-00609744111a");

enum {
	KSPROPERTY_VPCONFIG_NUMCONNECTINFO,
	KSPROPERTY_VPCONFIG_GETCONNECTINFO,
	KSPROPERTY_VPCONFIG_SETCONNECTINFO,
	KSPROPERTY_VPCONFIG_VPDATAINFO,
	KSPROPERTY_VPCONFIG_MAXPIXELRATE,
	KSPROPERTY_VPCONFIG_INFORMVPINPUT,
	KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT,
	KSPROPERTY_VPCONFIG_GETVIDEOFORMAT,
	KSPROPERTY_VPCONFIG_SETVIDEOFORMAT,
	KSPROPERTY_VPCONFIG_INVERTPOLARITY,
	KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY,
	KSPROPERTY_VPCONFIG_SCALEFACTOR,
	KSPROPERTY_VPCONFIG_DDRAWHANDLE,
	KSPROPERTY_VPCONFIG_VIDEOPORTID,
	KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE,
	KSPROPERTY_VPCONFIG_SURFACEPARAMS
}
alias int KSPROPERTY_VPCONFIG;

//(NTDDI_VERSION >= NTDDI_WINXP)
	mixin DEFINE_GUID!("CLSID_KsIBasicAudioInterfaceHandler", "b9f8ac3e-0f71-11d2-b72c-00c04fb6bd3d");

version(all){//__IVPType__

	struct KSVPMAXPIXELRATE {
		AMVPSIZE Size;
		DWORD MaxPixelsPerSecond;
		DWORD Reserved;
	}
	alias KSVPMAXPIXELRATE* PKSVPMAXPIXELRATE;

	struct KSVPSIZE_PROP {
		KSPROPERTY Property;
		AMVPSIZE Size;
	}
	alias KSVPSIZE_PROP* PKSVPSIZE_PROP;

	struct KSVPSURFACEPARAMS {
		DWORD dwPitch;
		DWORD dwXOrigin;
		DWORD dwYOrigin;
	}
	alias KSVPSURFACEPARAMS* PKSVPSURFACEPARAMS;

}else{

	// __DVP_INCLUDED__
	/* dvp.h in directx
	struct DDVIDEOPORTCONNECT {
		DWORD dwSize;
		DWORD dwPortWidth;
		GUID guidTypeID;
		DWORD dwFlags;
		ULONG_PTR dwReserved1;
	}
	alias DDVIDEOPORTCONNECT* LPDDVIDEOPORTCONNECT;

	DDVPTYPE_E_HREFH_VREFH  0x54F39980L,0xDA60,0x11CF,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8
	DDVPTYPE_E_HREFL_VREFL  0xE09C77E0L,0xDA60,0x11CF,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8
	*/

	// vptype.h in AM 2.0 sdk
		enum {
			KS_PixAspectRatio_NTSC4x3,
			KS_PixAspectRatio_NTSC16x9,
			KS_PixAspectRatio_PAL4x3,
			KS_PixAspectRatio_PAL16x9
		}
		alias int KS_AMPixAspectRatio;

		enum {
			KS_AMVP_DO_NOT_CARE,
			KS_AMVP_BEST_BANDWIDTH,
			KS_AMVP_INPUT_SAME_AS_OUTPUT
		}
		alias int KS_AMVP_SELECTFORMATBY;

		enum {
			KS_AMVP_MODE_WEAVE,
			KS_AMVP_MODE_BOBINTERLEAVED,
			KS_AMVP_MODE_BOBNONINTERLEAVED,
			KS_AMVP_MODE_SKIPEVEN,
			KS_AMVP_MODE_SKIPODD
		}
		alias int KS_AMVP_MODE;

		struct KS_AMVPDIMINFO {
			DWORD dwFieldWidth;
			DWORD dwFieldHeight;
			DWORD dwVBIWidth;
			DWORD dwVBIHeight;
			RECT rcValidRegion;
		}
		alias KS_AMVPDIMINFO* PKS_AMVPDIMINFO;

		struct KS_AMVPDATAINFO {
			DWORD dwSize;
			DWORD dwMicrosecondsPerField;
			KS_AMVPDIMINFO amvpDimInfo;
			DWORD dwPictAspectRatioX;
			DWORD dwPictAspectRatioY;
			BOOL bEnableDoubleClock;
			BOOL bEnableVACT;
			BOOL bDataIsInterlaced;
			LONG lHalfLinesOdd;
			BOOL bFieldPolarityInverted;
			DWORD dwNumLinesInVREF;
			LONG lHalfLinesEven;
			DWORD dwReserved1;
		}
		alias KS_AMVPDATAINFO* PKS_AMVPDATAINFO;

		struct KS_AMVPSIZE {
			DWORD dwWidth;
			DWORD dwHeight;
		}
		alias KS_AMVPSIZE* PKS_AMVPSIZE;

	struct KSVPMAXPIXELRATE {
		KS_AMVPSIZE Size;
		DWORD MaxPixelsPerSecond;
		DWORD Reserved;
	}
	alias KSVPMAXPIXELRATE* PKSVPMAXPIXELRATE;

	struct KSVPSIZE_PROP {
		KSPROPERTY Property;
		KS_AMVPSIZE Size;
	}
	alias KSVPSIZE_PROP* PKSVPSIZE_PROP;

	struct KSVPSURFACEPARAMS {
		DWORD dwPitch;
		DWORD dwXOrigin;
		DWORD dwYOrigin;
	}
	alias KSVPSURFACEPARAMS* PKSVPSURFACEPARAMS;
}

mixin DEFINE_GUID!("KSEVENTSETID_VPNotify", "20c5598e-d3c8-11d0-8dfc-00c04fd7c08b");

enum {
	KSEVENT_VPNOTIFY_FORMATCHANGE
}
alias int KSEVENT_VPNOTIFY;

mixin DEFINE_GUID!("KSEVENTSETID_VIDCAPTOSTI", "DB47DE20-F628-11d1-BA41-00A0C90D2B05");

enum {
	KSEVENT_VIDCAPTOSTI_EXT_TRIGGER,
	//((NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
		KSEVENT_VIDCAP_AUTO_UPDATE,
		KSEVENT_VIDCAP_SEARCH,
}
alias int KSEVENT_VIDCAPTOSTI;

//((NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
	enum {
		KSPROPERTY_EXTENSION_UNIT_INFO,
		KSPROPERTY_EXTENSION_UNIT_CONTROL,
		KSPROPERTY_EXTENSION_UNIT_PASS_THROUGH = 0xffff
	}
	alias int KSPROPERTY_EXTENSION_UNIT;
	alias KSPROPERTY_EXTENSION_UNIT* PKSPROPERTY_EXTENSION_UNIT;

mixin DEFINE_GUID!("KSEVENTSETID_VPVBINotify", "ec529b01-1a1f-11d1-bad9-00609744111a");

enum {
	KSEVENT_VPVBINOTIFY_FORMATCHANGE
}
alias int KSEVENT_VPVBINOTIFY;

mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_AUXLine21Data", "670aea80-3a82-11d0-b79b-00aa003767a7");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_Line21_BytePair", "6e8d4a22-310c-11d0-b79a-00aa003767a7");
mixin DEFINE_GUID!("KSDATAFORMAT_SUBTYPE_Line21_GOPPacket", "6e8d4a23-310c-11d0-b79a-00aa003767a7");

struct KSGOP_USERDATA {
	ULONG sc;
	ULONG reserved1;
	BYTE cFields;
	CHAR l21Data[3];
}
alias KSGOP_USERDATA* PKSGOP_USERDATA;

mixin DEFINE_GUID!("KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK", "ed0b916a-044d-11d1-aa78-00c04fc31d60");

enum KS_AM_UseNewCSSKey = 0x0001;

mixin DEFINE_GUID!("KSPROPSETID_TSRateChange", "A503C5C0-1D1D-11D1-AD80-444553540000");

enum {
	KS_AM_RATE_SimpleRateChange = 1,
	KS_AM_RATE_ExactRateChange  = 2,
	KS_AM_RATE_MaxFullDataRate  = 3,
	KS_AM_RATE_Step             = 4
}
alias int KS_AM_PROPERTY_TS_RATE_CHANGE;

struct KS_AM_SimpleRateChange {
	REFERENCE_TIME StartTime;
	LONG Rate;
}
alias KS_AM_SimpleRateChange* PKS_AM_SimpleRateChange;

struct KS_AM_ExactRateChange {
	REFERENCE_TIME OutputZeroTime;
	LONG Rate;
}
alias KS_AM_ExactRateChange* PKS_AM_ExactRateChange;

alias LONG KS_AM_MaxFullDataRate;

alias DWORD KS_AM_Step;

//(NTDDI_VERSION >= NTDDI_WINXPSP1)
	mixin DEFINE_GUID!("KSCATEGORY_ENCODER", "19689BF6-C384-48fd-AD51-90E58C79F70B");
	mixin DEFINE_GUID!("KSCATEGORY_MULTIPLEXER", "7A5DE1D3-01A1-452c-B481-4FA2B96271E8");
	mixin DEFINE_GUID!("ENCAPIPARAM_BITRATE", "49CC4C43-CA83-4ad4-A9AF-F3696AF666DF");
	mixin DEFINE_GUID!("ENCAPIPARAM_PEAK_BITRATE", "703F16A9-3D48-44a1-B077-018DFF915D19");
	mixin DEFINE_GUID!("ENCAPIPARAM_BITRATE_MODE", "EE5FB25C-C713-40d1-9D58-C0D7241E250F");

	//((NTDDI_VERSION >= NTDDI_WINXPSP2) && (NTDDI_VERSION < NTDDI_WS03) ) || (NTDDI_VERSION >= NTDDI_WS03SP1)
		mixin DEFINE_GUID!("CODECAPI_CHANGELISTS", "62B12ACF-F6B0-47D9-9456-96F22C4E0B9D");
		mixin DEFINE_GUID!("CODECAPI_VIDEO_ENCODER", "7112E8E1-3D03-47EF-8E60-03F1CF537301");
		mixin DEFINE_GUID!("CODECAPI_AUDIO_ENCODER", "B9D19A3E-F897-429C-BC46-8138B7272B2D");
		mixin DEFINE_GUID!("CODECAPI_SETALLDEFAULTS", "6C5E6A7C-ACF8-4F55-A999-1A628109051B");
		mixin DEFINE_GUID!("CODECAPI_ALLSETTINGS", "6A577E92-83E1-4113-ADC2-4FCEC32F83A1");
		mixin DEFINE_GUID!("CODECAPI_SUPPORTSEVENTS", "0581AF97-7693-4DBD-9DCA-3F9EBD6585A1");
		mixin DEFINE_GUID!("CODECAPI_CURRENTCHANGELIST", "1CB14E83-7D72-4657-83FD-47A2C5B9D13D");

	enum {
		ConstantBitRate = 0,
		VariableBitRateAverage,
		VariableBitRatePeak
	}
	alias int VIDEOENCODER_BITRATE_MODE;

	mixin DEFINE_GUID!("KSPROPSETID_Jack", "4509F757-2D46-4637-8E62-CE7DB944F57B");

	enum {
		KSPROPERTY_JACK_DESCRIPTION = 1,
		KSPROPERTY_JACK_DESCRIPTION2,
		KSPROPERTY_JACK_SINK_INFO
	}
	alias int KSPROPERTY_JACK;

	enum {
		eConnTypeUnknown,
		eConnType3Point5mm,
		eConnTypeQuarter,
		eConnTypeAtapiInternal,
		eConnTypeRCA,
		eConnTypeOptical,
		eConnTypeOtherDigital,
		eConnTypeOtherAnalog,
		eConnTypeMultichannelAnalogDIN,
		eConnTypeXlrProfessional,
		eConnTypeRJ11Modem,
		eConnTypeCombination
	}
	alias int EPcxConnectionType;

	enum {
		eGeoLocRear = 0x1,
		eGeoLocFront,
		eGeoLocLeft,
		eGeoLocRight,
		eGeoLocTop,
		eGeoLocBottom,
		eGeoLocRearPanel,
		eGeoLocRiser,
		eGeoLocInsideMobileLid,
		eGeoLocDrivebay,
		eGeoLocHDMI,
		eGeoLocOutsideMobileLid,
		eGeoLocATAPI,
		eGeoLocReserved5,
		eGeoLocReserved6,
		EPcxGeoLocation_enum_count
	}
	alias int EPcxGeoLocation;

	enum {
		eGenLocPrimaryBox = 0,
		eGenLocInternal,
		eGenLocSeparate,
		eGenLocOther,
		EPcxGenLocation_enum_count
	}
	alias int EPcxGenLocation;

	enum {
		ePortConnJack = 0,
		ePortConnIntegratedDevice,
		ePortConnBothIntegratedAndJack,
		ePortConnUnknown
	}
	alias int EPxcPortConnection;

	struct KSJACK_DESCRIPTION {
		DWORD ChannelMapping;
		COLORREF Color;
		EPcxConnectionType ConnectionType;
		EPcxGeoLocation GeoLocation;
		EPcxGenLocation GenLocation;
		EPxcPortConnection PortConnection;
		BOOL IsConnected;
	}
	alias KSJACK_DESCRIPTION* PKSJACK_DESCRIPTION;

	enum {
		KSJACK_SINK_CONNECTIONTYPE_HDMI = 0,
		KSJACK_SINK_CONNECTIONTYPE_DISPLAYPORT,
	}
	alias int KSJACK_SINK_CONNECTIONTYPE;

	enum MAX_SINK_DESCRIPTION_NAME_LENGTH = 32;
	struct KSJACK_SINK_INFORMATION {
		KSJACK_SINK_CONNECTIONTYPE ConnType;
		WORD ManufacturerId;
		WORD ProductId;
		WORD AudioLatency;
		BOOL HDCPCapable;
		BOOL AICapable;
		UCHAR SinkDescriptionLength;
		WCHAR SinkDescription[MAX_SINK_DESCRIPTION_NAME_LENGTH];
		LUID PortId;
	}
	alias KSJACK_SINK_INFORMATION* PKSJACK_SINK_INFORMATION;

	enum {
		JACKDESC2_PRESENCE_DETECT_CAPABILITY       = 0x00000001,
		JACKDESC2_DYNAMIC_FORMAT_CHANGE_CAPABILITY = 0x00000002,
	}

	struct KSJACK_DESCRIPTION2 {
		DWORD DeviceStateInfo;
		DWORD JackCapabilities;
	}
	alias KSJACK_DESCRIPTION2* PKSJACK_DESCRIPTION2;

mixin DEFINE_GUID!("KSPROPSETID_AudioBufferDuration", "4E73C07F-23CC-4955-A7EA-3DA502496290");

enum KSPROPERTY_AUDIO_BUFFER_DURATION = 1;

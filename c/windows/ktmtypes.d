/** ktmtypes.d

Converted from 'ktmtypes.h'.

Version: V7.0
Authors: Koji Kishita
*/
module c.windows.ktmtypes;


import c.windows.windef;
import c.windows.guiddef;


extern(C){
	alias GUID UOW;
	alias UOW* PUOW;
	alias GUID CRM_PROTOCOL_ID;
	alias CRM_PROTOCOL_ID* PCRM_PROTOCOL_ID;

	enum {
		TRANSACTION_MANAGER_VOLATILE             = 0x00000001,
		TRANSACTION_MANAGER_COMMIT_DEFAULT       = 0x00000000,
		TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME = 0x00000002,
		TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES  = 0x00000004,
		TRANSACTION_MANAGER_COMMIT_LOWEST        = 0x00000008,
		TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY = 0x00000010,
		TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS = 0x00000020,
		TRANSACTION_MANAGER_MAXIMUM_OPTION       = 0x0000003F,
	}

	enum {
		TRANSACTION_DO_NOT_PROMOTE = 0x00000001,
		TRANSACTION_MAXIMUM_OPTION = 0x00000001,
	}

	enum {
		RESOURCE_MANAGER_VOLATILE       = 0x00000001,
		RESOURCE_MANAGER_COMMUNICATION  = 0x00000002,
		RESOURCE_MANAGER_MAXIMUM_OPTION = 0x00000003,
	}

	enum {
		CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY = 0x00000001,
		CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO  = 0x00000002,
		CRM_PROTOCOL_MAXIMUM_OPTION        = 0x00000003,
	}

	enum {
		ENLISTMENT_SUPERIOR       = 0x00000001,
		ENLISTMENT_MAXIMUM_OPTION = 0x00000001,
	}

	alias ULONG NOTIFICATION_MASK;
	enum {
		TRANSACTION_NOTIFY_MASK                = 0x3FFFFFFF,
		TRANSACTION_NOTIFY_PREPREPARE          = 0x00000001,
		TRANSACTION_NOTIFY_PREPARE             = 0x00000002,
		TRANSACTION_NOTIFY_COMMIT              = 0x00000004,
		TRANSACTION_NOTIFY_ROLLBACK            = 0x00000008,
		TRANSACTION_NOTIFY_PREPREPARE_COMPLETE = 0x00000010,
		TRANSACTION_NOTIFY_PREPARE_COMPLETE    = 0x00000020,
		TRANSACTION_NOTIFY_COMMIT_COMPLETE     = 0x00000040,
		TRANSACTION_NOTIFY_ROLLBACK_COMPLETE   = 0x00000080,
		TRANSACTION_NOTIFY_RECOVER             = 0x00000100,
		TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT = 0x00000200,
		TRANSACTION_NOTIFY_DELEGATE_COMMIT     = 0x00000400,
		TRANSACTION_NOTIFY_RECOVER_QUERY       = 0x00000800,
		TRANSACTION_NOTIFY_ENLIST_PREPREPARE   = 0x00001000,
		TRANSACTION_NOTIFY_LAST_RECOVER        = 0x00002000,
		TRANSACTION_NOTIFY_INDOUBT             = 0x00004000,
		TRANSACTION_NOTIFY_PROPAGATE_PULL      = 0x00008000,
		TRANSACTION_NOTIFY_PROPAGATE_PUSH      = 0x00010000,
		TRANSACTION_NOTIFY_MARSHAL             = 0x00020000,
		TRANSACTION_NOTIFY_ENLIST_MASK         = 0x00040000,
		TRANSACTION_NOTIFY_RM_DISCONNECTED     = 0x01000000,
		TRANSACTION_NOTIFY_TM_ONLINE           = 0x02000000,
		TRANSACTION_NOTIFY_COMMIT_REQUEST      = 0x04000000,
		TRANSACTION_NOTIFY_PROMOTE             = 0x08000000,
		TRANSACTION_NOTIFY_PROMOTE_NEW         = 0x10000000,
		TRANSACTION_NOTIFY_REQUEST_OUTCOME     = 0x20000000,
		TRANSACTION_NOTIFY_COMMIT_FINALIZE     = 0x40000000,
	}

	const wchar[] TRANSACTIONMANAGER_OBJECT_PATH = "\\TransactionManager\\";
	const wchar[] TRANSACTION_OBJECT_PATH        = "\\Transaction\\";
	const wchar[] ENLISTMENT_OBJECT_PATH         = "\\Enlistment\\";
	const wchar[] RESOURCE_MANAGER_OBJECT_PATH   = "\\ResourceManager\\";

	enum {
		TRANSACTIONMANAGER_OBJECT_NAME_LENGTH_IN_BYTES  = TRANSACTIONMANAGER_OBJECT_PATH.sizeof + (38 * WCHAR.sizeof),
		TRANSACTION_OBJECT_NAME_LENGTH_IN_BYTES         = TRANSACTION_OBJECT_PATH.sizeof + (38 * WCHAR.sizeof),
		ENLISTMENT_OBJECT_NAME_LENGTH_IN_BYTES          = ENLISTMENT_OBJECT_PATH.sizeof + (38 * WCHAR.sizeof),
		RESOURCE_MANAGER_OBJECT_NAME_LENGTH_IN_BYTES    = RESOURCE_MANAGER_OBJECT_PATH.sizeof + (38 * WCHAR.sizeof),
	}

	struct TRANSACTION_NOTIFICATION {
		PVOID TransactionKey;
		ULONG TransactionNotification;
		LARGE_INTEGER TmVirtualClock;
		ULONG ArgumentLength;
	}
	alias TRANSACTION_NOTIFICATION* PTRANSACTION_NOTIFICATION;

	struct TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
		GUID EnlistmentId;
		UOW  uow;
	}
	alias TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT* PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;

	enum TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED = 0x1;

	struct TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
		GUID TmIdentity;
		ULONG Flags;
	}
	alias TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT* PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

	alias ULONG SAVEPOINT_ID;
	alias SAVEPOINT_ID* PSAVEPOINT_ID;

	struct TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
		SAVEPOINT_ID SavepointId;
	}
	alias TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT* PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

	struct TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
		ULONG PropagationCookie;
		GUID UOW;
		GUID TmIdentity;
		ULONG BufferLength;
	}
	alias TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT* PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

	struct TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
		ULONG MarshalCookie;
		GUID UOW;
	}
	alias TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT* PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

	alias TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;
	alias TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT* PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;

	enum {
		KTM_MARSHAL_BLOB_VERSION_MAJOR = 1,
		KTM_MARSHAL_BLOB_VERSION_MINOR = 1,
	}

	enum {
		MAX_TRANSACTION_DESCRIPTION_LENGTH = 64,
		MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH = 64,
	}

	struct KCRM_MARSHAL_HEADER {
		ULONG VersionMajor;
		ULONG VersionMinor;
		ULONG NumProtocols;
		ULONG Unused;
	}
	alias KCRM_MARSHAL_HEADER* PKCRM_MARSHAL_HEADER;
	alias KCRM_MARSHAL_HEADER* PRKCRM_MARSHAL_HEADER;

	struct KCRM_TRANSACTION_BLOB {
		UOW uow;
		GUID TmIdentity;
		ULONG IsolationLevel;
		ULONG IsolationFlags;
		ULONG Timeout;
		WCHAR[MAX_TRANSACTION_DESCRIPTION_LENGTH] Description;
	}
	alias KCRM_TRANSACTION_BLOB* PKCRM_TRANSACTION_BLOB;
	alias KCRM_TRANSACTION_BLOB* PRKCRM_TRANSACTION_BLOB;

	struct KCRM_PROTOCOL_BLOB {
		CRM_PROTOCOL_ID ProtocolId;
		ULONG StaticInfoLength;
		ULONG TransactionIdInfoLength;
		ULONG Unused1;
		ULONG Unused2;
	}
	alias KCRM_PROTOCOL_BLOB* PKCRM_PROTOCOL_BLOB;
	alias KCRM_PROTOCOL_BLOB* PRKCRM_PROTOCOL_BLOB;
} // extern(C)

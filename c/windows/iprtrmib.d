/** iprtrmib.d

Converted from 'iprtrmib.h'.

Version: V7.0
Authors: Koji Kishita
*/
module c.windows.iprtrmlib;


import c.windows.sdkddkver;
import c.windows.windef;
import c.windows.ipmib;


enum IPRTRMGR_PID = 10000;

enum {
	IF_NUMBER          = 0,
	IF_TABLE           = IF_NUMBER + 1,
	IF_ROW             = IF_TABLE + 1,
	IP_STATS           = IF_ROW + 1,
	IP_ADDRTABLE       = IP_STATS + 1,
	IP_ADDRROW         = IP_ADDRTABLE + 1,
	IP_FORWARDNUMBER   = IP_ADDRROW + 1,
	IP_FORWARDTABLE    = IP_FORWARDNUMBER + 1,
	IP_FORWARDROW      = IP_FORWARDTABLE + 1,
	IP_NETTABLE        = IP_FORWARDROW + 1,
	IP_NETROW          = IP_NETTABLE + 1,
	ICMP_STATS         = IP_NETROW + 1,
	TCP_STATS          = ICMP_STATS + 1,
	TCP_TABLE          = TCP_STATS + 1,
	TCP_ROW            = TCP_TABLE + 1,
	UDP_STATS          = TCP_ROW + 1,
	UDP_TABLE          = UDP_STATS + 1,
	UDP_ROW            = UDP_TABLE + 1,
	MCAST_MFE          = UDP_ROW + 1,
	MCAST_MFE_STATS    = MCAST_MFE + 1,
	BEST_IF            = MCAST_MFE_STATS + 1,
	BEST_ROUTE         = BEST_IF + 1,
	PROXY_ARP          = BEST_ROUTE + 1,
	MCAST_IF_ENTRY     = PROXY_ARP + 1,
	MCAST_GLOBAL       = MCAST_IF_ENTRY + 1,
	IF_STATUS          = MCAST_GLOBAL + 1,
	MCAST_BOUNDARY     = IF_STATUS + 1,
	MCAST_SCOPE        = MCAST_BOUNDARY + 1,
	DEST_MATCHING      = MCAST_SCOPE + 1,
	DEST_LONGER        = DEST_MATCHING + 1,
	DEST_SHORTER       = DEST_LONGER + 1,
	ROUTE_MATCHING     = DEST_SHORTER + 1,
	ROUTE_LONGER       = ROUTE_MATCHING + 1,
	ROUTE_SHORTER      = ROUTE_LONGER + 1,
	ROUTE_STATE        = ROUTE_SHORTER + 1,
	MCAST_MFE_STATS_EX = ROUTE_STATE + 1,
	IP6_STATS          = MCAST_MFE_STATS_EX + 1,
	UDP6_STATS         = IP6_STATS + 1,
	TCP6_STATS         = UDP6_STATS + 1,
}

//(NTDDI_VERSION >= NTDDI_VISTA
	enum NUMBER_OF_EXPORTED_VARIABLES = TCP6_STATS + 1;
//else
//	enum NUMBER_OF_EXPORTED_VARIABLES = ROUTE_STATE + 1;


struct MIB_OPAQUE_QUERY {
	DWORD dwVarId;
	DWORD[1] rgdwVarIndex;
}
alias MIB_OPAQUE_QUERY* PMIB_OPAQUE_QUERY;

enum {
	TCP_TABLE_BASIC_LISTENER,
	TCP_TABLE_BASIC_CONNECTIONS,
	TCP_TABLE_BASIC_ALL,
	TCP_TABLE_OWNER_PID_LISTENER,
	TCP_TABLE_OWNER_PID_CONNECTIONS,
	TCP_TABLE_OWNER_PID_ALL,
	TCP_TABLE_OWNER_MODULE_LISTENER,
	TCP_TABLE_OWNER_MODULE_CONNECTIONS,
	TCP_TABLE_OWNER_MODULE_ALL
}
alias int TCP_TABLE_CLASS;
alias TCP_TABLE_CLASS* PTCP_TABLE_CLASS;

enum {
	UDP_TABLE_BASIC,
	UDP_TABLE_OWNER_PID,
	UDP_TABLE_OWNER_MODULE
}
alias int UDP_TABLE_CLASS;
alias UDP_TABLE_CLASS* PUDP_TABLE_CLASS;

enum {
	TCPIP_OWNER_MODULE_INFO_BASIC
}
alias int TCPIP_OWNER_MODULE_INFO_CLASS;
alias TCPIP_OWNER_MODULE_INFO_CLASS* PTCPIP_OWNER_MODULE_INFO_CLASS;

struct TCPIP_OWNER_MODULE_BASIC_INFO {
	PWCHAR pModuleName;
	PWCHAR pModulePath;
}
alias TCPIP_OWNER_MODULE_BASIC_INFO* PTCPIP_OWNER_MODULE_BASIC_INFO;

struct MIB_IPMCAST_BOUNDARY {
	DWORD dwIfIndex;
	DWORD dwGroupAddress;
	DWORD dwGroupMask;
	DWORD dwStatus;
}
alias MIB_IPMCAST_BOUNDARY* PMIB_IPMCAST_BOUNDARY;

struct MIB_IPMCAST_BOUNDARY_TABLE {
	DWORD dwNumEntries;
	MIB_IPMCAST_BOUNDARY[1] table;
}
alias MIB_IPMCAST_BOUNDARY_TABLE* PMIB_IPMCAST_BOUNDARY_TABLE;

struct MIB_BOUNDARYROW {
	DWORD dwGroupAddress;
	DWORD dwGroupMask;
}
alias MIB_BOUNDARYROW* PMIB_BOUNDARYROW;

struct MIB_MCAST_LIMIT_ROW {
	DWORD dwTtl;
	DWORD dwRateLimit;
}
alias MIB_MCAST_LIMIT_ROW* PMIB_MCAST_LIMIT_ROW;

enum MAX_SCOPE_NAME_LEN = 255;

alias WCHAR SN_CHAR;
alias SN_CHAR[MAX_SCOPE_NAME_LEN+1] SCOPE_NAME_BUFFER;
alias SN_CHAR* SCOPE_NAME;

struct MIB_IPMCAST_SCOPE {
	DWORD dwGroupAddress;
	DWORD dwGroupMask;
	SCOPE_NAME_BUFFER snNameBuffer;
	DWORD dwStatus;
}
alias MIB_IPMCAST_SCOPE* PMIB_IPMCAST_SCOPE;

struct MIB_IPDESTROW {
	 MIB_IPFORWARDROW ForwardRow;
	DWORD dwForwardPreference;
	DWORD dwForwardViewSet;
}
alias MIB_IPDESTROW* PMIB_IPDESTROW;

struct MIB_IPDESTTABLE {
	DWORD dwNumEntries;
	MIB_IPDESTROW[1] table;
}
alias MIB_IPDESTTABLE* PMIB_IPDESTTABLE;

struct MIB_BEST_IF {
	DWORD dwDestAddr;
	DWORD dwIfIndex;
}
alias MIB_BEST_IF* PMIB_BEST_IF;

struct MIB_PROXYARP {
	DWORD dwAddress;
	DWORD dwMask;
	DWORD dwIfIndex;
}
alias MIB_PROXYARP* PMIB_PROXYARP;

struct MIB_IFSTATUS {
	DWORD dwIfIndex;
	DWORD dwAdminStatus;
	DWORD dwOperationalStatus;
	BOOL bMHbeatActive;
	BOOL bMHbeatAlive;
}
alias MIB_IFSTATUS* PMIB_IFSTATUS;

struct MIB_ROUTESTATE {
	BOOL bRoutesSetToStack;
}
alias MIB_ROUTESTATE* PMIB_ROUTESTATE;

struct MIB_OPAQUE_INFO {
	DWORD dwId;
	union {
		ULONGLONG ullAlign;
		BYTE[1] rgbyData;
	}
}
alias MIB_OPAQUE_INFO* PMIB_OPAQUE_INFO;

enum MAX_MIB_OFFSET = 8;
